Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    PARAMS
    CONDOP
    DOUBLE
    OUT
    BREAK
    UNCHECKED
    COMMENT
    MEMBERACCESS
    THROW
    STACKALLOC
    DO
    DEFAULT
    SHORT
    BASE
    FOREACH
    OPERATOR
    READONLY
    XOR
    TRY
    PROTECTED
    ULONG
    PUBLIC
    TRUE
    ABSTRACT
    AND
    AS
    UINT
    CHECKED
    VIRTUAL
    STRUCT
    LONG
    LSHIFTEQUAL
    GE
    DELEGATE
    DECIMAL
    NEW
    UNSAFE
    SWITCH
    ENUM
    FIXED
    IS
    COLON
    OBJECT
    CONDMEMBACCESS
    SBYTE
    IMPLICIT
    FALSE
    VOID
    SIZEOF
    ANDEQUAL
    OREQUAL
    NULL
    PRIVATE
    CONTINUE
    IN
    OR
    MODEQUAL
    SEALED
    DIVEQUAL
    TIMESEQUAL
    PREPROCESSOR
    INTERNAL
    EXTERN
    PLUSEQUAL
    RSHIFTEQUAL
    VOLATILE
    XOREQUAL
    MINUSEQUAL
    EXPLICIT
    LOCK
    LAMBDADEC
    USHORT
    BYTE
    BOOL
    CASE
    GOTO
    REF
    TYPEOF
    LE
    FINALLY
    STRING
    NEWLINE
    CONST
    CATCH
    ARROW
    USING
    THIS
    OVERRIDE
    STATIC

Grammar

Rule 0     S' -> compilation_unit
Rule 1     type -> non_array_type
Rule 2     type -> array_type
Rule 3     non_array_type -> simple_type
Rule 4     simple_type -> primitive_type
Rule 5     primitive_type -> numeric_type
Rule 6     numeric_type -> integral_type
Rule 7     numeric_type -> floating_point_type
Rule 8     integral_type -> INT
Rule 9     integral_type -> CHAR
Rule 10    floating_point_type -> FLOAT
Rule 11    array_type -> simple_type LBRACKET RBRACKET
Rule 12    argument_list -> argument
Rule 13    argument_list -> argument_list COMMA argument
Rule 14    argument -> expression
Rule 15    primary_expression -> parenthesized_expression
Rule 16    primary_expression -> primary_expression_no_parenthesis
Rule 17    primary_expression_no_parenthesis -> literal
Rule 18    primary_expression_no_parenthesis -> invocation_expression
Rule 19    primary_expression_no_parenthesis -> element_access
Rule 20    primary_expression_no_parenthesis -> IDENTIFIER
Rule 21    literal -> INTCONST
Rule 22    literal -> STRCONST
Rule 23    literal -> CHCONST
Rule 24    parenthesized_expression -> LPAREN expression RPAREN
Rule 25    invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 26    argument_list_opt -> empty
Rule 27    argument_list_opt -> argument_list
Rule 28    element_access -> IDENTIFIER LBRACKET expression RBRACKET
Rule 29    postfix_expression -> primary_expression
Rule 30    unary_expression_not_plusminus -> postfix_expression
Rule 31    unary_expression_not_plusminus -> LNOT unary_expression
Rule 32    unary_expression_not_plusminus -> NOT unary_expression
Rule 33    pre_increment_expression -> INCREMENT unary_expression
Rule 34    pre_decrement_expression -> DECREMENT unary_expression
Rule 35    unary_expression -> unary_expression_not_plusminus
Rule 36    unary_expression -> PLUS unary_expression
Rule 37    unary_expression -> MINUS unary_expression
Rule 38    unary_expression -> pre_increment_expression
Rule 39    unary_expression -> pre_decrement_expression
Rule 40    multiplicative_expression -> unary_expression
Rule 41    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 42    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 43    multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 44    additive_expression -> multiplicative_expression
Rule 45    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 46    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 47    shift_expression -> additive_expression
Rule 48    shift_expression -> shift_expression LSHIFT additive_expression
Rule 49    shift_expression -> shift_expression RSHIFT additive_expression
Rule 50    relational_expression -> shift_expression
Rule 51    relational_expression -> relational_expression LT shift_expression
Rule 52    relational_expression -> relational_expression GT shift_expression
Rule 53    equality_expression -> relational_expression
Rule 54    equality_expression -> equality_expression EQ relational_expression
Rule 55    equality_expression -> equality_expression NE relational_expression
Rule 56    and_expression -> equality_expression
Rule 57    exclusive_or_expression -> and_expression
Rule 58    inclusive_or_expression -> exclusive_or_expression
Rule 59    conditional_and_expression -> inclusive_or_expression
Rule 60    conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression
Rule 61    conditional_or_expression -> conditional_and_expression
Rule 62    conditional_or_expression -> conditional_or_expression COR conditional_and_expression
Rule 63    conditional_expression -> conditional_or_expression
Rule 64    assignment -> unary_expression assignment_operator expression
Rule 65    assignment_operator -> EQUALS
Rule 66    expression -> conditional_expression
Rule 67    expression -> assignment
Rule 68    boolean_expression -> expression
Rule 69    statement -> declaration_statement
Rule 70    statement -> embedded_statement
Rule 71    embedded_statement -> block
Rule 72    embedded_statement -> expression_statement
Rule 73    embedded_statement -> selection_statement
Rule 74    embedded_statement -> iteration_statement
Rule 75    embedded_statement -> jump_statement
Rule 76    block -> LBRACE begin_scope statement_list_opt RBRACE
Rule 77    statement_list_opt -> empty
Rule 78    statement_list_opt -> statement_list
Rule 79    statement_list -> statement
Rule 80    statement_list -> statement_list statement
Rule 81    declaration_statement -> local_variable_declaration STMT_TERMINATOR
Rule 82    local_variable_declaration -> type variable_declarators
Rule 83    variable_declarators -> variable_declarator
Rule 84    variable_declarators -> variable_declarators COMMA variable_declarator
Rule 85    variable_declarator -> IDENTIFIER
Rule 86    variable_declarator -> IDENTIFIER EQUALS variable_initializer
Rule 87    variable_initializer -> expression
Rule 88    variable_initializer -> array_initializer
Rule 89    array_initializer -> LBRACE variable_initializer_list RBRACE
Rule 90    variable_initializer_list -> variable_initializer
Rule 91    variable_initializer_list -> variable_initializer_list COMMA variable_initializer
Rule 92    expression_statement -> statement_expression STMT_TERMINATOR
Rule 93    statement_expression -> invocation_expression
Rule 94    statement_expression -> assignment
Rule 95    statement_expression -> pre_increment_expression
Rule 96    statement_expression -> pre_decrement_expression
Rule 97    selection_statement -> if_statement
Rule 98    if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement
Rule 99    if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
Rule 100   iteration_statement -> while_statement
Rule 101   iteration_statement -> for_statement
Rule 102   while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement
Rule 103   for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
Rule 104   for_initializer -> local_variable_declaration
Rule 105   for_initializer -> statement_expression_list
Rule 106   for_condition -> boolean_expression
Rule 107   for_iterator -> statement_expression_list
Rule 108   statement_expression_list -> statement_expression
Rule 109   statement_expression_list -> statement_expression_list COMMA statement_expression
Rule 110   jump_statement -> return_statement
Rule 111   return_statement -> RETURN expression_opt STMT_TERMINATOR
Rule 112   expression_opt -> empty
Rule 113   expression_opt -> expression
Rule 114   compilation_unit -> namespace_declaration
Rule 115   namespace_member_declarations_opt -> empty
Rule 116   namespace_member_declarations_opt -> namespace_member_declarations
Rule 117   namespace_declaration -> NAMESPACE IDENTIFIER namespace_body
Rule 118   namespace_body -> LBRACE namespace_member_declarations_opt RBRACE
Rule 119   namespace_member_declarations -> namespace_member_declaration
Rule 120   namespace_member_declaration -> type_declaration
Rule 121   type_declaration -> class_declaration
Rule 122   class_declaration -> CLASS IDENTIFIER class_body
Rule 123   class_body -> LBRACE class_member_declarations_opt RBRACE
Rule 124   class_member_declarations_opt -> empty
Rule 125   class_member_declarations_opt -> class_member_declarations
Rule 126   class_member_declarations -> class_member_declaration
Rule 127   class_member_declarations -> class_member_declarations class_member_declaration
Rule 128   class_member_declaration -> field_declaration
Rule 129   class_member_declaration -> method_declaration
Rule 130   field_declaration -> type variable_declarators STMT_TERMINATOR
Rule 131   method_declaration -> method_header method_body
Rule 132   method_header -> type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
Rule 133   formal_parameter_list_opt -> empty
Rule 134   formal_parameter_list_opt -> formal_parameter_list
Rule 135   method_body -> block
Rule 136   formal_parameter_list -> formal_parameter
Rule 137   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 138   formal_parameter -> type IDENTIFIER
Rule 139   begin_scope -> empty
Rule 140   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ANDEQUAL             : 
ARROW                : 
AS                   : 
BASE                 : 
BOOL                 : 
BREAK                : 
BYTE                 : 
CAND                 : 60
CASE                 : 
CATCH                : 
CHAR                 : 9
CHCONST              : 23
CHECKED              : 
CLASS                : 122
COLON                : 
COMMA                : 13 84 91 109 137
COMMENT              : 
CONDMEMBACCESS       : 
CONDOP               : 
CONST                : 
CONTINUE             : 
COR                  : 62
DECIMAL              : 
DECREMENT            : 34
DEFAULT              : 
DELEGATE             : 
DIVEQUAL             : 
DIVIDE               : 42
DO                   : 
DOUBLE               : 
ELSE                 : 99
ENUM                 : 
EQ                   : 54
EQUALS               : 65 86
EXPLICIT             : 
EXTERN               : 
FALSE                : 
FINALLY              : 
FIXED                : 
FLOAT                : 10
FOR                  : 103
FOREACH              : 
GE                   : 
GOTO                 : 
GT                   : 52
IDENTIFIER           : 20 25 28 85 86 117 122 132 138
IF                   : 98 99
IMPLICIT             : 
IN                   : 
INCREMENT            : 33
INT                  : 8
INTCONST             : 21
INTERNAL             : 
IS                   : 
LAMBDADEC            : 
LBRACE               : 76 89 118 123
LBRACKET             : 11 28
LE                   : 
LNOT                 : 31
LOCK                 : 
LONG                 : 
LPAREN               : 24 25 98 99 102 103 132
LSHIFT               : 48
LSHIFTEQUAL          : 
LT                   : 51
MEMBERACCESS         : 
MINUS                : 37 46
MINUSEQUAL           : 
MOD                  : 43
MODEQUAL             : 
NAMESPACE            : 117
NE                   : 55
NEW                  : 
NEWLINE              : 
NOT                  : 32
NULL                 : 
OBJECT               : 
OPERATOR             : 
OR                   : 
OREQUAL              : 
OUT                  : 
OVERRIDE             : 
PARAMS               : 
PLUS                 : 36 45
PLUSEQUAL            : 
PREPROCESSOR         : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACE               : 76 89 118 123
RBRACKET             : 11 28
READONLY             : 
REF                  : 
RETURN               : 111
RPAREN               : 24 25 98 99 102 103 132
RSHIFT               : 49
RSHIFTEQUAL          : 
SBYTE                : 
SEALED               : 
SHORT                : 
SIZEOF               : 
STACKALLOC           : 
STATIC               : 
STMT_TERMINATOR      : 81 92 103 103 111 130
STRCONST             : 22
STRING               : 
STRUCT               : 
SWITCH               : 
THIS                 : 
THROW                : 
TIMES                : 41
TIMESEQUAL           : 
TRUE                 : 
TRY                  : 
TYPEOF               : 
UINT                 : 
ULONG                : 
UNCHECKED            : 
UNSAFE               : 
USHORT               : 
USING                : 
VIRTUAL              : 
VOID                 : 
VOLATILE             : 
WHILE                : 102
XOR                  : 
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 45 46 47 48 49
and_expression       : 57
argument             : 12 13
argument_list        : 13 27
argument_list_opt    : 25
array_initializer    : 88
array_type           : 2
assignment           : 67 94
assignment_operator  : 64
begin_scope          : 76
block                : 71 135
boolean_expression   : 98 99 102 106
class_body           : 122
class_declaration    : 121
class_member_declaration : 126 127
class_member_declarations : 125 127
class_member_declarations_opt : 123
compilation_unit     : 0
conditional_and_expression : 60 61 62
conditional_expression : 66
conditional_or_expression : 62 63
declaration_statement : 69
element_access       : 19
embedded_statement   : 70 98 99 99 102 103
empty                : 26 77 112 115 124 133 139
equality_expression  : 54 55 56
exclusive_or_expression : 58
expression           : 14 24 28 64 68 87 113
expression_opt       : 111
expression_statement : 72
field_declaration    : 128
floating_point_type  : 7
for_condition        : 103
for_initializer      : 103
for_iterator         : 103
for_statement        : 101
formal_parameter     : 136 137
formal_parameter_list : 134 137
formal_parameter_list_opt : 132
if_statement         : 97
inclusive_or_expression : 59 60
integral_type        : 6
invocation_expression : 18 93
iteration_statement  : 74
jump_statement       : 75
literal              : 17
local_variable_declaration : 81 104
method_body          : 131
method_declaration   : 129
method_header        : 131
multiplicative_expression : 41 42 43 44 45 46
namespace_body       : 117
namespace_declaration : 114
namespace_member_declaration : 119
namespace_member_declarations : 116
namespace_member_declarations_opt : 118
non_array_type       : 1
numeric_type         : 5
parenthesized_expression : 15
postfix_expression   : 30
pre_decrement_expression : 39 96
pre_increment_expression : 38 95
primary_expression   : 29
primary_expression_no_parenthesis : 16
primitive_type       : 4
relational_expression : 51 52 53 54 55
return_statement     : 110
selection_statement  : 73
shift_expression     : 48 49 50 51 52
simple_type          : 3 11
statement            : 79 80
statement_expression : 92 108 109
statement_expression_list : 105 107 109
statement_list       : 78 80
statement_list_opt   : 76
type                 : 82 130 132 138
type_declaration     : 120
unary_expression     : 31 32 33 34 36 37 40 41 42 43 64
unary_expression_not_plusminus : 35
variable_declarator  : 83 84
variable_declarators : 82 84 130
variable_initializer : 86 90 91
variable_initializer_list : 89 91
while_statement      : 100

Parsing method: LALR

state 0

    (0) S' -> . compilation_unit
    (114) compilation_unit -> . namespace_declaration
    (117) namespace_declaration -> . NAMESPACE IDENTIFIER namespace_body

    NAMESPACE       shift and go to state 3

    namespace_declaration          shift and go to state 1
    compilation_unit               shift and go to state 2

state 1

    (114) compilation_unit -> namespace_declaration .

    $end            reduce using rule 114 (compilation_unit -> namespace_declaration .)


state 2

    (0) S' -> compilation_unit .



state 3

    (117) namespace_declaration -> NAMESPACE . IDENTIFIER namespace_body

    IDENTIFIER      shift and go to state 4


state 4

    (117) namespace_declaration -> NAMESPACE IDENTIFIER . namespace_body
    (118) namespace_body -> . LBRACE namespace_member_declarations_opt RBRACE

    LBRACE          shift and go to state 6

    namespace_body                 shift and go to state 5

state 5

    (117) namespace_declaration -> NAMESPACE IDENTIFIER namespace_body .

    $end            reduce using rule 117 (namespace_declaration -> NAMESPACE IDENTIFIER namespace_body .)


state 6

    (118) namespace_body -> LBRACE . namespace_member_declarations_opt RBRACE
    (115) namespace_member_declarations_opt -> . empty
    (116) namespace_member_declarations_opt -> . namespace_member_declarations
    (140) empty -> .
    (119) namespace_member_declarations -> . namespace_member_declaration
    (120) namespace_member_declaration -> . type_declaration
    (121) type_declaration -> . class_declaration
    (122) class_declaration -> . CLASS IDENTIFIER class_body

    RBRACE          reduce using rule 140 (empty -> .)
    CLASS           shift and go to state 12

    namespace_member_declarations  shift and go to state 7
    namespace_member_declarations_opt shift and go to state 8
    namespace_member_declaration   shift and go to state 11
    class_declaration              shift and go to state 10
    empty                          shift and go to state 9
    type_declaration               shift and go to state 13

state 7

    (116) namespace_member_declarations_opt -> namespace_member_declarations .

    RBRACE          reduce using rule 116 (namespace_member_declarations_opt -> namespace_member_declarations .)


state 8

    (118) namespace_body -> LBRACE namespace_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 14


state 9

    (115) namespace_member_declarations_opt -> empty .

    RBRACE          reduce using rule 115 (namespace_member_declarations_opt -> empty .)


state 10

    (121) type_declaration -> class_declaration .

    RBRACE          reduce using rule 121 (type_declaration -> class_declaration .)


state 11

    (119) namespace_member_declarations -> namespace_member_declaration .

    RBRACE          reduce using rule 119 (namespace_member_declarations -> namespace_member_declaration .)


state 12

    (122) class_declaration -> CLASS . IDENTIFIER class_body

    IDENTIFIER      shift and go to state 15


state 13

    (120) namespace_member_declaration -> type_declaration .

    RBRACE          reduce using rule 120 (namespace_member_declaration -> type_declaration .)


state 14

    (118) namespace_body -> LBRACE namespace_member_declarations_opt RBRACE .

    $end            reduce using rule 118 (namespace_body -> LBRACE namespace_member_declarations_opt RBRACE .)


state 15

    (122) class_declaration -> CLASS IDENTIFIER . class_body
    (123) class_body -> . LBRACE class_member_declarations_opt RBRACE

    LBRACE          shift and go to state 16

    class_body                     shift and go to state 17

state 16

    (123) class_body -> LBRACE . class_member_declarations_opt RBRACE
    (124) class_member_declarations_opt -> . empty
    (125) class_member_declarations_opt -> . class_member_declarations
    (140) empty -> .
    (126) class_member_declarations -> . class_member_declaration
    (127) class_member_declarations -> . class_member_declarations class_member_declaration
    (128) class_member_declaration -> . field_declaration
    (129) class_member_declaration -> . method_declaration
    (130) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (131) method_declaration -> . method_header method_body
    (1) type -> . non_array_type
    (2) type -> . array_type
    (132) method_header -> . type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (4) simple_type -> . primitive_type
    (5) primitive_type -> . numeric_type
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT

    RBRACE          reduce using rule 140 (empty -> .)
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35

    integral_type                  shift and go to state 20
    numeric_type                   shift and go to state 33
    class_member_declarations      shift and go to state 18
    class_member_declaration       shift and go to state 29
    array_type                     shift and go to state 30
    type                           shift and go to state 19
    empty                          shift and go to state 23
    method_header                  shift and go to state 21
    method_declaration             shift and go to state 22
    field_declaration              shift and go to state 24
    simple_type                    shift and go to state 25
    non_array_type                 shift and go to state 26
    floating_point_type            shift and go to state 31
    class_member_declarations_opt  shift and go to state 34
    primitive_type                 shift and go to state 27

state 17

    (122) class_declaration -> CLASS IDENTIFIER class_body .

    RBRACE          reduce using rule 122 (class_declaration -> CLASS IDENTIFIER class_body .)


state 18

    (125) class_member_declarations_opt -> class_member_declarations .
    (127) class_member_declarations -> class_member_declarations . class_member_declaration
    (128) class_member_declaration -> . field_declaration
    (129) class_member_declaration -> . method_declaration
    (130) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (131) method_declaration -> . method_header method_body
    (1) type -> . non_array_type
    (2) type -> . array_type
    (132) method_header -> . type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (4) simple_type -> . primitive_type
    (5) primitive_type -> . numeric_type
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT

    RBRACE          reduce using rule 125 (class_member_declarations_opt -> class_member_declarations .)
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35

    numeric_type                   shift and go to state 33
    class_member_declaration       shift and go to state 36
    array_type                     shift and go to state 30
    type                           shift and go to state 19
    integral_type                  shift and go to state 20
    method_header                  shift and go to state 21
    method_declaration             shift and go to state 22
    field_declaration              shift and go to state 24
    simple_type                    shift and go to state 25
    non_array_type                 shift and go to state 26
    floating_point_type            shift and go to state 31
    primitive_type                 shift and go to state 27

state 19

    (130) field_declaration -> type . variable_declarators STMT_TERMINATOR
    (132) method_header -> type . IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
    (83) variable_declarators -> . variable_declarator
    (84) variable_declarators -> . variable_declarators COMMA variable_declarator
    (85) variable_declarator -> . IDENTIFIER
    (86) variable_declarator -> . IDENTIFIER EQUALS variable_initializer

    IDENTIFIER      shift and go to state 39

    variable_declarator            shift and go to state 37
    variable_declarators           shift and go to state 38

state 20

    (6) numeric_type -> integral_type .

    LBRACKET        reduce using rule 6 (numeric_type -> integral_type .)
    IDENTIFIER      reduce using rule 6 (numeric_type -> integral_type .)


state 21

    (131) method_declaration -> method_header . method_body
    (135) method_body -> . block
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE

    LBRACE          shift and go to state 41

    method_body                    shift and go to state 42
    block                          shift and go to state 40

state 22

    (129) class_member_declaration -> method_declaration .

    INT             reduce using rule 129 (class_member_declaration -> method_declaration .)
    CHAR            reduce using rule 129 (class_member_declaration -> method_declaration .)
    FLOAT           reduce using rule 129 (class_member_declaration -> method_declaration .)
    RBRACE          reduce using rule 129 (class_member_declaration -> method_declaration .)


state 23

    (124) class_member_declarations_opt -> empty .

    RBRACE          reduce using rule 124 (class_member_declarations_opt -> empty .)


state 24

    (128) class_member_declaration -> field_declaration .

    INT             reduce using rule 128 (class_member_declaration -> field_declaration .)
    CHAR            reduce using rule 128 (class_member_declaration -> field_declaration .)
    FLOAT           reduce using rule 128 (class_member_declaration -> field_declaration .)
    RBRACE          reduce using rule 128 (class_member_declaration -> field_declaration .)


state 25

    (3) non_array_type -> simple_type .
    (11) array_type -> simple_type . LBRACKET RBRACKET

    IDENTIFIER      reduce using rule 3 (non_array_type -> simple_type .)
    LBRACKET        shift and go to state 43


state 26

    (1) type -> non_array_type .

    IDENTIFIER      reduce using rule 1 (type -> non_array_type .)


state 27

    (4) simple_type -> primitive_type .

    LBRACKET        reduce using rule 4 (simple_type -> primitive_type .)
    IDENTIFIER      reduce using rule 4 (simple_type -> primitive_type .)


state 28

    (8) integral_type -> INT .

    LBRACKET        reduce using rule 8 (integral_type -> INT .)
    IDENTIFIER      reduce using rule 8 (integral_type -> INT .)


state 29

    (126) class_member_declarations -> class_member_declaration .

    INT             reduce using rule 126 (class_member_declarations -> class_member_declaration .)
    CHAR            reduce using rule 126 (class_member_declarations -> class_member_declaration .)
    FLOAT           reduce using rule 126 (class_member_declarations -> class_member_declaration .)
    RBRACE          reduce using rule 126 (class_member_declarations -> class_member_declaration .)


state 30

    (2) type -> array_type .

    IDENTIFIER      reduce using rule 2 (type -> array_type .)


state 31

    (7) numeric_type -> floating_point_type .

    LBRACKET        reduce using rule 7 (numeric_type -> floating_point_type .)
    IDENTIFIER      reduce using rule 7 (numeric_type -> floating_point_type .)


state 32

    (9) integral_type -> CHAR .

    LBRACKET        reduce using rule 9 (integral_type -> CHAR .)
    IDENTIFIER      reduce using rule 9 (integral_type -> CHAR .)


state 33

    (5) primitive_type -> numeric_type .

    LBRACKET        reduce using rule 5 (primitive_type -> numeric_type .)
    IDENTIFIER      reduce using rule 5 (primitive_type -> numeric_type .)


state 34

    (123) class_body -> LBRACE class_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 44


state 35

    (10) floating_point_type -> FLOAT .

    LBRACKET        reduce using rule 10 (floating_point_type -> FLOAT .)
    IDENTIFIER      reduce using rule 10 (floating_point_type -> FLOAT .)


state 36

    (127) class_member_declarations -> class_member_declarations class_member_declaration .

    INT             reduce using rule 127 (class_member_declarations -> class_member_declarations class_member_declaration .)
    CHAR            reduce using rule 127 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FLOAT           reduce using rule 127 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RBRACE          reduce using rule 127 (class_member_declarations -> class_member_declarations class_member_declaration .)


state 37

    (83) variable_declarators -> variable_declarator .

    STMT_TERMINATOR reduce using rule 83 (variable_declarators -> variable_declarator .)
    COMMA           reduce using rule 83 (variable_declarators -> variable_declarator .)


state 38

    (130) field_declaration -> type variable_declarators . STMT_TERMINATOR
    (84) variable_declarators -> variable_declarators . COMMA variable_declarator

    STMT_TERMINATOR shift and go to state 45
    COMMA           shift and go to state 46


state 39

    (132) method_header -> type IDENTIFIER . LPAREN formal_parameter_list_opt RPAREN
    (85) variable_declarator -> IDENTIFIER .
    (86) variable_declarator -> IDENTIFIER . EQUALS variable_initializer

    LPAREN          shift and go to state 47
    STMT_TERMINATOR reduce using rule 85 (variable_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 85 (variable_declarator -> IDENTIFIER .)
    EQUALS          shift and go to state 48


state 40

    (135) method_body -> block .

    INT             reduce using rule 135 (method_body -> block .)
    CHAR            reduce using rule 135 (method_body -> block .)
    FLOAT           reduce using rule 135 (method_body -> block .)
    RBRACE          reduce using rule 135 (method_body -> block .)


state 41

    (76) block -> LBRACE . begin_scope statement_list_opt RBRACE
    (139) begin_scope -> . empty
    (140) empty -> .

    LBRACE          reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    RETURN          reduce using rule 140 (empty -> .)
    IDENTIFIER      reduce using rule 140 (empty -> .)
    INCREMENT       reduce using rule 140 (empty -> .)
    DECREMENT       reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    LNOT            reduce using rule 140 (empty -> .)
    NOT             reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    LPAREN          reduce using rule 140 (empty -> .)
    INTCONST        reduce using rule 140 (empty -> .)
    STRCONST        reduce using rule 140 (empty -> .)
    CHCONST         reduce using rule 140 (empty -> .)
    RBRACE          reduce using rule 140 (empty -> .)

    begin_scope                    shift and go to state 49
    empty                          shift and go to state 50

state 42

    (131) method_declaration -> method_header method_body .

    INT             reduce using rule 131 (method_declaration -> method_header method_body .)
    CHAR            reduce using rule 131 (method_declaration -> method_header method_body .)
    FLOAT           reduce using rule 131 (method_declaration -> method_header method_body .)
    RBRACE          reduce using rule 131 (method_declaration -> method_header method_body .)


state 43

    (11) array_type -> simple_type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 51


state 44

    (123) class_body -> LBRACE class_member_declarations_opt RBRACE .

    RBRACE          reduce using rule 123 (class_body -> LBRACE class_member_declarations_opt RBRACE .)


state 45

    (130) field_declaration -> type variable_declarators STMT_TERMINATOR .

    INT             reduce using rule 130 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    CHAR            reduce using rule 130 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    FLOAT           reduce using rule 130 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    RBRACE          reduce using rule 130 (field_declaration -> type variable_declarators STMT_TERMINATOR .)


state 46

    (84) variable_declarators -> variable_declarators COMMA . variable_declarator
    (85) variable_declarator -> . IDENTIFIER
    (86) variable_declarator -> . IDENTIFIER EQUALS variable_initializer

    IDENTIFIER      shift and go to state 53

    variable_declarator            shift and go to state 52

state 47

    (132) method_header -> type IDENTIFIER LPAREN . formal_parameter_list_opt RPAREN
    (133) formal_parameter_list_opt -> . empty
    (134) formal_parameter_list_opt -> . formal_parameter_list
    (140) empty -> .
    (136) formal_parameter_list -> . formal_parameter
    (137) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (138) formal_parameter -> . type IDENTIFIER
    (1) type -> . non_array_type
    (2) type -> . array_type
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (4) simple_type -> . primitive_type
    (5) primitive_type -> . numeric_type
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT

    RPAREN          reduce using rule 140 (empty -> .)
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35

    non_array_type                 shift and go to state 26
    formal_parameter_list          shift and go to state 54
    array_type                     shift and go to state 30
    formal_parameter               shift and go to state 55
    empty                          shift and go to state 56
    formal_parameter_list_opt      shift and go to state 57
    type                           shift and go to state 58
    integral_type                  shift and go to state 20
    simple_type                    shift and go to state 25
    numeric_type                   shift and go to state 33
    floating_point_type            shift and go to state 31
    primitive_type                 shift and go to state 27

state 48

    (86) variable_declarator -> IDENTIFIER EQUALS . variable_initializer
    (87) variable_initializer -> . expression
    (88) variable_initializer -> . array_initializer
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (89) array_initializer -> . LBRACE variable_initializer_list RBRACE
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 62
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    array_initializer              shift and go to state 59
    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    postfix_expression             shift and go to state 83
    inclusive_or_expression        shift and go to state 68
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    variable_initializer           shift and go to state 88
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 78
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    pre_increment_expression       shift and go to state 74
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 49

    (76) block -> LBRACE begin_scope . statement_list_opt RBRACE
    (77) statement_list_opt -> . empty
    (78) statement_list_opt -> . statement_list
    (140) empty -> .
    (79) statement_list -> . statement
    (80) statement_list -> . statement_list statement
    (69) statement -> . declaration_statement
    (70) statement -> . embedded_statement
    (81) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (82) local_variable_declaration -> . type variable_declarators
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (1) type -> . non_array_type
    (2) type -> . array_type
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (4) simple_type -> . primitive_type
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (5) primitive_type -> . numeric_type
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (29) postfix_expression -> . primary_expression
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          reduce using rule 140 (empty -> .)
    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    local_variable_declaration     shift and go to state 98
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    integral_type                  shift and go to state 20
    expression_statement           shift and go to state 101
    non_array_type                 shift and go to state 26
    floating_point_type            shift and go to state 31
    unary_expression               shift and go to state 103
    declaration_statement          shift and go to state 104
    jump_statement                 shift and go to state 105
    embedded_statement             shift and go to state 106
    array_type                     shift and go to state 30
    if_statement                   shift and go to state 102
    for_statement                  shift and go to state 107
    parenthesized_expression       shift and go to state 76
    statement                      shift and go to state 109
    selection_statement            shift and go to state 110
    postfix_expression             shift and go to state 83
    primitive_type                 shift and go to state 27
    numeric_type                   shift and go to state 33
    assignment                     shift and go to state 111
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    type                           shift and go to state 115
    statement_list_opt             shift and go to state 116
    empty                          shift and go to state 118
    simple_type                    shift and go to state 25
    invocation_expression          shift and go to state 120
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    while_statement                shift and go to state 121
    return_statement               shift and go to state 122
    block                          shift and go to state 123
    statement_list                 shift and go to state 124

state 50

    (139) begin_scope -> empty .

    LBRACE          reduce using rule 139 (begin_scope -> empty .)
    IF              reduce using rule 139 (begin_scope -> empty .)
    WHILE           reduce using rule 139 (begin_scope -> empty .)
    FOR             reduce using rule 139 (begin_scope -> empty .)
    RETURN          reduce using rule 139 (begin_scope -> empty .)
    IDENTIFIER      reduce using rule 139 (begin_scope -> empty .)
    INCREMENT       reduce using rule 139 (begin_scope -> empty .)
    DECREMENT       reduce using rule 139 (begin_scope -> empty .)
    PLUS            reduce using rule 139 (begin_scope -> empty .)
    MINUS           reduce using rule 139 (begin_scope -> empty .)
    LNOT            reduce using rule 139 (begin_scope -> empty .)
    NOT             reduce using rule 139 (begin_scope -> empty .)
    INT             reduce using rule 139 (begin_scope -> empty .)
    CHAR            reduce using rule 139 (begin_scope -> empty .)
    FLOAT           reduce using rule 139 (begin_scope -> empty .)
    LPAREN          reduce using rule 139 (begin_scope -> empty .)
    INTCONST        reduce using rule 139 (begin_scope -> empty .)
    STRCONST        reduce using rule 139 (begin_scope -> empty .)
    CHCONST         reduce using rule 139 (begin_scope -> empty .)
    RBRACE          reduce using rule 139 (begin_scope -> empty .)


state 51

    (11) array_type -> simple_type LBRACKET RBRACKET .

    IDENTIFIER      reduce using rule 11 (array_type -> simple_type LBRACKET RBRACKET .)


state 52

    (84) variable_declarators -> variable_declarators COMMA variable_declarator .

    STMT_TERMINATOR reduce using rule 84 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    COMMA           reduce using rule 84 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 53

    (85) variable_declarator -> IDENTIFIER .
    (86) variable_declarator -> IDENTIFIER . EQUALS variable_initializer

    COMMA           reduce using rule 85 (variable_declarator -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 85 (variable_declarator -> IDENTIFIER .)
    EQUALS          shift and go to state 48


state 54

    (134) formal_parameter_list_opt -> formal_parameter_list .
    (137) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          reduce using rule 134 (formal_parameter_list_opt -> formal_parameter_list .)
    COMMA           shift and go to state 125


state 55

    (136) formal_parameter_list -> formal_parameter .

    COMMA           reduce using rule 136 (formal_parameter_list -> formal_parameter .)
    RPAREN          reduce using rule 136 (formal_parameter_list -> formal_parameter .)


state 56

    (133) formal_parameter_list_opt -> empty .

    RPAREN          reduce using rule 133 (formal_parameter_list_opt -> empty .)


state 57

    (132) method_header -> type IDENTIFIER LPAREN formal_parameter_list_opt . RPAREN

    RPAREN          shift and go to state 126


state 58

    (138) formal_parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 127


state 59

    (88) variable_initializer -> array_initializer .

    RBRACE          reduce using rule 88 (variable_initializer -> array_initializer .)
    COMMA           reduce using rule 88 (variable_initializer -> array_initializer .)
    STMT_TERMINATOR reduce using rule 88 (variable_initializer -> array_initializer .)


state 60

    (22) literal -> STRCONST .

    TIMES           reduce using rule 22 (literal -> STRCONST .)
    DIVIDE          reduce using rule 22 (literal -> STRCONST .)
    MOD             reduce using rule 22 (literal -> STRCONST .)
    PLUS            reduce using rule 22 (literal -> STRCONST .)
    MINUS           reduce using rule 22 (literal -> STRCONST .)
    LSHIFT          reduce using rule 22 (literal -> STRCONST .)
    RSHIFT          reduce using rule 22 (literal -> STRCONST .)
    LT              reduce using rule 22 (literal -> STRCONST .)
    GT              reduce using rule 22 (literal -> STRCONST .)
    EQ              reduce using rule 22 (literal -> STRCONST .)
    NE              reduce using rule 22 (literal -> STRCONST .)
    CAND            reduce using rule 22 (literal -> STRCONST .)
    COR             reduce using rule 22 (literal -> STRCONST .)
    STMT_TERMINATOR reduce using rule 22 (literal -> STRCONST .)
    COMMA           reduce using rule 22 (literal -> STRCONST .)
    RBRACE          reduce using rule 22 (literal -> STRCONST .)
    RPAREN          reduce using rule 22 (literal -> STRCONST .)
    RBRACKET        reduce using rule 22 (literal -> STRCONST .)
    EQUALS          reduce using rule 22 (literal -> STRCONST .)


state 61

    (66) expression -> conditional_expression .

    RPAREN          reduce using rule 66 (expression -> conditional_expression .)
    COMMA           reduce using rule 66 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 66 (expression -> conditional_expression .)
    STMT_TERMINATOR reduce using rule 66 (expression -> conditional_expression .)
    RBRACE          reduce using rule 66 (expression -> conditional_expression .)


state 62

    (89) array_initializer -> LBRACE . variable_initializer_list RBRACE
    (90) variable_initializer_list -> . variable_initializer
    (91) variable_initializer_list -> . variable_initializer_list COMMA variable_initializer
    (87) variable_initializer -> . expression
    (88) variable_initializer -> . array_initializer
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (89) array_initializer -> . LBRACE variable_initializer_list RBRACE
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 62
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    array_initializer              shift and go to state 59
    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    variable_initializer_list      shift and go to state 128
    postfix_expression             shift and go to state 83
    inclusive_or_expression        shift and go to state 68
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    variable_initializer           shift and go to state 129
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 78
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    pre_increment_expression       shift and go to state 74
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 63

    (35) unary_expression -> unary_expression_not_plusminus .

    TIMES           reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    DIVIDE          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    MOD             reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    PLUS            reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    MINUS           reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    LSHIFT          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    RSHIFT          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    LT              reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    GT              reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    EQ              reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    NE              reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    CAND            reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    COR             reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    STMT_TERMINATOR reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    COMMA           reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    RBRACE          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    RPAREN          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    RBRACKET        reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)
    EQUALS          reduce using rule 35 (unary_expression -> unary_expression_not_plusminus .)


state 64

    (21) literal -> INTCONST .

    TIMES           reduce using rule 21 (literal -> INTCONST .)
    DIVIDE          reduce using rule 21 (literal -> INTCONST .)
    MOD             reduce using rule 21 (literal -> INTCONST .)
    PLUS            reduce using rule 21 (literal -> INTCONST .)
    MINUS           reduce using rule 21 (literal -> INTCONST .)
    LSHIFT          reduce using rule 21 (literal -> INTCONST .)
    RSHIFT          reduce using rule 21 (literal -> INTCONST .)
    LT              reduce using rule 21 (literal -> INTCONST .)
    GT              reduce using rule 21 (literal -> INTCONST .)
    EQ              reduce using rule 21 (literal -> INTCONST .)
    NE              reduce using rule 21 (literal -> INTCONST .)
    CAND            reduce using rule 21 (literal -> INTCONST .)
    COR             reduce using rule 21 (literal -> INTCONST .)
    STMT_TERMINATOR reduce using rule 21 (literal -> INTCONST .)
    COMMA           reduce using rule 21 (literal -> INTCONST .)
    RBRACE          reduce using rule 21 (literal -> INTCONST .)
    RPAREN          reduce using rule 21 (literal -> INTCONST .)
    RBRACKET        reduce using rule 21 (literal -> INTCONST .)
    EQUALS          reduce using rule 21 (literal -> INTCONST .)


state 65

    (64) assignment -> unary_expression . assignment_operator expression
    (40) multiplicative_expression -> unary_expression .
    (65) assignment_operator -> . EQUALS

    TIMES           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 40 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 40 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    CAND            reduce using rule 40 (multiplicative_expression -> unary_expression .)
    COR             reduce using rule 40 (multiplicative_expression -> unary_expression .)
    STMT_TERMINATOR reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    EQUALS          shift and go to state 130

    assignment_operator            shift and go to state 131

state 66

    (31) unary_expression_not_plusminus -> LNOT . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 132
    parenthesized_expression       shift and go to state 76

state 67

    (50) relational_expression -> shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 50 (relational_expression -> shift_expression .)
    GT              reduce using rule 50 (relational_expression -> shift_expression .)
    EQ              reduce using rule 50 (relational_expression -> shift_expression .)
    NE              reduce using rule 50 (relational_expression -> shift_expression .)
    CAND            reduce using rule 50 (relational_expression -> shift_expression .)
    COR             reduce using rule 50 (relational_expression -> shift_expression .)
    STMT_TERMINATOR reduce using rule 50 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 50 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 50 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 50 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 50 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 133
    RSHIFT          shift and go to state 134


state 68

    (59) conditional_and_expression -> inclusive_or_expression .

    CAND            reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    COR             reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 59 (conditional_and_expression -> inclusive_or_expression .)


state 69

    (17) primary_expression_no_parenthesis -> literal .

    TIMES           reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    DIVIDE          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    MOD             reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    PLUS            reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    MINUS           reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    LSHIFT          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    RSHIFT          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    LT              reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    GT              reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    EQ              reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    NE              reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    CAND            reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    COR             reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    STMT_TERMINATOR reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    COMMA           reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    RBRACE          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    RPAREN          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    RBRACKET        reduce using rule 17 (primary_expression_no_parenthesis -> literal .)
    EQUALS          reduce using rule 17 (primary_expression_no_parenthesis -> literal .)


state 70

    (20) primary_expression_no_parenthesis -> IDENTIFIER .
    (25) invocation_expression -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (28) element_access -> IDENTIFIER . LBRACKET expression RBRACKET

    TIMES           reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    DIVIDE          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    MOD             reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    PLUS            reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    MINUS           reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    LSHIFT          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    RSHIFT          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    LT              reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    GT              reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    EQ              reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    NE              reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    CAND            reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    COR             reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    COMMA           reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    RBRACE          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    RPAREN          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    RBRACKET        reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    EQUALS          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    LPAREN          shift and go to state 136
    LBRACKET        shift and go to state 135


state 71

    (61) conditional_or_expression -> conditional_and_expression .
    (60) conditional_and_expression -> conditional_and_expression . CAND inclusive_or_expression

    COR             reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    RBRACE          reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    STMT_TERMINATOR reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    RBRACKET        reduce using rule 61 (conditional_or_expression -> conditional_and_expression .)
    CAND            shift and go to state 137


state 72

    (34) pre_decrement_expression -> DECREMENT . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 138
    parenthesized_expression       shift and go to state 76

state 73

    (33) pre_increment_expression -> INCREMENT . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 139
    parenthesized_expression       shift and go to state 76

state 74

    (38) unary_expression -> pre_increment_expression .

    TIMES           reduce using rule 38 (unary_expression -> pre_increment_expression .)
    DIVIDE          reduce using rule 38 (unary_expression -> pre_increment_expression .)
    MOD             reduce using rule 38 (unary_expression -> pre_increment_expression .)
    PLUS            reduce using rule 38 (unary_expression -> pre_increment_expression .)
    MINUS           reduce using rule 38 (unary_expression -> pre_increment_expression .)
    LSHIFT          reduce using rule 38 (unary_expression -> pre_increment_expression .)
    RSHIFT          reduce using rule 38 (unary_expression -> pre_increment_expression .)
    LT              reduce using rule 38 (unary_expression -> pre_increment_expression .)
    GT              reduce using rule 38 (unary_expression -> pre_increment_expression .)
    EQ              reduce using rule 38 (unary_expression -> pre_increment_expression .)
    NE              reduce using rule 38 (unary_expression -> pre_increment_expression .)
    CAND            reduce using rule 38 (unary_expression -> pre_increment_expression .)
    COR             reduce using rule 38 (unary_expression -> pre_increment_expression .)
    STMT_TERMINATOR reduce using rule 38 (unary_expression -> pre_increment_expression .)
    COMMA           reduce using rule 38 (unary_expression -> pre_increment_expression .)
    RBRACE          reduce using rule 38 (unary_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 38 (unary_expression -> pre_increment_expression .)
    RBRACKET        reduce using rule 38 (unary_expression -> pre_increment_expression .)
    EQUALS          reduce using rule 38 (unary_expression -> pre_increment_expression .)


state 75

    (24) parenthesized_expression -> LPAREN . expression RPAREN
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 140
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 76

    (15) primary_expression -> parenthesized_expression .

    TIMES           reduce using rule 15 (primary_expression -> parenthesized_expression .)
    DIVIDE          reduce using rule 15 (primary_expression -> parenthesized_expression .)
    MOD             reduce using rule 15 (primary_expression -> parenthesized_expression .)
    PLUS            reduce using rule 15 (primary_expression -> parenthesized_expression .)
    MINUS           reduce using rule 15 (primary_expression -> parenthesized_expression .)
    LSHIFT          reduce using rule 15 (primary_expression -> parenthesized_expression .)
    RSHIFT          reduce using rule 15 (primary_expression -> parenthesized_expression .)
    LT              reduce using rule 15 (primary_expression -> parenthesized_expression .)
    GT              reduce using rule 15 (primary_expression -> parenthesized_expression .)
    EQ              reduce using rule 15 (primary_expression -> parenthesized_expression .)
    NE              reduce using rule 15 (primary_expression -> parenthesized_expression .)
    CAND            reduce using rule 15 (primary_expression -> parenthesized_expression .)
    COR             reduce using rule 15 (primary_expression -> parenthesized_expression .)
    STMT_TERMINATOR reduce using rule 15 (primary_expression -> parenthesized_expression .)
    COMMA           reduce using rule 15 (primary_expression -> parenthesized_expression .)
    RBRACE          reduce using rule 15 (primary_expression -> parenthesized_expression .)
    RPAREN          reduce using rule 15 (primary_expression -> parenthesized_expression .)
    RBRACKET        reduce using rule 15 (primary_expression -> parenthesized_expression .)
    EQUALS          reduce using rule 15 (primary_expression -> parenthesized_expression .)


state 77

    (67) expression -> assignment .

    RPAREN          reduce using rule 67 (expression -> assignment .)
    COMMA           reduce using rule 67 (expression -> assignment .)
    RBRACKET        reduce using rule 67 (expression -> assignment .)
    STMT_TERMINATOR reduce using rule 67 (expression -> assignment .)
    RBRACE          reduce using rule 67 (expression -> assignment .)


state 78

    (87) variable_initializer -> expression .

    RBRACE          reduce using rule 87 (variable_initializer -> expression .)
    COMMA           reduce using rule 87 (variable_initializer -> expression .)
    STMT_TERMINATOR reduce using rule 87 (variable_initializer -> expression .)


state 79

    (32) unary_expression_not_plusminus -> NOT . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 141
    parenthesized_expression       shift and go to state 76

state 80

    (53) equality_expression -> relational_expression .
    (51) relational_expression -> relational_expression . LT shift_expression
    (52) relational_expression -> relational_expression . GT shift_expression

    EQ              reduce using rule 53 (equality_expression -> relational_expression .)
    NE              reduce using rule 53 (equality_expression -> relational_expression .)
    CAND            reduce using rule 53 (equality_expression -> relational_expression .)
    COR             reduce using rule 53 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 53 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 53 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 53 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 53 (equality_expression -> relational_expression .)
    STMT_TERMINATOR reduce using rule 53 (equality_expression -> relational_expression .)
    LT              shift and go to state 142
    GT              shift and go to state 143


state 81

    (58) inclusive_or_expression -> exclusive_or_expression .

    CAND            reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    COR             reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)


state 82

    (39) unary_expression -> pre_decrement_expression .

    TIMES           reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    DIVIDE          reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    MOD             reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    PLUS            reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    MINUS           reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    LSHIFT          reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    RSHIFT          reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    LT              reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    GT              reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    EQ              reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    NE              reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    CAND            reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    COR             reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    STMT_TERMINATOR reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    COMMA           reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    RBRACE          reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    RBRACKET        reduce using rule 39 (unary_expression -> pre_decrement_expression .)
    EQUALS          reduce using rule 39 (unary_expression -> pre_decrement_expression .)


state 83

    (30) unary_expression_not_plusminus -> postfix_expression .

    TIMES           reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    DIVIDE          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    MOD             reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    PLUS            reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    MINUS           reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    LSHIFT          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    RSHIFT          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    LT              reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    GT              reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    EQ              reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    NE              reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    CAND            reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    COR             reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    STMT_TERMINATOR reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    COMMA           reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    RBRACE          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    RPAREN          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    RBRACKET        reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)
    EQUALS          reduce using rule 30 (unary_expression_not_plusminus -> postfix_expression .)


state 84

    (23) literal -> CHCONST .

    TIMES           reduce using rule 23 (literal -> CHCONST .)
    DIVIDE          reduce using rule 23 (literal -> CHCONST .)
    MOD             reduce using rule 23 (literal -> CHCONST .)
    PLUS            reduce using rule 23 (literal -> CHCONST .)
    MINUS           reduce using rule 23 (literal -> CHCONST .)
    LSHIFT          reduce using rule 23 (literal -> CHCONST .)
    RSHIFT          reduce using rule 23 (literal -> CHCONST .)
    LT              reduce using rule 23 (literal -> CHCONST .)
    GT              reduce using rule 23 (literal -> CHCONST .)
    EQ              reduce using rule 23 (literal -> CHCONST .)
    NE              reduce using rule 23 (literal -> CHCONST .)
    CAND            reduce using rule 23 (literal -> CHCONST .)
    COR             reduce using rule 23 (literal -> CHCONST .)
    STMT_TERMINATOR reduce using rule 23 (literal -> CHCONST .)
    COMMA           reduce using rule 23 (literal -> CHCONST .)
    RBRACE          reduce using rule 23 (literal -> CHCONST .)
    RPAREN          reduce using rule 23 (literal -> CHCONST .)
    RBRACKET        reduce using rule 23 (literal -> CHCONST .)
    EQUALS          reduce using rule 23 (literal -> CHCONST .)


state 85

    (63) conditional_expression -> conditional_or_expression .
    (62) conditional_or_expression -> conditional_or_expression . COR conditional_and_expression

    RPAREN          reduce using rule 63 (conditional_expression -> conditional_or_expression .)
    RBRACKET        reduce using rule 63 (conditional_expression -> conditional_or_expression .)
    COMMA           reduce using rule 63 (conditional_expression -> conditional_or_expression .)
    STMT_TERMINATOR reduce using rule 63 (conditional_expression -> conditional_or_expression .)
    RBRACE          reduce using rule 63 (conditional_expression -> conditional_or_expression .)
    COR             shift and go to state 144


state 86

    (16) primary_expression -> primary_expression_no_parenthesis .

    TIMES           reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    DIVIDE          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    MOD             reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    PLUS            reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    MINUS           reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    LSHIFT          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    RSHIFT          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    LT              reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    GT              reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    EQ              reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    NE              reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    CAND            reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    COR             reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    STMT_TERMINATOR reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    COMMA           reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    RBRACE          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    RPAREN          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    RBRACKET        reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)
    EQUALS          reduce using rule 16 (primary_expression -> primary_expression_no_parenthesis .)


state 87

    (36) unary_expression -> PLUS . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 145
    parenthesized_expression       shift and go to state 76

state 88

    (86) variable_declarator -> IDENTIFIER EQUALS variable_initializer .

    COMMA           reduce using rule 86 (variable_declarator -> IDENTIFIER EQUALS variable_initializer .)
    STMT_TERMINATOR reduce using rule 86 (variable_declarator -> IDENTIFIER EQUALS variable_initializer .)


state 89

    (29) postfix_expression -> primary_expression .

    TIMES           reduce using rule 29 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 29 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 29 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 29 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 29 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 29 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 29 (postfix_expression -> primary_expression .)
    LT              reduce using rule 29 (postfix_expression -> primary_expression .)
    GT              reduce using rule 29 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 29 (postfix_expression -> primary_expression .)
    NE              reduce using rule 29 (postfix_expression -> primary_expression .)
    CAND            reduce using rule 29 (postfix_expression -> primary_expression .)
    COR             reduce using rule 29 (postfix_expression -> primary_expression .)
    STMT_TERMINATOR reduce using rule 29 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 29 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 29 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 29 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 29 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 29 (postfix_expression -> primary_expression .)


state 90

    (18) primary_expression_no_parenthesis -> invocation_expression .

    TIMES           reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    DIVIDE          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    MOD             reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    PLUS            reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    MINUS           reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    LSHIFT          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    RSHIFT          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    LT              reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    GT              reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    EQ              reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    NE              reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    CAND            reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    COR             reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    STMT_TERMINATOR reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    COMMA           reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    RBRACE          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    RPAREN          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    RBRACKET        reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)
    EQUALS          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)


state 91

    (57) exclusive_or_expression -> and_expression .

    CAND            reduce using rule 57 (exclusive_or_expression -> and_expression .)
    COR             reduce using rule 57 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 57 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 57 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 57 (exclusive_or_expression -> and_expression .)
    STMT_TERMINATOR reduce using rule 57 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 57 (exclusive_or_expression -> and_expression .)


state 92

    (19) primary_expression_no_parenthesis -> element_access .

    TIMES           reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    DIVIDE          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    MOD             reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    PLUS            reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    MINUS           reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    LSHIFT          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    RSHIFT          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    LT              reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    GT              reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    EQ              reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    NE              reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    CAND            reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    COR             reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    STMT_TERMINATOR reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    COMMA           reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    RBRACE          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    RPAREN          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    RBRACKET        reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)
    EQUALS          reduce using rule 19 (primary_expression_no_parenthesis -> element_access .)


state 93

    (37) unary_expression -> MINUS . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 146
    parenthesized_expression       shift and go to state 76

state 94

    (47) shift_expression -> additive_expression .
    (45) additive_expression -> additive_expression . PLUS multiplicative_expression
    (46) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    LT              reduce using rule 47 (shift_expression -> additive_expression .)
    GT              reduce using rule 47 (shift_expression -> additive_expression .)
    EQ              reduce using rule 47 (shift_expression -> additive_expression .)
    NE              reduce using rule 47 (shift_expression -> additive_expression .)
    CAND            reduce using rule 47 (shift_expression -> additive_expression .)
    COR             reduce using rule 47 (shift_expression -> additive_expression .)
    STMT_TERMINATOR reduce using rule 47 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 47 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 47 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 147
    MINUS           shift and go to state 148


state 95

    (56) and_expression -> equality_expression .
    (54) equality_expression -> equality_expression . EQ relational_expression
    (55) equality_expression -> equality_expression . NE relational_expression

    CAND            reduce using rule 56 (and_expression -> equality_expression .)
    COR             reduce using rule 56 (and_expression -> equality_expression .)
    STMT_TERMINATOR reduce using rule 56 (and_expression -> equality_expression .)
    COMMA           reduce using rule 56 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 56 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 56 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 56 (and_expression -> equality_expression .)
    EQ              shift and go to state 150
    NE              shift and go to state 149


state 96

    (44) additive_expression -> multiplicative_expression .
    (41) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (42) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (43) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 44 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 44 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 44 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 44 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 44 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 44 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 44 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 44 (additive_expression -> multiplicative_expression .)
    CAND            reduce using rule 44 (additive_expression -> multiplicative_expression .)
    COR             reduce using rule 44 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 44 (additive_expression -> multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 44 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 44 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 44 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 44 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 152


state 97

    (111) return_statement -> RETURN . expression_opt STMT_TERMINATOR
    (112) expression_opt -> . empty
    (113) expression_opt -> . expression
    (140) empty -> .
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    STMT_TERMINATOR reduce using rule 140 (empty -> .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    expression_opt                 shift and go to state 154
    conditional_expression         shift and go to state 61
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    primary_expression_no_parenthesis shift and go to state 86
    empty                          shift and go to state 155
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 156
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 98

    (81) declaration_statement -> local_variable_declaration . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 157


state 99

    (102) while_statement -> WHILE . LPAREN boolean_expression RPAREN embedded_statement

    LPAREN          shift and go to state 158


state 100

    (74) embedded_statement -> iteration_statement .

    LBRACE          reduce using rule 74 (embedded_statement -> iteration_statement .)
    IF              reduce using rule 74 (embedded_statement -> iteration_statement .)
    WHILE           reduce using rule 74 (embedded_statement -> iteration_statement .)
    FOR             reduce using rule 74 (embedded_statement -> iteration_statement .)
    RETURN          reduce using rule 74 (embedded_statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 74 (embedded_statement -> iteration_statement .)
    INCREMENT       reduce using rule 74 (embedded_statement -> iteration_statement .)
    DECREMENT       reduce using rule 74 (embedded_statement -> iteration_statement .)
    PLUS            reduce using rule 74 (embedded_statement -> iteration_statement .)
    MINUS           reduce using rule 74 (embedded_statement -> iteration_statement .)
    LNOT            reduce using rule 74 (embedded_statement -> iteration_statement .)
    NOT             reduce using rule 74 (embedded_statement -> iteration_statement .)
    INT             reduce using rule 74 (embedded_statement -> iteration_statement .)
    CHAR            reduce using rule 74 (embedded_statement -> iteration_statement .)
    FLOAT           reduce using rule 74 (embedded_statement -> iteration_statement .)
    LPAREN          reduce using rule 74 (embedded_statement -> iteration_statement .)
    INTCONST        reduce using rule 74 (embedded_statement -> iteration_statement .)
    STRCONST        reduce using rule 74 (embedded_statement -> iteration_statement .)
    CHCONST         reduce using rule 74 (embedded_statement -> iteration_statement .)
    RBRACE          reduce using rule 74 (embedded_statement -> iteration_statement .)
    ELSE            reduce using rule 74 (embedded_statement -> iteration_statement .)


state 101

    (72) embedded_statement -> expression_statement .

    LBRACE          reduce using rule 72 (embedded_statement -> expression_statement .)
    IF              reduce using rule 72 (embedded_statement -> expression_statement .)
    WHILE           reduce using rule 72 (embedded_statement -> expression_statement .)
    FOR             reduce using rule 72 (embedded_statement -> expression_statement .)
    RETURN          reduce using rule 72 (embedded_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 72 (embedded_statement -> expression_statement .)
    INCREMENT       reduce using rule 72 (embedded_statement -> expression_statement .)
    DECREMENT       reduce using rule 72 (embedded_statement -> expression_statement .)
    PLUS            reduce using rule 72 (embedded_statement -> expression_statement .)
    MINUS           reduce using rule 72 (embedded_statement -> expression_statement .)
    LNOT            reduce using rule 72 (embedded_statement -> expression_statement .)
    NOT             reduce using rule 72 (embedded_statement -> expression_statement .)
    INT             reduce using rule 72 (embedded_statement -> expression_statement .)
    CHAR            reduce using rule 72 (embedded_statement -> expression_statement .)
    FLOAT           reduce using rule 72 (embedded_statement -> expression_statement .)
    LPAREN          reduce using rule 72 (embedded_statement -> expression_statement .)
    INTCONST        reduce using rule 72 (embedded_statement -> expression_statement .)
    STRCONST        reduce using rule 72 (embedded_statement -> expression_statement .)
    CHCONST         reduce using rule 72 (embedded_statement -> expression_statement .)
    RBRACE          reduce using rule 72 (embedded_statement -> expression_statement .)
    ELSE            reduce using rule 72 (embedded_statement -> expression_statement .)


state 102

    (97) selection_statement -> if_statement .

    LBRACE          reduce using rule 97 (selection_statement -> if_statement .)
    IF              reduce using rule 97 (selection_statement -> if_statement .)
    WHILE           reduce using rule 97 (selection_statement -> if_statement .)
    FOR             reduce using rule 97 (selection_statement -> if_statement .)
    RETURN          reduce using rule 97 (selection_statement -> if_statement .)
    IDENTIFIER      reduce using rule 97 (selection_statement -> if_statement .)
    INCREMENT       reduce using rule 97 (selection_statement -> if_statement .)
    DECREMENT       reduce using rule 97 (selection_statement -> if_statement .)
    PLUS            reduce using rule 97 (selection_statement -> if_statement .)
    MINUS           reduce using rule 97 (selection_statement -> if_statement .)
    LNOT            reduce using rule 97 (selection_statement -> if_statement .)
    NOT             reduce using rule 97 (selection_statement -> if_statement .)
    INT             reduce using rule 97 (selection_statement -> if_statement .)
    CHAR            reduce using rule 97 (selection_statement -> if_statement .)
    FLOAT           reduce using rule 97 (selection_statement -> if_statement .)
    LPAREN          reduce using rule 97 (selection_statement -> if_statement .)
    INTCONST        reduce using rule 97 (selection_statement -> if_statement .)
    STRCONST        reduce using rule 97 (selection_statement -> if_statement .)
    CHCONST         reduce using rule 97 (selection_statement -> if_statement .)
    RBRACE          reduce using rule 97 (selection_statement -> if_statement .)
    ELSE            reduce using rule 97 (selection_statement -> if_statement .)


state 103

    (64) assignment -> unary_expression . assignment_operator expression
    (65) assignment_operator -> . EQUALS

    EQUALS          shift and go to state 130

    assignment_operator            shift and go to state 131

state 104

    (69) statement -> declaration_statement .

    LBRACE          reduce using rule 69 (statement -> declaration_statement .)
    IF              reduce using rule 69 (statement -> declaration_statement .)
    WHILE           reduce using rule 69 (statement -> declaration_statement .)
    FOR             reduce using rule 69 (statement -> declaration_statement .)
    RETURN          reduce using rule 69 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 69 (statement -> declaration_statement .)
    INCREMENT       reduce using rule 69 (statement -> declaration_statement .)
    DECREMENT       reduce using rule 69 (statement -> declaration_statement .)
    PLUS            reduce using rule 69 (statement -> declaration_statement .)
    MINUS           reduce using rule 69 (statement -> declaration_statement .)
    LNOT            reduce using rule 69 (statement -> declaration_statement .)
    NOT             reduce using rule 69 (statement -> declaration_statement .)
    INT             reduce using rule 69 (statement -> declaration_statement .)
    CHAR            reduce using rule 69 (statement -> declaration_statement .)
    FLOAT           reduce using rule 69 (statement -> declaration_statement .)
    LPAREN          reduce using rule 69 (statement -> declaration_statement .)
    INTCONST        reduce using rule 69 (statement -> declaration_statement .)
    STRCONST        reduce using rule 69 (statement -> declaration_statement .)
    CHCONST         reduce using rule 69 (statement -> declaration_statement .)
    RBRACE          reduce using rule 69 (statement -> declaration_statement .)


state 105

    (75) embedded_statement -> jump_statement .

    LBRACE          reduce using rule 75 (embedded_statement -> jump_statement .)
    IF              reduce using rule 75 (embedded_statement -> jump_statement .)
    WHILE           reduce using rule 75 (embedded_statement -> jump_statement .)
    FOR             reduce using rule 75 (embedded_statement -> jump_statement .)
    RETURN          reduce using rule 75 (embedded_statement -> jump_statement .)
    IDENTIFIER      reduce using rule 75 (embedded_statement -> jump_statement .)
    INCREMENT       reduce using rule 75 (embedded_statement -> jump_statement .)
    DECREMENT       reduce using rule 75 (embedded_statement -> jump_statement .)
    PLUS            reduce using rule 75 (embedded_statement -> jump_statement .)
    MINUS           reduce using rule 75 (embedded_statement -> jump_statement .)
    LNOT            reduce using rule 75 (embedded_statement -> jump_statement .)
    NOT             reduce using rule 75 (embedded_statement -> jump_statement .)
    INT             reduce using rule 75 (embedded_statement -> jump_statement .)
    CHAR            reduce using rule 75 (embedded_statement -> jump_statement .)
    FLOAT           reduce using rule 75 (embedded_statement -> jump_statement .)
    LPAREN          reduce using rule 75 (embedded_statement -> jump_statement .)
    INTCONST        reduce using rule 75 (embedded_statement -> jump_statement .)
    STRCONST        reduce using rule 75 (embedded_statement -> jump_statement .)
    CHCONST         reduce using rule 75 (embedded_statement -> jump_statement .)
    RBRACE          reduce using rule 75 (embedded_statement -> jump_statement .)
    ELSE            reduce using rule 75 (embedded_statement -> jump_statement .)


state 106

    (70) statement -> embedded_statement .

    LBRACE          reduce using rule 70 (statement -> embedded_statement .)
    IF              reduce using rule 70 (statement -> embedded_statement .)
    WHILE           reduce using rule 70 (statement -> embedded_statement .)
    FOR             reduce using rule 70 (statement -> embedded_statement .)
    RETURN          reduce using rule 70 (statement -> embedded_statement .)
    IDENTIFIER      reduce using rule 70 (statement -> embedded_statement .)
    INCREMENT       reduce using rule 70 (statement -> embedded_statement .)
    DECREMENT       reduce using rule 70 (statement -> embedded_statement .)
    PLUS            reduce using rule 70 (statement -> embedded_statement .)
    MINUS           reduce using rule 70 (statement -> embedded_statement .)
    LNOT            reduce using rule 70 (statement -> embedded_statement .)
    NOT             reduce using rule 70 (statement -> embedded_statement .)
    INT             reduce using rule 70 (statement -> embedded_statement .)
    CHAR            reduce using rule 70 (statement -> embedded_statement .)
    FLOAT           reduce using rule 70 (statement -> embedded_statement .)
    LPAREN          reduce using rule 70 (statement -> embedded_statement .)
    INTCONST        reduce using rule 70 (statement -> embedded_statement .)
    STRCONST        reduce using rule 70 (statement -> embedded_statement .)
    CHCONST         reduce using rule 70 (statement -> embedded_statement .)
    RBRACE          reduce using rule 70 (statement -> embedded_statement .)


state 107

    (101) iteration_statement -> for_statement .

    LBRACE          reduce using rule 101 (iteration_statement -> for_statement .)
    IF              reduce using rule 101 (iteration_statement -> for_statement .)
    WHILE           reduce using rule 101 (iteration_statement -> for_statement .)
    FOR             reduce using rule 101 (iteration_statement -> for_statement .)
    RETURN          reduce using rule 101 (iteration_statement -> for_statement .)
    IDENTIFIER      reduce using rule 101 (iteration_statement -> for_statement .)
    INCREMENT       reduce using rule 101 (iteration_statement -> for_statement .)
    DECREMENT       reduce using rule 101 (iteration_statement -> for_statement .)
    PLUS            reduce using rule 101 (iteration_statement -> for_statement .)
    MINUS           reduce using rule 101 (iteration_statement -> for_statement .)
    LNOT            reduce using rule 101 (iteration_statement -> for_statement .)
    NOT             reduce using rule 101 (iteration_statement -> for_statement .)
    INT             reduce using rule 101 (iteration_statement -> for_statement .)
    CHAR            reduce using rule 101 (iteration_statement -> for_statement .)
    FLOAT           reduce using rule 101 (iteration_statement -> for_statement .)
    LPAREN          reduce using rule 101 (iteration_statement -> for_statement .)
    INTCONST        reduce using rule 101 (iteration_statement -> for_statement .)
    STRCONST        reduce using rule 101 (iteration_statement -> for_statement .)
    CHCONST         reduce using rule 101 (iteration_statement -> for_statement .)
    RBRACE          reduce using rule 101 (iteration_statement -> for_statement .)
    ELSE            reduce using rule 101 (iteration_statement -> for_statement .)


state 108

    (25) invocation_expression -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (20) primary_expression_no_parenthesis -> IDENTIFIER .
    (28) element_access -> IDENTIFIER . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 136
    EQUALS          reduce using rule 20 (primary_expression_no_parenthesis -> IDENTIFIER .)
    LBRACKET        shift and go to state 135


state 109

    (79) statement_list -> statement .

    LBRACE          reduce using rule 79 (statement_list -> statement .)
    IF              reduce using rule 79 (statement_list -> statement .)
    WHILE           reduce using rule 79 (statement_list -> statement .)
    FOR             reduce using rule 79 (statement_list -> statement .)
    RETURN          reduce using rule 79 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 79 (statement_list -> statement .)
    INCREMENT       reduce using rule 79 (statement_list -> statement .)
    DECREMENT       reduce using rule 79 (statement_list -> statement .)
    PLUS            reduce using rule 79 (statement_list -> statement .)
    MINUS           reduce using rule 79 (statement_list -> statement .)
    LNOT            reduce using rule 79 (statement_list -> statement .)
    NOT             reduce using rule 79 (statement_list -> statement .)
    INT             reduce using rule 79 (statement_list -> statement .)
    CHAR            reduce using rule 79 (statement_list -> statement .)
    FLOAT           reduce using rule 79 (statement_list -> statement .)
    LPAREN          reduce using rule 79 (statement_list -> statement .)
    INTCONST        reduce using rule 79 (statement_list -> statement .)
    STRCONST        reduce using rule 79 (statement_list -> statement .)
    CHCONST         reduce using rule 79 (statement_list -> statement .)
    RBRACE          reduce using rule 79 (statement_list -> statement .)


state 110

    (73) embedded_statement -> selection_statement .

    LBRACE          reduce using rule 73 (embedded_statement -> selection_statement .)
    IF              reduce using rule 73 (embedded_statement -> selection_statement .)
    WHILE           reduce using rule 73 (embedded_statement -> selection_statement .)
    FOR             reduce using rule 73 (embedded_statement -> selection_statement .)
    RETURN          reduce using rule 73 (embedded_statement -> selection_statement .)
    IDENTIFIER      reduce using rule 73 (embedded_statement -> selection_statement .)
    INCREMENT       reduce using rule 73 (embedded_statement -> selection_statement .)
    DECREMENT       reduce using rule 73 (embedded_statement -> selection_statement .)
    PLUS            reduce using rule 73 (embedded_statement -> selection_statement .)
    MINUS           reduce using rule 73 (embedded_statement -> selection_statement .)
    LNOT            reduce using rule 73 (embedded_statement -> selection_statement .)
    NOT             reduce using rule 73 (embedded_statement -> selection_statement .)
    INT             reduce using rule 73 (embedded_statement -> selection_statement .)
    CHAR            reduce using rule 73 (embedded_statement -> selection_statement .)
    FLOAT           reduce using rule 73 (embedded_statement -> selection_statement .)
    LPAREN          reduce using rule 73 (embedded_statement -> selection_statement .)
    INTCONST        reduce using rule 73 (embedded_statement -> selection_statement .)
    STRCONST        reduce using rule 73 (embedded_statement -> selection_statement .)
    CHCONST         reduce using rule 73 (embedded_statement -> selection_statement .)
    RBRACE          reduce using rule 73 (embedded_statement -> selection_statement .)
    ELSE            reduce using rule 73 (embedded_statement -> selection_statement .)


state 111

    (94) statement_expression -> assignment .

    STMT_TERMINATOR reduce using rule 94 (statement_expression -> assignment .)
    COMMA           reduce using rule 94 (statement_expression -> assignment .)
    RPAREN          reduce using rule 94 (statement_expression -> assignment .)


state 112

    (98) if_statement -> IF . LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> IF . LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement

    LPAREN          shift and go to state 159


state 113

    (96) statement_expression -> pre_decrement_expression .
    (39) unary_expression -> pre_decrement_expression .

    STMT_TERMINATOR reduce using rule 96 (statement_expression -> pre_decrement_expression .)
    COMMA           reduce using rule 96 (statement_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 96 (statement_expression -> pre_decrement_expression .)
    EQUALS          reduce using rule 39 (unary_expression -> pre_decrement_expression .)


state 114

    (95) statement_expression -> pre_increment_expression .
    (38) unary_expression -> pre_increment_expression .

    STMT_TERMINATOR reduce using rule 95 (statement_expression -> pre_increment_expression .)
    COMMA           reduce using rule 95 (statement_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 95 (statement_expression -> pre_increment_expression .)
    EQUALS          reduce using rule 38 (unary_expression -> pre_increment_expression .)


state 115

    (82) local_variable_declaration -> type . variable_declarators
    (83) variable_declarators -> . variable_declarator
    (84) variable_declarators -> . variable_declarators COMMA variable_declarator
    (85) variable_declarator -> . IDENTIFIER
    (86) variable_declarator -> . IDENTIFIER EQUALS variable_initializer

    IDENTIFIER      shift and go to state 53

    variable_declarator            shift and go to state 37
    variable_declarators           shift and go to state 160

state 116

    (76) block -> LBRACE begin_scope statement_list_opt . RBRACE

    RBRACE          shift and go to state 161


state 117

    (103) for_statement -> FOR . LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement

    LPAREN          shift and go to state 162


state 118

    (77) statement_list_opt -> empty .

    RBRACE          reduce using rule 77 (statement_list_opt -> empty .)


state 119

    (92) expression_statement -> statement_expression . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 163


state 120

    (93) statement_expression -> invocation_expression .
    (18) primary_expression_no_parenthesis -> invocation_expression .

    STMT_TERMINATOR reduce using rule 93 (statement_expression -> invocation_expression .)
    COMMA           reduce using rule 93 (statement_expression -> invocation_expression .)
    RPAREN          reduce using rule 93 (statement_expression -> invocation_expression .)
    EQUALS          reduce using rule 18 (primary_expression_no_parenthesis -> invocation_expression .)


state 121

    (100) iteration_statement -> while_statement .

    LBRACE          reduce using rule 100 (iteration_statement -> while_statement .)
    IF              reduce using rule 100 (iteration_statement -> while_statement .)
    WHILE           reduce using rule 100 (iteration_statement -> while_statement .)
    FOR             reduce using rule 100 (iteration_statement -> while_statement .)
    RETURN          reduce using rule 100 (iteration_statement -> while_statement .)
    IDENTIFIER      reduce using rule 100 (iteration_statement -> while_statement .)
    INCREMENT       reduce using rule 100 (iteration_statement -> while_statement .)
    DECREMENT       reduce using rule 100 (iteration_statement -> while_statement .)
    PLUS            reduce using rule 100 (iteration_statement -> while_statement .)
    MINUS           reduce using rule 100 (iteration_statement -> while_statement .)
    LNOT            reduce using rule 100 (iteration_statement -> while_statement .)
    NOT             reduce using rule 100 (iteration_statement -> while_statement .)
    INT             reduce using rule 100 (iteration_statement -> while_statement .)
    CHAR            reduce using rule 100 (iteration_statement -> while_statement .)
    FLOAT           reduce using rule 100 (iteration_statement -> while_statement .)
    LPAREN          reduce using rule 100 (iteration_statement -> while_statement .)
    INTCONST        reduce using rule 100 (iteration_statement -> while_statement .)
    STRCONST        reduce using rule 100 (iteration_statement -> while_statement .)
    CHCONST         reduce using rule 100 (iteration_statement -> while_statement .)
    RBRACE          reduce using rule 100 (iteration_statement -> while_statement .)
    ELSE            reduce using rule 100 (iteration_statement -> while_statement .)


state 122

    (110) jump_statement -> return_statement .

    LBRACE          reduce using rule 110 (jump_statement -> return_statement .)
    IF              reduce using rule 110 (jump_statement -> return_statement .)
    WHILE           reduce using rule 110 (jump_statement -> return_statement .)
    FOR             reduce using rule 110 (jump_statement -> return_statement .)
    RETURN          reduce using rule 110 (jump_statement -> return_statement .)
    IDENTIFIER      reduce using rule 110 (jump_statement -> return_statement .)
    INCREMENT       reduce using rule 110 (jump_statement -> return_statement .)
    DECREMENT       reduce using rule 110 (jump_statement -> return_statement .)
    PLUS            reduce using rule 110 (jump_statement -> return_statement .)
    MINUS           reduce using rule 110 (jump_statement -> return_statement .)
    LNOT            reduce using rule 110 (jump_statement -> return_statement .)
    NOT             reduce using rule 110 (jump_statement -> return_statement .)
    INT             reduce using rule 110 (jump_statement -> return_statement .)
    CHAR            reduce using rule 110 (jump_statement -> return_statement .)
    FLOAT           reduce using rule 110 (jump_statement -> return_statement .)
    LPAREN          reduce using rule 110 (jump_statement -> return_statement .)
    INTCONST        reduce using rule 110 (jump_statement -> return_statement .)
    STRCONST        reduce using rule 110 (jump_statement -> return_statement .)
    CHCONST         reduce using rule 110 (jump_statement -> return_statement .)
    RBRACE          reduce using rule 110 (jump_statement -> return_statement .)
    ELSE            reduce using rule 110 (jump_statement -> return_statement .)


state 123

    (71) embedded_statement -> block .

    LBRACE          reduce using rule 71 (embedded_statement -> block .)
    IF              reduce using rule 71 (embedded_statement -> block .)
    WHILE           reduce using rule 71 (embedded_statement -> block .)
    FOR             reduce using rule 71 (embedded_statement -> block .)
    RETURN          reduce using rule 71 (embedded_statement -> block .)
    IDENTIFIER      reduce using rule 71 (embedded_statement -> block .)
    INCREMENT       reduce using rule 71 (embedded_statement -> block .)
    DECREMENT       reduce using rule 71 (embedded_statement -> block .)
    PLUS            reduce using rule 71 (embedded_statement -> block .)
    MINUS           reduce using rule 71 (embedded_statement -> block .)
    LNOT            reduce using rule 71 (embedded_statement -> block .)
    NOT             reduce using rule 71 (embedded_statement -> block .)
    INT             reduce using rule 71 (embedded_statement -> block .)
    CHAR            reduce using rule 71 (embedded_statement -> block .)
    FLOAT           reduce using rule 71 (embedded_statement -> block .)
    LPAREN          reduce using rule 71 (embedded_statement -> block .)
    INTCONST        reduce using rule 71 (embedded_statement -> block .)
    STRCONST        reduce using rule 71 (embedded_statement -> block .)
    CHCONST         reduce using rule 71 (embedded_statement -> block .)
    RBRACE          reduce using rule 71 (embedded_statement -> block .)
    ELSE            reduce using rule 71 (embedded_statement -> block .)


state 124

    (78) statement_list_opt -> statement_list .
    (80) statement_list -> statement_list . statement
    (69) statement -> . declaration_statement
    (70) statement -> . embedded_statement
    (81) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (82) local_variable_declaration -> . type variable_declarators
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (1) type -> . non_array_type
    (2) type -> . array_type
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (4) simple_type -> . primitive_type
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (5) primitive_type -> . numeric_type
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (29) postfix_expression -> . primary_expression
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          reduce using rule 78 (statement_list_opt -> statement_list .)
    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    local_variable_declaration     shift and go to state 98
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    integral_type                  shift and go to state 20
    expression_statement           shift and go to state 101
    non_array_type                 shift and go to state 26
    floating_point_type            shift and go to state 31
    unary_expression               shift and go to state 103
    declaration_statement          shift and go to state 104
    jump_statement                 shift and go to state 105
    embedded_statement             shift and go to state 106
    array_type                     shift and go to state 30
    if_statement                   shift and go to state 102
    for_statement                  shift and go to state 107
    parenthesized_expression       shift and go to state 76
    statement                      shift and go to state 164
    selection_statement            shift and go to state 110
    postfix_expression             shift and go to state 83
    primitive_type                 shift and go to state 27
    numeric_type                   shift and go to state 33
    assignment                     shift and go to state 111
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    type                           shift and go to state 115
    simple_type                    shift and go to state 25
    invocation_expression          shift and go to state 120
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    while_statement                shift and go to state 121
    return_statement               shift and go to state 122
    block                          shift and go to state 123

state 125

    (137) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (138) formal_parameter -> . type IDENTIFIER
    (1) type -> . non_array_type
    (2) type -> . array_type
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (4) simple_type -> . primitive_type
    (5) primitive_type -> . numeric_type
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT

    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35

    integral_type                  shift and go to state 20
    numeric_type                   shift and go to state 33
    array_type                     shift and go to state 30
    type                           shift and go to state 58
    formal_parameter               shift and go to state 165
    simple_type                    shift and go to state 25
    non_array_type                 shift and go to state 26
    floating_point_type            shift and go to state 31
    primitive_type                 shift and go to state 27

state 126

    (132) method_header -> type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN .

    LBRACE          reduce using rule 132 (method_header -> type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN .)


state 127

    (138) formal_parameter -> type IDENTIFIER .

    COMMA           reduce using rule 138 (formal_parameter -> type IDENTIFIER .)
    RPAREN          reduce using rule 138 (formal_parameter -> type IDENTIFIER .)


state 128

    (89) array_initializer -> LBRACE variable_initializer_list . RBRACE
    (91) variable_initializer_list -> variable_initializer_list . COMMA variable_initializer

    RBRACE          shift and go to state 167
    COMMA           shift and go to state 166


state 129

    (90) variable_initializer_list -> variable_initializer .

    RBRACE          reduce using rule 90 (variable_initializer_list -> variable_initializer .)
    COMMA           reduce using rule 90 (variable_initializer_list -> variable_initializer .)


state 130

    (65) assignment_operator -> EQUALS .

    PLUS            reduce using rule 65 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 65 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 65 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 65 (assignment_operator -> EQUALS .)
    INCREMENT       reduce using rule 65 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 65 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 65 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> EQUALS .)
    INTCONST        reduce using rule 65 (assignment_operator -> EQUALS .)
    STRCONST        reduce using rule 65 (assignment_operator -> EQUALS .)
    CHCONST         reduce using rule 65 (assignment_operator -> EQUALS .)


state 131

    (64) assignment -> unary_expression assignment_operator . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 168
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 132

    (31) unary_expression_not_plusminus -> LNOT unary_expression .

    TIMES           reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    DIVIDE          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    MOD             reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    PLUS            reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    MINUS           reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    LSHIFT          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    RSHIFT          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    LT              reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    GT              reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    EQ              reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    NE              reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    CAND            reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    COR             reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    STMT_TERMINATOR reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    COMMA           reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    RBRACE          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    RPAREN          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    RBRACKET        reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)
    EQUALS          reduce using rule 31 (unary_expression_not_plusminus -> LNOT unary_expression .)


state 133

    (48) shift_expression -> shift_expression LSHIFT . additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 170
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 134

    (49) shift_expression -> shift_expression RSHIFT . additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 171
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 135

    (28) element_access -> IDENTIFIER LBRACKET . expression RBRACKET
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 172
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 136

    (25) invocation_expression -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (26) argument_list_opt -> . empty
    (27) argument_list_opt -> . argument_list
    (140) empty -> .
    (12) argument_list -> . argument
    (13) argument_list -> . argument_list COMMA argument
    (14) argument -> . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RPAREN          reduce using rule 140 (empty -> .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    argument                       shift and go to state 176
    empty                          shift and go to state 177
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    argument_list_opt              shift and go to state 173
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 175
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    argument_list                  shift and go to state 174
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 137

    (60) conditional_and_expression -> conditional_and_expression CAND . inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (57) exclusive_or_expression -> . and_expression
    (56) and_expression -> . equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    invocation_expression          shift and go to state 90
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 178
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    exclusive_or_expression        shift and go to state 81

state 138

    (34) pre_decrement_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    TIMES           reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    CAND            reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    COR             reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    STMT_TERMINATOR reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 34 (pre_decrement_expression -> DECREMENT unary_expression .)


state 139

    (33) pre_increment_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    TIMES           reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    CAND            reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    COR             reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    STMT_TERMINATOR reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 33 (pre_increment_expression -> INCREMENT unary_expression .)


state 140

    (24) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 179


state 141

    (32) unary_expression_not_plusminus -> NOT unary_expression .

    TIMES           reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    DIVIDE          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    MOD             reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    PLUS            reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    MINUS           reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    LSHIFT          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    RSHIFT          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    LT              reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    GT              reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    EQ              reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    NE              reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    CAND            reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    COR             reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    STMT_TERMINATOR reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    COMMA           reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    RBRACE          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    RPAREN          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    RBRACKET        reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)
    EQUALS          reduce using rule 32 (unary_expression_not_plusminus -> NOT unary_expression .)


state 142

    (51) relational_expression -> relational_expression LT . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 180
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 94
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 143

    (52) relational_expression -> relational_expression GT . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 181
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 94
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 144

    (62) conditional_or_expression -> conditional_or_expression COR . conditional_and_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (57) exclusive_or_expression -> . and_expression
    (56) and_expression -> . equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    invocation_expression          shift and go to state 90
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 182
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    exclusive_or_expression        shift and go to state 81

state 145

    (36) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    LT              reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    GT              reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    EQ              reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    NE              reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    CAND            reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    COR             reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    STMT_TERMINATOR reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 36 (unary_expression -> PLUS unary_expression .)
    EQUALS          reduce using rule 36 (unary_expression -> PLUS unary_expression .)


state 146

    (37) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    CAND            reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    COR             reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    STMT_TERMINATOR reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    EQUALS          reduce using rule 37 (unary_expression -> MINUS unary_expression .)


state 147

    (45) additive_expression -> additive_expression PLUS . multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 183
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 148

    (46) additive_expression -> additive_expression MINUS . multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 184
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 149

    (55) equality_expression -> equality_expression NE . relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    relational_expression          shift and go to state 185
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 94
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 150

    (54) equality_expression -> equality_expression EQ . relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    relational_expression          shift and go to state 186
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 94
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 169
    parenthesized_expression       shift and go to state 76

state 151

    (42) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 187
    parenthesized_expression       shift and go to state 76

state 152

    (43) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 188
    parenthesized_expression       shift and go to state 76

state 153

    (41) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    invocation_expression          shift and go to state 90
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 189
    parenthesized_expression       shift and go to state 76

state 154

    (111) return_statement -> RETURN expression_opt . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 190


state 155

    (112) expression_opt -> empty .

    STMT_TERMINATOR reduce using rule 112 (expression_opt -> empty .)


state 156

    (113) expression_opt -> expression .

    STMT_TERMINATOR reduce using rule 113 (expression_opt -> expression .)


state 157

    (81) declaration_statement -> local_variable_declaration STMT_TERMINATOR .

    LBRACE          reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    IF              reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    WHILE           reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    FOR             reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    RETURN          reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INCREMENT       reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DECREMENT       reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    PLUS            reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    MINUS           reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LNOT            reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    NOT             reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INT             reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CHAR            reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    FLOAT           reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LPAREN          reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INTCONST        reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    STRCONST        reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CHCONST         reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    RBRACE          reduce using rule 81 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)


state 158

    (102) while_statement -> WHILE LPAREN . boolean_expression RPAREN embedded_statement
    (68) boolean_expression -> . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    boolean_expression             shift and go to state 191
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 192
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 159

    (98) if_statement -> IF LPAREN . boolean_expression RPAREN embedded_statement
    (99) if_statement -> IF LPAREN . boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (68) boolean_expression -> . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    boolean_expression             shift and go to state 193
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 192
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 160

    (82) local_variable_declaration -> type variable_declarators .
    (84) variable_declarators -> variable_declarators . COMMA variable_declarator

    STMT_TERMINATOR reduce using rule 82 (local_variable_declaration -> type variable_declarators .)
    COMMA           shift and go to state 46


state 161

    (76) block -> LBRACE begin_scope statement_list_opt RBRACE .

    LBRACE          reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    IF              reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    WHILE           reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    FOR             reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    RETURN          reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    INCREMENT       reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    DECREMENT       reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    PLUS            reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    MINUS           reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    LNOT            reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    NOT             reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    INT             reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    CHAR            reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    FLOAT           reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    LPAREN          reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    INTCONST        reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    STRCONST        reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    CHCONST         reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    RBRACE          reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)
    ELSE            reduce using rule 76 (block -> LBRACE begin_scope statement_list_opt RBRACE .)


state 162

    (103) for_statement -> FOR LPAREN . for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (104) for_initializer -> . local_variable_declaration
    (105) for_initializer -> . statement_expression_list
    (82) local_variable_declaration -> . type variable_declarators
    (108) statement_expression_list -> . statement_expression
    (109) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (1) type -> . non_array_type
    (2) type -> . array_type
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (3) non_array_type -> . simple_type
    (11) array_type -> . simple_type LBRACKET RBRACKET
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (4) simple_type -> . primitive_type
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (5) primitive_type -> . numeric_type
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (6) numeric_type -> . integral_type
    (7) numeric_type -> . floating_point_type
    (29) postfix_expression -> . primary_expression
    (8) integral_type -> . INT
    (9) integral_type -> . CHAR
    (10) floating_point_type -> . FLOAT
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INT             shift and go to state 28
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    type                           shift and go to state 115
    primary_expression_no_parenthesis shift and go to state 86
    statement_expression_list      shift and go to state 196
    local_variable_declaration     shift and go to state 194
    unary_expression_not_plusminus shift and go to state 63
    integral_type                  shift and go to state 20
    for_initializer                shift and go to state 195
    simple_type                    shift and go to state 25
    non_array_type                 shift and go to state 26
    invocation_expression          shift and go to state 120
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 83
    primitive_type                 shift and go to state 27
    numeric_type                   shift and go to state 33
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 197
    array_type                     shift and go to state 30
    floating_point_type            shift and go to state 31
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 111

state 163

    (92) expression_statement -> statement_expression STMT_TERMINATOR .

    LBRACE          reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    IF              reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    WHILE           reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    FOR             reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    RETURN          reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INCREMENT       reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DECREMENT       reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    PLUS            reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    MINUS           reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LNOT            reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    NOT             reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INT             reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CHAR            reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    FLOAT           reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LPAREN          reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INTCONST        reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    STRCONST        reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CHCONST         reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    RBRACE          reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)
    ELSE            reduce using rule 92 (expression_statement -> statement_expression STMT_TERMINATOR .)


state 164

    (80) statement_list -> statement_list statement .

    LBRACE          reduce using rule 80 (statement_list -> statement_list statement .)
    IF              reduce using rule 80 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 80 (statement_list -> statement_list statement .)
    FOR             reduce using rule 80 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 80 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 80 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 80 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 80 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 80 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 80 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 80 (statement_list -> statement_list statement .)
    NOT             reduce using rule 80 (statement_list -> statement_list statement .)
    INT             reduce using rule 80 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 80 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 80 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 80 (statement_list -> statement_list statement .)
    INTCONST        reduce using rule 80 (statement_list -> statement_list statement .)
    STRCONST        reduce using rule 80 (statement_list -> statement_list statement .)
    CHCONST         reduce using rule 80 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 80 (statement_list -> statement_list statement .)


state 165

    (137) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    COMMA           reduce using rule 137 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    RPAREN          reduce using rule 137 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 166

    (91) variable_initializer_list -> variable_initializer_list COMMA . variable_initializer
    (87) variable_initializer -> . expression
    (88) variable_initializer -> . array_initializer
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (89) array_initializer -> . LBRACE variable_initializer_list RBRACE
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 62
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    array_initializer              shift and go to state 59
    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    postfix_expression             shift and go to state 83
    inclusive_or_expression        shift and go to state 68
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    variable_initializer           shift and go to state 198
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 78
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    pre_increment_expression       shift and go to state 74
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 167

    (89) array_initializer -> LBRACE variable_initializer_list RBRACE .

    RBRACE          reduce using rule 89 (array_initializer -> LBRACE variable_initializer_list RBRACE .)
    COMMA           reduce using rule 89 (array_initializer -> LBRACE variable_initializer_list RBRACE .)
    STMT_TERMINATOR reduce using rule 89 (array_initializer -> LBRACE variable_initializer_list RBRACE .)


state 168

    (64) assignment -> unary_expression assignment_operator expression .

    STMT_TERMINATOR reduce using rule 64 (assignment -> unary_expression assignment_operator expression .)
    RPAREN          reduce using rule 64 (assignment -> unary_expression assignment_operator expression .)
    RBRACE          reduce using rule 64 (assignment -> unary_expression assignment_operator expression .)
    COMMA           reduce using rule 64 (assignment -> unary_expression assignment_operator expression .)
    RBRACKET        reduce using rule 64 (assignment -> unary_expression assignment_operator expression .)


state 169

    (40) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 40 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 40 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 40 (multiplicative_expression -> unary_expression .)
    CAND            reduce using rule 40 (multiplicative_expression -> unary_expression .)
    COR             reduce using rule 40 (multiplicative_expression -> unary_expression .)
    STMT_TERMINATOR reduce using rule 40 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 40 (multiplicative_expression -> unary_expression .)


state 170

    (48) shift_expression -> shift_expression LSHIFT additive_expression .
    (45) additive_expression -> additive_expression . PLUS multiplicative_expression
    (46) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CAND            reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COR             reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STMT_TERMINATOR reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 147
    MINUS           shift and go to state 148


state 171

    (49) shift_expression -> shift_expression RSHIFT additive_expression .
    (45) additive_expression -> additive_expression . PLUS multiplicative_expression
    (46) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CAND            reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COR             reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STMT_TERMINATOR reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 147
    MINUS           shift and go to state 148


state 172

    (28) element_access -> IDENTIFIER LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 199


state 173

    (25) invocation_expression -> IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 200


state 174

    (27) argument_list_opt -> argument_list .
    (13) argument_list -> argument_list . COMMA argument

    RPAREN          reduce using rule 27 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 201


state 175

    (14) argument -> expression .

    COMMA           reduce using rule 14 (argument -> expression .)
    RPAREN          reduce using rule 14 (argument -> expression .)


state 176

    (12) argument_list -> argument .

    COMMA           reduce using rule 12 (argument_list -> argument .)
    RPAREN          reduce using rule 12 (argument_list -> argument .)


state 177

    (26) argument_list_opt -> empty .

    RPAREN          reduce using rule 26 (argument_list_opt -> empty .)


state 178

    (60) conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .

    CAND            reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    COR             reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RBRACE          reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    COMMA           reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RBRACKET        reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RPAREN          reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 60 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)


state 179

    (24) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    CAND            reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    COR             reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    STMT_TERMINATOR reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 24 (parenthesized_expression -> LPAREN expression RPAREN .)


state 180

    (51) relational_expression -> relational_expression LT shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    CAND            reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    COR             reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    STMT_TERMINATOR reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 51 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 133
    RSHIFT          shift and go to state 134


state 181

    (52) relational_expression -> relational_expression GT shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    CAND            reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    COR             reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    STMT_TERMINATOR reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 52 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 133
    RSHIFT          shift and go to state 134


state 182

    (62) conditional_or_expression -> conditional_or_expression COR conditional_and_expression .
    (60) conditional_and_expression -> conditional_and_expression . CAND inclusive_or_expression

    COR             reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    COMMA           reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RPAREN          reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RBRACE          reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    STMT_TERMINATOR reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RBRACKET        reduce using rule 62 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    CAND            shift and go to state 137


state 183

    (45) additive_expression -> additive_expression PLUS multiplicative_expression .
    (41) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (42) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (43) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CAND            reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COR             reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 45 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 152


state 184

    (46) additive_expression -> additive_expression MINUS multiplicative_expression .
    (41) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (42) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (43) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CAND            reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COR             reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 46 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 152


state 185

    (55) equality_expression -> equality_expression NE relational_expression .
    (51) relational_expression -> relational_expression . LT shift_expression
    (52) relational_expression -> relational_expression . GT shift_expression

    EQ              reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    CAND            reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    COR             reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    STMT_TERMINATOR reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 142
    GT              shift and go to state 143


state 186

    (54) equality_expression -> equality_expression EQ relational_expression .
    (51) relational_expression -> relational_expression . LT shift_expression
    (52) relational_expression -> relational_expression . GT shift_expression

    EQ              reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    CAND            reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    COR             reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    STMT_TERMINATOR reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 142
    GT              shift and go to state 143


state 187

    (42) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ              reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NE              reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CAND            reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COR             reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STMT_TERMINATOR reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACE          reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 42 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 188

    (43) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LSHIFT          reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RSHIFT          reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LT              reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GT              reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQ              reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    NE              reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CAND            reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COR             reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    STMT_TERMINATOR reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACE          reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 43 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 189

    (41) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LT              reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GT              reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQ              reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NE              reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    CAND            reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COR             reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STMT_TERMINATOR reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACE          reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 41 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 190

    (111) return_statement -> RETURN expression_opt STMT_TERMINATOR .

    LBRACE          reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    IF              reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    WHILE           reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    FOR             reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    RETURN          reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INCREMENT       reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DECREMENT       reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    PLUS            reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    MINUS           reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LNOT            reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    NOT             reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INT             reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CHAR            reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    FLOAT           reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LPAREN          reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INTCONST        reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    STRCONST        reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CHCONST         reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    RBRACE          reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    ELSE            reduce using rule 111 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)


state 191

    (102) while_statement -> WHILE LPAREN boolean_expression . RPAREN embedded_statement

    RPAREN          shift and go to state 202


state 192

    (68) boolean_expression -> expression .

    STMT_TERMINATOR reduce using rule 68 (boolean_expression -> expression .)
    RPAREN          reduce using rule 68 (boolean_expression -> expression .)


state 193

    (98) if_statement -> IF LPAREN boolean_expression . RPAREN embedded_statement
    (99) if_statement -> IF LPAREN boolean_expression . RPAREN embedded_statement ELSE embedded_statement

    RPAREN          shift and go to state 203


state 194

    (104) for_initializer -> local_variable_declaration .

    STMT_TERMINATOR reduce using rule 104 (for_initializer -> local_variable_declaration .)


state 195

    (103) for_statement -> FOR LPAREN for_initializer . STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement

    STMT_TERMINATOR shift and go to state 204


state 196

    (105) for_initializer -> statement_expression_list .
    (109) statement_expression_list -> statement_expression_list . COMMA statement_expression

    STMT_TERMINATOR reduce using rule 105 (for_initializer -> statement_expression_list .)
    COMMA           shift and go to state 205


state 197

    (108) statement_expression_list -> statement_expression .

    COMMA           reduce using rule 108 (statement_expression_list -> statement_expression .)
    STMT_TERMINATOR reduce using rule 108 (statement_expression_list -> statement_expression .)
    RPAREN          reduce using rule 108 (statement_expression_list -> statement_expression .)


state 198

    (91) variable_initializer_list -> variable_initializer_list COMMA variable_initializer .

    RBRACE          reduce using rule 91 (variable_initializer_list -> variable_initializer_list COMMA variable_initializer .)
    COMMA           reduce using rule 91 (variable_initializer_list -> variable_initializer_list COMMA variable_initializer .)


state 199

    (28) element_access -> IDENTIFIER LBRACKET expression RBRACKET .

    TIMES           reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    MOD             reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    LT              reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    GT              reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQ              reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    NE              reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    CAND            reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    COR             reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    STMT_TERMINATOR reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 28 (element_access -> IDENTIFIER LBRACKET expression RBRACKET .)


state 200

    (25) invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    STMT_TERMINATOR reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQUALS          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NE              reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CAND            reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COR             reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 25 (invocation_expression -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 201

    (13) argument_list -> argument_list COMMA . argument
    (14) argument -> . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    relational_expression          shift and go to state 80
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    primary_expression_no_parenthesis shift and go to state 86
    conditional_or_expression      shift and go to state 85
    multiplicative_expression      shift and go to state 96
    conditional_expression         shift and go to state 61
    argument                       shift and go to state 206
    unary_expression               shift and go to state 65
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    shift_expression               shift and go to state 67
    expression                     shift and go to state 175
    and_expression                 shift and go to state 91
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81
    unary_expression_not_plusminus shift and go to state 63

state 202

    (102) while_statement -> WHILE LPAREN boolean_expression RPAREN . embedded_statement
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    return_statement               shift and go to state 122
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    expression_statement           shift and go to state 101
    unary_expression               shift and go to state 103
    jump_statement                 shift and go to state 105
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    invocation_expression          shift and go to state 120
    while_statement                shift and go to state 121
    if_statement                   shift and go to state 102
    primary_expression_no_parenthesis shift and go to state 86
    for_statement                  shift and go to state 107
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    embedded_statement             shift and go to state 207
    block                          shift and go to state 123
    selection_statement            shift and go to state 110
    assignment                     shift and go to state 111

state 203

    (98) if_statement -> IF LPAREN boolean_expression RPAREN . embedded_statement
    (99) if_statement -> IF LPAREN boolean_expression RPAREN . embedded_statement ELSE embedded_statement
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    return_statement               shift and go to state 122
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    expression_statement           shift and go to state 101
    unary_expression               shift and go to state 103
    jump_statement                 shift and go to state 105
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    invocation_expression          shift and go to state 120
    while_statement                shift and go to state 121
    if_statement                   shift and go to state 102
    primary_expression_no_parenthesis shift and go to state 86
    for_statement                  shift and go to state 107
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    embedded_statement             shift and go to state 208
    block                          shift and go to state 123
    selection_statement            shift and go to state 110
    assignment                     shift and go to state 111

state 204

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR . for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (106) for_condition -> . boolean_expression
    (68) boolean_expression -> . expression
    (66) expression -> . conditional_expression
    (67) expression -> . assignment
    (63) conditional_expression -> . conditional_or_expression
    (64) assignment -> . unary_expression assignment_operator expression
    (61) conditional_or_expression -> . conditional_and_expression
    (62) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (59) conditional_and_expression -> . inclusive_or_expression
    (60) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (29) postfix_expression -> . primary_expression
    (57) exclusive_or_expression -> . and_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (56) and_expression -> . equality_expression
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression LT shift_expression
    (52) relational_expression -> . relational_expression GT shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (44) additive_expression -> . multiplicative_expression
    (45) additive_expression -> . additive_expression PLUS multiplicative_expression
    (46) additive_expression -> . additive_expression MINUS multiplicative_expression
    (40) multiplicative_expression -> . unary_expression
    (41) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (42) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (43) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    LPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 70
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    for_condition                  shift and go to state 210
    pre_decrement_expression       shift and go to state 82
    pre_increment_expression       shift and go to state 74
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 80
    conditional_expression         shift and go to state 61
    conditional_or_expression      shift and go to state 85
    shift_expression               shift and go to state 67
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 65
    boolean_expression             shift and go to state 209
    invocation_expression          shift and go to state 90
    primary_expression             shift and go to state 89
    expression                     shift and go to state 192
    and_expression                 shift and go to state 91
    primary_expression_no_parenthesis shift and go to state 86
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    inclusive_or_expression        shift and go to state 68
    conditional_and_expression     shift and go to state 71
    multiplicative_expression      shift and go to state 96
    additive_expression            shift and go to state 94
    equality_expression            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    assignment                     shift and go to state 77
    exclusive_or_expression        shift and go to state 81

state 205

    (109) statement_expression_list -> statement_expression_list COMMA . statement_expression
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 211
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    literal                        shift and go to state 69
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    primary_expression_no_parenthesis shift and go to state 86
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 103
    assignment                     shift and go to state 111
    invocation_expression          shift and go to state 120

state 206

    (13) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 13 (argument_list -> argument_list COMMA argument .)
    RPAREN          reduce using rule 13 (argument_list -> argument_list COMMA argument .)


state 207

    (102) while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .

    LBRACE          reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    IF              reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    WHILE           reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    FOR             reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    RETURN          reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INCREMENT       reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DECREMENT       reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    PLUS            reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    MINUS           reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LNOT            reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    NOT             reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INT             reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CHAR            reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    FLOAT           reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LPAREN          reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INTCONST        reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    STRCONST        reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CHCONST         reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    RBRACE          reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    ELSE            reduce using rule 102 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)


state 208

    (98) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .
    (99) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement . ELSE embedded_statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    IF              reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    WHILE           reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    FOR             reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    RETURN          reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INCREMENT       reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DECREMENT       reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    PLUS            reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    MINUS           reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LNOT            reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    NOT             reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INT             reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CHAR            reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    FLOAT           reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LPAREN          reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INTCONST        reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    STRCONST        reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CHCONST         reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    RBRACE          reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    ELSE            shift and go to state 212

  ! ELSE            [ reduce using rule 98 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .) ]


state 209

    (106) for_condition -> boolean_expression .

    STMT_TERMINATOR reduce using rule 106 (for_condition -> boolean_expression .)


state 210

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition . STMT_TERMINATOR for_iterator RPAREN embedded_statement

    STMT_TERMINATOR shift and go to state 213


state 211

    (109) statement_expression_list -> statement_expression_list COMMA statement_expression .

    COMMA           reduce using rule 109 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    STMT_TERMINATOR reduce using rule 109 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    RPAREN          reduce using rule 109 (statement_expression_list -> statement_expression_list COMMA statement_expression .)


state 212

    (99) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE . embedded_statement
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    return_statement               shift and go to state 122
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    expression_statement           shift and go to state 101
    unary_expression               shift and go to state 103
    jump_statement                 shift and go to state 105
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    invocation_expression          shift and go to state 120
    while_statement                shift and go to state 121
    if_statement                   shift and go to state 102
    primary_expression_no_parenthesis shift and go to state 86
    for_statement                  shift and go to state 107
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    embedded_statement             shift and go to state 214
    block                          shift and go to state 123
    selection_statement            shift and go to state 110
    assignment                     shift and go to state 111

state 213

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR . for_iterator RPAREN embedded_statement
    (107) for_iterator -> . statement_expression_list
    (108) statement_expression_list -> . statement_expression
    (109) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 197
    invocation_expression          shift and go to state 120
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    primary_expression_no_parenthesis shift and go to state 86
    statement_expression_list      shift and go to state 215
    literal                        shift and go to state 69
    unary_expression_not_plusminus shift and go to state 63
    unary_expression               shift and go to state 103
    for_iterator                   shift and go to state 216
    assignment                     shift and go to state 111

state 214

    (99) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .

    LBRACE          reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    IF              reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    WHILE           reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    FOR             reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    RETURN          reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    IDENTIFIER      reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INCREMENT       reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DECREMENT       reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    PLUS            reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    MINUS           reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LNOT            reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    NOT             reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INT             reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CHAR            reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    FLOAT           reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LPAREN          reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INTCONST        reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    STRCONST        reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CHCONST         reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    RBRACE          reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    ELSE            reduce using rule 99 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)


state 215

    (107) for_iterator -> statement_expression_list .
    (109) statement_expression_list -> statement_expression_list . COMMA statement_expression

    RPAREN          reduce using rule 107 (for_iterator -> statement_expression_list .)
    COMMA           shift and go to state 205


state 216

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator . RPAREN embedded_statement

    RPAREN          shift and go to state 217


state 217

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN . embedded_statement
    (71) embedded_statement -> . block
    (72) embedded_statement -> . expression_statement
    (73) embedded_statement -> . selection_statement
    (74) embedded_statement -> . iteration_statement
    (75) embedded_statement -> . jump_statement
    (76) block -> . LBRACE begin_scope statement_list_opt RBRACE
    (92) expression_statement -> . statement_expression STMT_TERMINATOR
    (97) selection_statement -> . if_statement
    (100) iteration_statement -> . while_statement
    (101) iteration_statement -> . for_statement
    (110) jump_statement -> . return_statement
    (93) statement_expression -> . invocation_expression
    (94) statement_expression -> . assignment
    (95) statement_expression -> . pre_increment_expression
    (96) statement_expression -> . pre_decrement_expression
    (98) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (99) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (102) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (103) for_statement -> . FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement
    (111) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (25) invocation_expression -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (64) assignment -> . unary_expression assignment_operator expression
    (33) pre_increment_expression -> . INCREMENT unary_expression
    (34) pre_decrement_expression -> . DECREMENT unary_expression
    (35) unary_expression -> . unary_expression_not_plusminus
    (36) unary_expression -> . PLUS unary_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . pre_increment_expression
    (39) unary_expression -> . pre_decrement_expression
    (30) unary_expression_not_plusminus -> . postfix_expression
    (31) unary_expression_not_plusminus -> . LNOT unary_expression
    (32) unary_expression_not_plusminus -> . NOT unary_expression
    (29) postfix_expression -> . primary_expression
    (15) primary_expression -> . parenthesized_expression
    (16) primary_expression -> . primary_expression_no_parenthesis
    (24) parenthesized_expression -> . LPAREN expression RPAREN
    (17) primary_expression_no_parenthesis -> . literal
    (18) primary_expression_no_parenthesis -> . invocation_expression
    (19) primary_expression_no_parenthesis -> . element_access
    (20) primary_expression_no_parenthesis -> . IDENTIFIER
    (21) literal -> . INTCONST
    (22) literal -> . STRCONST
    (23) literal -> . CHCONST
    (28) element_access -> . IDENTIFIER LBRACKET expression RBRACKET

    LBRACE          shift and go to state 41
    IF              shift and go to state 112
    WHILE           shift and go to state 99
    FOR             shift and go to state 117
    RETURN          shift and go to state 97
    IDENTIFIER      shift and go to state 108
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 72
    PLUS            shift and go to state 87
    MINUS           shift and go to state 93
    LNOT            shift and go to state 66
    NOT             shift and go to state 79
    LPAREN          shift and go to state 75
    INTCONST        shift and go to state 64
    STRCONST        shift and go to state 60
    CHCONST         shift and go to state 84

    literal                        shift and go to state 69
    pre_decrement_expression       shift and go to state 113
    pre_increment_expression       shift and go to state 114
    postfix_expression             shift and go to state 83
    return_statement               shift and go to state 122
    unary_expression_not_plusminus shift and go to state 63
    iteration_statement            shift and go to state 100
    expression_statement           shift and go to state 101
    unary_expression               shift and go to state 103
    jump_statement                 shift and go to state 105
    primary_expression             shift and go to state 89
    statement_expression           shift and go to state 119
    invocation_expression          shift and go to state 120
    while_statement                shift and go to state 121
    if_statement                   shift and go to state 102
    primary_expression_no_parenthesis shift and go to state 86
    for_statement                  shift and go to state 107
    element_access                 shift and go to state 92
    parenthesized_expression       shift and go to state 76
    embedded_statement             shift and go to state 218
    block                          shift and go to state 123
    selection_statement            shift and go to state 110
    assignment                     shift and go to state 111

state 218

    (103) for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .

    LBRACE          reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    IF              reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    WHILE           reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    FOR             reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    RETURN          reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    INCREMENT       reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    DECREMENT       reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    PLUS            reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    MINUS           reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    LNOT            reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    NOT             reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    INT             reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    CHAR            reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    FLOAT           reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    LPAREN          reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    INTCONST        reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    STRCONST        reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    CHCONST         reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    RBRACE          reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)
    ELSE            reduce using rule 103 (for_statement -> FOR LPAREN for_initializer STMT_TERMINATOR for_condition STMT_TERMINATOR for_iterator RPAREN embedded_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 208 resolved as shift
