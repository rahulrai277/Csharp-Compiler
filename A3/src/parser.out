Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    PRIVATE
    ABSTRACT
    VIRTUAL
    SEALED
    PUBLIC
    OVERRIDE
    VOLATILE
    NEWLINE
    INTERNAL
    COMMENT
    PROTECTED
    READONLY

Grammar

Rule 0     S' -> compilation_unit
Rule 1     compilation_unit -> using_directives_opt namespace_member_declarations_opt
Rule 2     using_directives -> using_directive
Rule 3     using_directives -> using_directives using_directive
Rule 4     using_directive -> using_namespace_directive
Rule 5     namespace_or_type_name -> IDENTIFIER
Rule 6     namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER
Rule 7     type -> value_type
Rule 8     type -> reference_type
Rule 9     value_type -> struct_type
Rule 10    struct_type -> type_name
Rule 11    struct_type -> simple_type
Rule 12    type_name -> namespace_or_type_name
Rule 13    simple_type -> numeric_type
Rule 14    simple_type -> BOOL
Rule 15    numeric_type -> integral_type
Rule 16    numeric_type -> floating_point_type
Rule 17    numeric_type -> DECIMAL
Rule 18    integral_type -> SBYTE
Rule 19    integral_type -> BYTE
Rule 20    integral_type -> SHORT
Rule 21    integral_type -> USHORT
Rule 22    integral_type -> INT
Rule 23    integral_type -> UINT
Rule 24    integral_type -> LONG
Rule 25    integral_type -> ULONG
Rule 26    integral_type -> CHAR
Rule 27    floating_point_type -> FLOAT
Rule 28    floating_point_type -> DOUBLE
Rule 29    reference_type -> class_type
Rule 30    reference_type -> array_type
Rule 31    reference_type -> delegate_type
Rule 32    class_type -> type_name
Rule 33    class_type -> OBJECT
Rule 34    class_type -> STRING
Rule 35    array_type -> non_array_type rank_specifiers
Rule 36    non_array_type -> type
Rule 37    rank_specifiers -> rank_specifier
Rule 38    rank_specifiers -> rank_specifiers rank_specifier
Rule 39    rank_specifier -> LBRACKET dim_separators_opt RBRACKET
Rule 40    literal -> INTCONST
Rule 41    literal -> STRCONST
Rule 42    literal -> CHCONST
Rule 43    dim_separators -> COMMA
Rule 44    dim_separators -> dim_separators COMMA
Rule 45    delegate_type -> type_name
Rule 46    using_namespace_directive -> USING namespace_name STMT_TERMINATOR
Rule 47    namespace_name -> namespace_or_type_name
Rule 48    argument_name -> IDENTIFIER COLON
Rule 49    expression -> non_assignment_expression
Rule 50    expression -> assignment
Rule 51    non_assignment_expression -> conditional_expression
Rule 52    non_assignment_expression -> lambda_expression
Rule 53    conditional_expression -> conditional_or_expression
Rule 54    conditional_expression -> conditional_or_expression CONDOP expression COLON expression
Rule 55    conditional_or_expression -> conditional_and_expression
Rule 56    conditional_or_expression -> conditional_or_expression COR conditional_and_expression
Rule 57    conditional_and_expression -> inclusive_or_expression
Rule 58    conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression
Rule 59    inclusive_or_expression -> exclusive_or_expression
Rule 60    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 61    exclusive_or_expression -> and_expression
Rule 62    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 63    and_expression -> equality_expression
Rule 64    and_expression -> and_expression AND equality_expression
Rule 65    equality_expression -> relational_expression
Rule 66    equality_expression -> equality_expression EQ relational_expression
Rule 67    equality_expression -> equality_expression NE relational_expression
Rule 68    relational_expression -> shift_expression
Rule 69    relational_expression -> relational_expression LT shift_expression
Rule 70    relational_expression -> relational_expression GT shift_expression
Rule 71    relational_expression -> relational_expression LE shift_expression
Rule 72    relational_expression -> relational_expression GE shift_expression
Rule 73    relational_expression -> relational_expression IS type
Rule 74    relational_expression -> relational_expression AS type
Rule 75    shift_expression -> additive_expression
Rule 76    shift_expression -> shift_expression LSHIFT additive_expression
Rule 77    shift_expression -> shift_expression RSHIFT additive_expression
Rule 78    additive_expression -> multiplicative_expression
Rule 79    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 80    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 81    multiplicative_expression -> unary_expression
Rule 82    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 83    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 84    multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 85    unary_expression -> primary_expression
Rule 86    unary_expression -> PLUS unary_expression
Rule 87    unary_expression -> MINUS unary_expression
Rule 88    unary_expression -> LNOT unary_expression
Rule 89    unary_expression -> NOT unary_expression
Rule 90    unary_expression -> pre_increment_expression
Rule 91    unary_expression -> pre_decrement_expression
Rule 92    unary_expression -> cast_expression
Rule 93    primary_expression -> primary_no_array_creation_expression
Rule 94    primary_expression -> array_creation_expression
Rule 95    primary_no_array_creation_expression -> literal
Rule 96    primary_no_array_creation_expression -> simple_name
Rule 97    primary_no_array_creation_expression -> parenthesized_expression
Rule 98    primary_no_array_creation_expression -> member_access
Rule 99    primary_no_array_creation_expression -> invocation_expression
Rule 100   primary_no_array_creation_expression -> element_access
Rule 101   primary_no_array_creation_expression -> this_access
Rule 102   primary_no_array_creation_expression -> base_access
Rule 103   primary_no_array_creation_expression -> post_increment_expression
Rule 104   primary_no_array_creation_expression -> post_decrement_expression
Rule 105   primary_no_array_creation_expression -> object_creation_expression
Rule 106   primary_no_array_creation_expression -> delegate_creation_expression
Rule 107   primary_no_array_creation_expression -> anonymous_object_creation_expression
Rule 108   primary_no_array_creation_expression -> typeof_expression
Rule 109   primary_no_array_creation_expression -> default_value_expression
Rule 110   primary_no_array_creation_expression -> anonymous_method_expression
Rule 111   simple_name -> IDENTIFIER
Rule 112   parenthesized_expression -> LPAREN expression RPAREN
Rule 113   member_access -> primary_expression MEMBERACCESS IDENTIFIER
Rule 114   member_access -> predefined_type MEMBERACCESS IDENTIFIER
Rule 115   predefined_type -> BOOL
Rule 116   predefined_type -> BYTE
Rule 117   predefined_type -> CHAR
Rule 118   predefined_type -> DECIMAL
Rule 119   predefined_type -> DOUBLE
Rule 120   predefined_type -> FLOAT
Rule 121   predefined_type -> INT
Rule 122   predefined_type -> LONG
Rule 123   predefined_type -> OBJECT
Rule 124   predefined_type -> SBYTE
Rule 125   predefined_type -> SHORT
Rule 126   predefined_type -> STRING
Rule 127   predefined_type -> UINT
Rule 128   predefined_type -> ULONG
Rule 129   predefined_type -> USHORT
Rule 130   invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN
Rule 131   argument_list -> argument
Rule 132   argument_list -> argument_list COMMA argument
Rule 133   argument -> argument_name_opt argument_value
Rule 134   argument_value -> expression
Rule 135   element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET
Rule 136   this_access -> THIS
Rule 137   base_access -> BASE MEMBERACCESS IDENTIFIER
Rule 138   base_access -> BASE LBRACKET argument_list RBRACKET
Rule 139   post_increment_expression -> primary_expression INCREMENT
Rule 140   post_decrement_expression -> primary_expression DECREMENT
Rule 141   object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
Rule 142   object_creation_expression -> NEW type object_or_collection_initializer
Rule 143   object_or_collection_initializer -> object_initializer
Rule 144   object_or_collection_initializer -> collection_initializer
Rule 145   object_initializer -> LBRACE member_initializer_list_opt RBRACE
Rule 146   object_initializer -> LBRACE member_initializer_list COMMA RBRACE
Rule 147   member_initializer_list -> member_initializer
Rule 148   member_initializer_list -> member_initializer_list COMMA member_initializer
Rule 149   member_initializer -> IDENTIFIER EQUALS initializer_value
Rule 150   initializer_value -> expression
Rule 151   initializer_value -> object_or_collection_initializer
Rule 152   collection_initializer -> LBRACE element_initializer_list RBRACE
Rule 153   collection_initializer -> LBRACE element_initializer_list COMMA RBRACE
Rule 154   element_initializer_list -> element_initializer
Rule 155   element_initializer_list -> element_initializer_list COMMA element_initializer
Rule 156   element_initializer -> non_assignment_expression
Rule 157   element_initializer -> LBRACE expression_list RBRACE
Rule 158   expression_list -> expression
Rule 159   expression_list -> expression_list COMMA expression
Rule 160   delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN
Rule 161   anonymous_object_creation_expression -> NEW anonymous_object_initializer
Rule 162   anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE
Rule 163   anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE
Rule 164   member_declarator_list -> member_declarator
Rule 165   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 166   member_declarator -> simple_name
Rule 167   member_declarator -> member_access
Rule 168   member_declarator -> IDENTIFIER EQUALS expression
Rule 169   typeof_expression -> TYPEOF LPAREN type RPAREN
Rule 170   typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN
Rule 171   typeof_expression -> TYPEOF LPAREN VOID RPAREN
Rule 172   unbound_type_name -> IDENTIFIER generic_dimension_specifier_opt
Rule 173   unbound_type_name -> IDENTIFIER DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt
Rule 174   unbound_type_name -> unbound_type_name MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt
Rule 175   generic_dimension_specifier -> < commas_opt >
Rule 176   commas -> COMMA
Rule 177   commas -> commas COMMA
Rule 178   default_value_expression -> DEFAULT LPAREN type RPAREN
Rule 179   anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block
Rule 180   explicit_anonymous_function_signature -> LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
Rule 181   explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter
Rule 182   explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter
Rule 183   explicit_anonymous_function_parameter -> type IDENTIFIER
Rule 184   block -> LBRACE statement_list_opt RBRACE
Rule 185   statement_list -> statement
Rule 186   statement_list -> statement_list statement
Rule 187   statement -> declaration_statement
Rule 188   statement -> embedded_statement
Rule 189   declaration_statement -> local_variable_declaration STMT_TERMINATOR
Rule 190   declaration_statement -> local_constant_declaration STMT_TERMINATOR
Rule 191   local_variable_declaration -> local_variable_type local_variable_declarators
Rule 192   local_variable_type -> type
Rule 193   local_variable_declarators -> local_variable_declarator
Rule 194   local_variable_declarators -> local_variable_declarators COMMA local_variable_declarator
Rule 195   local_variable_declarator -> IDENTIFIER
Rule 196   local_variable_declarator -> IDENTIFIER EQUALS local_variable_initializer
Rule 197   local_variable_initializer -> expression
Rule 198   local_variable_initializer -> array_initializer
Rule 199   array_initializer -> LBRACE variable_initializer_list_opt RBRACE
Rule 200   array_initializer -> LBRACE variable_initializer_list COMMA RBRACE
Rule 201   variable_initializer_list -> variable_initializer
Rule 202   variable_initializer_list -> variable_initializer_list COMMA variable_initializer
Rule 203   variable_initializer -> expression
Rule 204   variable_initializer -> array_initializer
Rule 205   local_constant_declaration -> CONST type constant_declarators
Rule 206   constant_declarators -> constant_declarator
Rule 207   constant_declarators -> constant_declarators COMMA constant_declarator
Rule 208   constant_declarator -> IDENTIFIER EQUALS constant_expression
Rule 209   constant_expression -> expression
Rule 210   embedded_statement -> block
Rule 211   embedded_statement -> empty_statement
Rule 212   embedded_statement -> expression_statement
Rule 213   embedded_statement -> selection_statement
Rule 214   embedded_statement -> iteration_statement
Rule 215   embedded_statement -> jump_statement
Rule 216   empty_statement -> STMT_TERMINATOR
Rule 217   expression_statement -> statement_expression STMT_TERMINATOR
Rule 218   statement_expression -> invocation_expression
Rule 219   statement_expression -> object_creation_expression
Rule 220   statement_expression -> assignment
Rule 221   statement_expression -> post_increment_expression
Rule 222   statement_expression -> post_decrement_expression
Rule 223   statement_expression -> pre_increment_expression
Rule 224   statement_expression -> pre_decrement_expression
Rule 225   assignment -> unary_expression assignment_operator expression
Rule 226   assignment_operator -> EQUALS
Rule 227   assignment_operator -> PLUSEQUAL
Rule 228   assignment_operator -> MINUSEQUAL
Rule 229   assignment_operator -> TIMESEQUAL
Rule 230   assignment_operator -> DIVEQUAL
Rule 231   assignment_operator -> MODEQUAL
Rule 232   assignment_operator -> ANDEQUAL
Rule 233   assignment_operator -> OREQUAL
Rule 234   assignment_operator -> XOREQUAL
Rule 235   assignment_operator -> LAMBDADEC
Rule 236   assignment_operator -> RSHIFTEQUAL
Rule 237   assignment_operator -> LSHIFTEQUAL
Rule 238   pre_increment_expression -> INCREMENT unary_expression
Rule 239   pre_decrement_expression -> DECREMENT unary_expression
Rule 240   selection_statement -> if_statement
Rule 241   selection_statement -> switch_statement
Rule 242   if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement
Rule 243   if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
Rule 244   boolean_expression -> expression
Rule 245   switch_statement -> SWITCH LPAREN expression RPAREN switch_block
Rule 246   switch_block -> LBRACE switch_sections_opt RBRACE
Rule 247   switch_sections -> switch_section
Rule 248   switch_sections -> switch_sections switch_section
Rule 249   switch_section -> switch_labels statement_list
Rule 250   switch_labels -> switch_label
Rule 251   switch_labels -> switch_labels switch_label
Rule 252   switch_label -> CASE constant_expression COLON
Rule 253   switch_label -> DEFAULT COLON
Rule 254   iteration_statement -> while_statement
Rule 255   iteration_statement -> do_statement
Rule 256   iteration_statement -> for_statement
Rule 257   while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement
Rule 258   do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
Rule 259   for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
Rule 260   for_initializer -> local_variable_declaration
Rule 261   for_initializer -> statement_expression_list
Rule 262   statement_expression_list -> statement_expression
Rule 263   statement_expression_list -> statement_expression_list COMMA statement_expression
Rule 264   for_condition -> boolean_expression
Rule 265   for_iterator -> statement_expression_list
Rule 266   jump_statement -> break_statement
Rule 267   jump_statement -> continue_statement
Rule 268   jump_statement -> goto_statement
Rule 269   jump_statement -> return_statement
Rule 270   break_statement -> BREAK STMT_TERMINATOR
Rule 271   continue_statement -> CONTINUE STMT_TERMINATOR
Rule 272   goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR
Rule 273   goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR
Rule 274   goto_statement -> GOTO DEFAULT STMT_TERMINATOR
Rule 275   return_statement -> RETURN expression_opt STMT_TERMINATOR
Rule 276   array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
Rule 277   array_creation_expression -> NEW array_type array_initializer
Rule 278   array_creation_expression -> NEW rank_specifier array_initializer
Rule 279   cast_expression -> LPAREN type RPAREN unary_expression
Rule 280   lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body
Rule 281   anonymous_function_signature -> explicit_anonymous_function_signature
Rule 282   anonymous_function_signature -> implicit_anonymous_function_signature
Rule 283   implicit_anonymous_function_signature -> LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
Rule 284   implicit_anonymous_function_signature -> implicit_anonymous_function_parameter
Rule 285   implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter
Rule 286   implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter
Rule 287   implicit_anonymous_function_parameter -> IDENTIFIER
Rule 288   anonymous_function_body -> expression
Rule 289   anonymous_function_body -> block
Rule 290   namespace_member_declarations -> namespace_member_declaration
Rule 291   namespace_member_declarations -> namespace_member_declarations namespace_member_declaration
Rule 292   namespace_member_declaration -> namespace_declaration
Rule 293   namespace_member_declaration -> type_declaration
Rule 294   namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt
Rule 295   qualified_identifier -> IDENTIFIER
Rule 296   qualified_identifier -> qualified_identifier MEMBERACCESS IDENTIFIER
Rule 297   namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE
Rule 298   type_declaration -> class_declaration
Rule 299   type_declaration -> struct_declaration
Rule 300   type_declaration -> enum_declaration
Rule 301   type_declaration -> delegate_declaration
Rule 302   class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
Rule 303   class_base -> COLON class_type
Rule 304   class_body -> LBRACE class_member_declarations_opt RBRACE
Rule 305   class_member_declarations -> class_member_declaration
Rule 306   class_member_declarations -> class_member_declarations class_member_declaration
Rule 307   class_member_declaration -> constant_declaration
Rule 308   class_member_declaration -> field_declaration
Rule 309   class_member_declaration -> method_declaration
Rule 310   class_member_declaration -> constructor_declaration
Rule 311   class_member_declaration -> destructor_declaration
Rule 312   class_member_declaration -> static_constructor_declaration
Rule 313   class_member_declaration -> type_declaration
Rule 314   constant_declaration -> CONST type constant_declarators STMT_TERMINATOR
Rule 315   field_declaration -> type variable_declarators STMT_TERMINATOR
Rule 316   variable_declarators -> variable_declarator
Rule 317   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 318   variable_declarator -> IDENTIFIER
Rule 319   variable_declarator -> IDENTIFIER EQUALS variable_initializer
Rule 320   method_declaration -> method_header method_body
Rule 321   method_header -> return_type member_name LPAREN formal_parameter_list_opt RPAREN
Rule 322   return_type -> type
Rule 323   return_type -> VOID
Rule 324   member_name -> IDENTIFIER
Rule 325   formal_parameter_list -> fixed_parameters
Rule 326   formal_parameter_list -> fixed_parameters COMMA parameter_array
Rule 327   formal_parameter_list -> parameter_array
Rule 328   fixed_parameters -> fixed_parameter
Rule 329   fixed_parameters -> fixed_parameters COMMA fixed_parameter
Rule 330   fixed_parameter -> type IDENTIFIER default_argument_opt
Rule 331   default_argument -> EQUALS expression
Rule 332   parameter_array -> PARAMS array_type IDENTIFIER
Rule 333   method_body -> block
Rule 334   method_body -> STMT_TERMINATOR
Rule 335   constructor_declaration -> constructor_declarator constructor_body
Rule 336   constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
Rule 337   constructor_initializer -> COLON BASE LPAREN argument_list_opt RPAREN
Rule 338   constructor_initializer -> COLON THIS LPAREN argument_list_opt RPAREN
Rule 339   constructor_body -> block
Rule 340   constructor_body -> STMT_TERMINATOR
Rule 341   destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body
Rule 342   destructor_body -> block
Rule 343   destructor_body -> STMT_TERMINATOR
Rule 344   static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body
Rule 345   static_constructor_modifiers -> extern_opt STATIC
Rule 346   static_constructor_modifiers -> STATIC extern_opt
Rule 347   static_constructor_body -> block
Rule 348   static_constructor_body -> STMT_TERMINATOR
Rule 349   struct_declaration -> STRUCT IDENTIFIER
Rule 350   struct_declaration -> struct_body smt_terminator_opt
Rule 351   struct_body -> LBRACE struct_member_declarations_opt RBRACE
Rule 352   struct_member_declarations -> struct_member_declaration
Rule 353   struct_member_declarations -> struct_member_declarations struct_member_declaration
Rule 354   struct_member_declaration -> constant_declaration
Rule 355   struct_member_declaration -> field_declaration
Rule 356   struct_member_declaration -> method_declaration
Rule 357   struct_member_declaration -> constructor_declaration
Rule 358   struct_member_declaration -> static_constructor_declaration
Rule 359   struct_member_declaration -> type_declaration
Rule 360   enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
Rule 361   enum_base -> COLON integral_type
Rule 362   enum_body -> LBRACE enum_member_declarations_opt RBRACE
Rule 363   enum_body -> LBRACE enum_member_declarations COMMA RBRACE
Rule 364   enum_member_declarations -> enum_member_declaration
Rule 365   enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration
Rule 366   enum_member_declaration -> IDENTIFIER
Rule 367   enum_member_declaration -> IDENTIFIER EQUALS constant_expression
Rule 368   delegate_declaration -> DELEGATE return_type
Rule 369   delegate_declaration -> IDENTIFIER
Rule 370   delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
Rule 371   empty -> <empty>
Rule 372   implicit_anonymous_function_parameter_list_opt -> empty
Rule 373   implicit_anonymous_function_parameter_list_opt -> implicit_anonymous_function_parameter_list
Rule 374   generic_dimension_specifier_opt -> empty
Rule 375   generic_dimension_specifier_opt -> generic_dimension_specifier
Rule 376   formal_parameter_list_opt -> empty
Rule 377   formal_parameter_list_opt -> formal_parameter_list
Rule 378   rank_specifiers_opt -> empty
Rule 379   rank_specifiers_opt -> rank_specifiers
Rule 380   smt_terminator_opt -> empty
Rule 381   smt_terminator_opt -> STMT_TERMINATOR
Rule 382   enum_member_declarations_opt -> empty
Rule 383   enum_member_declarations_opt -> enum_member_declarations
Rule 384   for_initializer_opt -> empty
Rule 385   for_initializer_opt -> for_initializer
Rule 386   enum_base_opt -> empty
Rule 387   enum_base_opt -> enum_base
Rule 388   default_argument_opt -> empty
Rule 389   default_argument_opt -> default_argument
Rule 390   array_initializer_opt -> empty
Rule 391   array_initializer_opt -> array_initializer
Rule 392   switch_sections_opt -> empty
Rule 393   switch_sections_opt -> switch_sections
Rule 394   namespace_member_declarations_opt -> empty
Rule 395   namespace_member_declarations_opt -> namespace_member_declarations
Rule 396   explicit_anonymous_function_signature_opt -> empty
Rule 397   explicit_anonymous_function_signature_opt -> explicit_anonymous_function_signature
Rule 398   variable_initializer_list_opt -> empty
Rule 399   variable_initializer_list_opt -> variable_initializer_list
Rule 400   member_declarator_list_opt -> empty
Rule 401   member_declarator_list_opt -> member_declarator_list
Rule 402   class_base_opt -> empty
Rule 403   class_base_opt -> class_base
Rule 404   explicit_anonymous_function_parameter_list_opt -> empty
Rule 405   explicit_anonymous_function_parameter_list_opt -> explicit_anonymous_function_parameter_list
Rule 406   argument_name_opt -> empty
Rule 407   argument_name_opt -> argument_name
Rule 408   statement_list_opt -> empty
Rule 409   statement_list_opt -> statement_list
Rule 410   for_condition_opt -> empty
Rule 411   for_condition_opt -> for_condition
Rule 412   struct_member_declarations_opt -> empty
Rule 413   struct_member_declarations_opt -> struct_member_declarations
Rule 414   expression_opt -> empty
Rule 415   expression_opt -> expression
Rule 416   for_iterator_opt -> empty
Rule 417   for_iterator_opt -> for_iterator
Rule 418   object_or_collection_initializer_opt -> empty
Rule 419   object_or_collection_initializer_opt -> object_or_collection_initializer
Rule 420   dim_separators_opt -> empty
Rule 421   dim_separators_opt -> dim_separators
Rule 422   constructor_initializer_opt -> empty
Rule 423   constructor_initializer_opt -> constructor_initializer
Rule 424   member_initializer_list_opt -> empty
Rule 425   member_initializer_list_opt -> member_initializer_list
Rule 426   using_directives_opt -> empty
Rule 427   using_directives_opt -> using_directives
Rule 428   commas_opt -> empty
Rule 429   commas_opt -> commas
Rule 430   class_member_declarations_opt -> empty
Rule 431   class_member_declarations_opt -> class_member_declarations
Rule 432   extern_opt -> empty
Rule 433   extern_opt -> EXTERN
Rule 434   argument_list_opt -> empty
Rule 435   argument_list_opt -> argument_list

Terminals, with rules where they appear

<                    : 175
>                    : 175
ABSTRACT             : 
AND                  : 64
ANDEQUAL             : 232
AS                   : 74
BASE                 : 137 138 337
BOOL                 : 14 115
BREAK                : 270
BYTE                 : 19 116
CAND                 : 58
CASE                 : 252 273
CHAR                 : 26 117
CHCONST              : 42
CLASS                : 302
COLON                : 48 54 252 253 303 337 338 361
COMMA                : 43 44 132 146 148 153 155 159 163 165 176 177 182 194 200 202 207 263 286 317 326 329 363 365
COMMENT              : 
CONDOP               : 54
CONST                : 205 314
CONTINUE             : 271
COR                  : 56
DECIMAL              : 17 118
DECREMENT            : 140 239
DEFAULT              : 178 253 274
DELEGATE             : 179 368
DIVEQUAL             : 230
DIVIDE               : 83
DO                   : 258
DOUBLE               : 28 119
DOUBLE_COLON         : 173
ELSE                 : 243
ENUM                 : 360
EQ                   : 66
EQUALS               : 149 168 196 208 226 319 331 367
EXTERN               : 433
FLOAT                : 27 120
FOR                  : 259
GE                   : 72
GOTO                 : 272 273 274
GT                   : 70
IDENTIFIER           : 5 6 48 111 113 114 137 149 168 172 173 173 174 183 195 196 208 272 287 295 296 302 318 319 324 330 332 336 341 344 349 360 366 367 369
IF                   : 242 243
INCREMENT            : 139 238
INT                  : 22 121
INTCONST             : 40
INTERNAL             : 
IS                   : 73
LAMBDADEC            : 235 280
LBRACE               : 145 146 152 153 157 162 163 184 199 200 246 297 304 351 362 363
LBRACKET             : 39 135 138 276
LE                   : 71
LNOT                 : 88
LONG                 : 24 122
LPAREN               : 112 130 141 160 169 170 171 178 180 242 243 245 257 258 259 279 283 321 336 337 338 341 344 370
LSHIFT               : 76
LSHIFTEQUAL          : 237
LT                   : 69
MEMBERACCESS         : 6 113 114 137 174 296
MINUS                : 80 87
MINUSEQUAL           : 228
MOD                  : 84
MODEQUAL             : 231
NAMESPACE            : 294
NE                   : 67
NEW                  : 141 142 160 161 276 277 278
NEWLINE              : 
NOT                  : 89 341
OBJECT               : 33 123
OR                   : 60
OREQUAL              : 233
OVERRIDE             : 
PARAMS               : 332
PLUS                 : 79 86
PLUSEQUAL            : 227
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACE               : 145 146 152 153 157 162 163 184 199 200 246 297 304 351 362 363
RBRACKET             : 39 135 138 276
READONLY             : 
RETURN               : 275
RPAREN               : 112 130 141 160 169 170 171 178 180 242 243 245 257 258 259 279 283 321 336 337 338 341 344 370
RSHIFT               : 77
RSHIFTEQUAL          : 236
SBYTE                : 18 124
SEALED               : 
SHORT                : 20 125
STATIC               : 345 346
STMT_TERMINATOR      : 46 189 190 216 217 258 259 259 270 271 272 273 274 275 314 315 334 340 343 348 370 381
STRCONST             : 41
STRING               : 34 126
STRUCT               : 349
SWITCH               : 245
THIS                 : 136 338
TIMES                : 82
TIMESEQUAL           : 229
TYPEOF               : 169 170 171
UINT                 : 23 127
ULONG                : 25 128
USHORT               : 21 129
USING                : 46
VIRTUAL              : 
VOID                 : 171 323
VOLATILE             : 
WHILE                : 257 258
XOR                  : 62
XOREQUAL             : 234
error                : 

Nonterminals, with rules where they appear

additive_expression  : 75 76 77 79 80
and_expression       : 61 62 64
anonymous_function_body : 280
anonymous_function_signature : 280
anonymous_method_expression : 110
anonymous_object_creation_expression : 107
anonymous_object_initializer : 161
argument             : 131 132
argument_list        : 132 135 138 435
argument_list_opt    : 130 141 337 338
argument_name        : 407
argument_name_opt    : 133
argument_value       : 133
array_creation_expression : 94
array_initializer    : 198 204 277 278 391
array_initializer_opt : 276
array_type           : 30 277 332
assignment           : 50 220
assignment_operator  : 225
base_access          : 102
block                : 179 210 289 333 339 342 347
boolean_expression   : 242 243 257 258 264
break_statement      : 266
cast_expression      : 92
class_base           : 403
class_base_opt       : 302
class_body           : 302
class_declaration    : 298
class_member_declaration : 305 306
class_member_declarations : 306 431
class_member_declarations_opt : 304
class_type           : 29 303
collection_initializer : 144
commas               : 177 429
commas_opt           : 175
compilation_unit     : 0
conditional_and_expression : 55 56 58
conditional_expression : 51
conditional_or_expression : 53 54 56
constant_declaration : 307 354
constant_declarator  : 206 207
constant_declarators : 205 207 314
constant_expression  : 208 252 273 367
constructor_body     : 335
constructor_declaration : 310 357
constructor_declarator : 335
constructor_initializer : 423
constructor_initializer_opt : 336
continue_statement   : 267
declaration_statement : 187
default_argument     : 389
default_argument_opt : 330
default_value_expression : 109
delegate_creation_expression : 106
delegate_declaration : 301
delegate_type        : 31 160
destructor_body      : 341
destructor_declaration : 311
dim_separators       : 44 421
dim_separators_opt   : 39
do_statement         : 255
element_access       : 100
element_initializer  : 154 155
element_initializer_list : 152 153 155
embedded_statement   : 188 242 243 243 257 258 259
empty                : 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434
empty_statement      : 211
enum_base            : 387
enum_base_opt        : 360
enum_body            : 360
enum_declaration     : 300
enum_member_declaration : 364 365
enum_member_declarations : 363 365 383
enum_member_declarations_opt : 362
equality_expression  : 63 64 66 67
exclusive_or_expression : 59 60 62
explicit_anonymous_function_parameter : 181 182
explicit_anonymous_function_parameter_list : 182 405
explicit_anonymous_function_parameter_list_opt : 180
explicit_anonymous_function_signature : 281 397
explicit_anonymous_function_signature_opt : 179
expression           : 54 54 112 134 150 158 159 160 168 197 203 209 225 244 245 288 331 415
expression_list      : 157 159 276
expression_opt       : 275
expression_statement : 212
extern_opt           : 341 345 346
field_declaration    : 308 355
fixed_parameter      : 328 329
fixed_parameters     : 325 326 329
floating_point_type  : 16
for_condition        : 411
for_condition_opt    : 259
for_initializer      : 385
for_initializer_opt  : 259
for_iterator         : 417
for_iterator_opt     : 259
for_statement        : 256
formal_parameter_list : 377
formal_parameter_list_opt : 321 336 370
generic_dimension_specifier : 375
generic_dimension_specifier_opt : 172 173 174
goto_statement       : 268
if_statement         : 240
implicit_anonymous_function_parameter : 284 285 286
implicit_anonymous_function_parameter_list : 286 373
implicit_anonymous_function_parameter_list_opt : 283
implicit_anonymous_function_signature : 282
inclusive_or_expression : 57 58 60
initializer_value    : 149
integral_type        : 15 361
invocation_expression : 99 218
iteration_statement  : 214
jump_statement       : 215
lambda_expression    : 52
literal              : 95
local_constant_declaration : 190
local_variable_declaration : 189 260
local_variable_declarator : 193 194
local_variable_declarators : 191 194
local_variable_initializer : 196
local_variable_type  : 191
member_access        : 98 167
member_declarator    : 164 165
member_declarator_list : 163 165 401
member_declarator_list_opt : 162
member_initializer   : 147 148
member_initializer_list : 146 148 425
member_initializer_list_opt : 145
member_name          : 321
method_body          : 320
method_declaration   : 309 356
method_header        : 320
multiplicative_expression : 78 79 80 82 83 84
namespace_body       : 294
namespace_declaration : 292
namespace_member_declaration : 290 291
namespace_member_declarations : 291 395
namespace_member_declarations_opt : 1 297
namespace_name       : 46
namespace_or_type_name : 6 12 47
non_array_type       : 35 276
non_assignment_expression : 49 156
numeric_type         : 13
object_creation_expression : 105 219
object_initializer   : 143
object_or_collection_initializer : 142 151 419
object_or_collection_initializer_opt : 141
parameter_array      : 326 327
parenthesized_expression : 97
post_decrement_expression : 104 222
post_increment_expression : 103 221
pre_decrement_expression : 91 224
pre_increment_expression : 90 223
predefined_type      : 114
primary_expression   : 85 113 130 139 140
primary_no_array_creation_expression : 93 135
qualified_identifier : 294 296
rank_specifier       : 37 38 278
rank_specifiers      : 35 38 379
rank_specifiers_opt  : 276
reference_type       : 8
relational_expression : 65 66 67 69 70 71 72 73 74
return_statement     : 269
return_type          : 321 368
selection_statement  : 213
shift_expression     : 68 69 70 71 72 76 77
simple_name          : 96 166
simple_type          : 11
smt_terminator_opt   : 294 302 350 360
statement            : 185 186
statement_expression : 217 262 263
statement_expression_list : 261 263 265
statement_list       : 186 249 409
statement_list_opt   : 184
static_constructor_body : 344
static_constructor_declaration : 312 358
static_constructor_modifiers : 344
struct_body          : 350
struct_declaration   : 299
struct_member_declaration : 352 353
struct_member_declarations : 353 413
struct_member_declarations_opt : 351
struct_type          : 9
switch_block         : 245
switch_label         : 250 251
switch_labels        : 249 251
switch_section       : 247 248
switch_sections      : 248 393
switch_sections_opt  : 246
switch_statement     : 241
this_access          : 101
type                 : 36 73 74 141 142 169 178 183 192 205 279 314 315 322 330
type_declaration     : 293 313 359
type_name            : 10 32 45
typeof_expression    : 108
unary_expression     : 81 82 83 84 86 87 88 89 225 238 239 279
unbound_type_name    : 170 174
using_directive      : 2 3
using_directives     : 3 427
using_directives_opt : 1 297
using_namespace_directive : 4
value_type           : 7
variable_declarator  : 316 317
variable_declarators : 315 317
variable_initializer : 201 202 319
variable_initializer_list : 200 202 399
variable_initializer_list_opt : 199
while_statement      : 254

Parsing method: LALR

state 0

    (0) S' -> . compilation_unit
    (1) compilation_unit -> . using_directives_opt namespace_member_declarations_opt
    (426) using_directives_opt -> . empty
    (427) using_directives_opt -> . using_directives
    (371) empty -> .
    (2) using_directives -> . using_directive
    (3) using_directives -> . using_directives using_directive
    (4) using_directive -> . using_namespace_directive
    (46) using_namespace_directive -> . USING namespace_name STMT_TERMINATOR

    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    $end            reduce using rule 371 (empty -> .)
    USING           shift and go to state 4

    using_namespace_directive      shift and go to state 1
    using_directives               shift and go to state 2
    using_directive                shift and go to state 3
    compilation_unit               shift and go to state 5
    empty                          shift and go to state 6
    using_directives_opt           shift and go to state 7

state 1

    (4) using_directive -> using_namespace_directive .

    USING           reduce using rule 4 (using_directive -> using_namespace_directive .)
    NAMESPACE       reduce using rule 4 (using_directive -> using_namespace_directive .)
    CLASS           reduce using rule 4 (using_directive -> using_namespace_directive .)
    STRUCT          reduce using rule 4 (using_directive -> using_namespace_directive .)
    ENUM            reduce using rule 4 (using_directive -> using_namespace_directive .)
    DELEGATE        reduce using rule 4 (using_directive -> using_namespace_directive .)
    IDENTIFIER      reduce using rule 4 (using_directive -> using_namespace_directive .)
    LPAREN          reduce using rule 4 (using_directive -> using_namespace_directive .)
    LBRACE          reduce using rule 4 (using_directive -> using_namespace_directive .)
    $end            reduce using rule 4 (using_directive -> using_namespace_directive .)
    RBRACE          reduce using rule 4 (using_directive -> using_namespace_directive .)


state 2

    (427) using_directives_opt -> using_directives .
    (3) using_directives -> using_directives . using_directive
    (4) using_directive -> . using_namespace_directive
    (46) using_namespace_directive -> . USING namespace_name STMT_TERMINATOR

    NAMESPACE       reduce using rule 427 (using_directives_opt -> using_directives .)
    CLASS           reduce using rule 427 (using_directives_opt -> using_directives .)
    STRUCT          reduce using rule 427 (using_directives_opt -> using_directives .)
    ENUM            reduce using rule 427 (using_directives_opt -> using_directives .)
    DELEGATE        reduce using rule 427 (using_directives_opt -> using_directives .)
    IDENTIFIER      reduce using rule 427 (using_directives_opt -> using_directives .)
    LPAREN          reduce using rule 427 (using_directives_opt -> using_directives .)
    LBRACE          reduce using rule 427 (using_directives_opt -> using_directives .)
    RBRACE          reduce using rule 427 (using_directives_opt -> using_directives .)
    $end            reduce using rule 427 (using_directives_opt -> using_directives .)
    USING           shift and go to state 4

    using_namespace_directive      shift and go to state 1
    using_directive                shift and go to state 8

state 3

    (2) using_directives -> using_directive .

    USING           reduce using rule 2 (using_directives -> using_directive .)
    NAMESPACE       reduce using rule 2 (using_directives -> using_directive .)
    CLASS           reduce using rule 2 (using_directives -> using_directive .)
    STRUCT          reduce using rule 2 (using_directives -> using_directive .)
    ENUM            reduce using rule 2 (using_directives -> using_directive .)
    DELEGATE        reduce using rule 2 (using_directives -> using_directive .)
    IDENTIFIER      reduce using rule 2 (using_directives -> using_directive .)
    LPAREN          reduce using rule 2 (using_directives -> using_directive .)
    LBRACE          reduce using rule 2 (using_directives -> using_directive .)
    $end            reduce using rule 2 (using_directives -> using_directive .)
    RBRACE          reduce using rule 2 (using_directives -> using_directive .)


state 4

    (46) using_namespace_directive -> USING . namespace_name STMT_TERMINATOR
    (47) namespace_name -> . namespace_or_type_name
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER

    IDENTIFIER      shift and go to state 9

    namespace_name                 shift and go to state 11
    namespace_or_type_name         shift and go to state 10

state 5

    (0) S' -> compilation_unit .



state 6

    (426) using_directives_opt -> empty .

    NAMESPACE       reduce using rule 426 (using_directives_opt -> empty .)
    CLASS           reduce using rule 426 (using_directives_opt -> empty .)
    STRUCT          reduce using rule 426 (using_directives_opt -> empty .)
    ENUM            reduce using rule 426 (using_directives_opt -> empty .)
    DELEGATE        reduce using rule 426 (using_directives_opt -> empty .)
    IDENTIFIER      reduce using rule 426 (using_directives_opt -> empty .)
    LPAREN          reduce using rule 426 (using_directives_opt -> empty .)
    LBRACE          reduce using rule 426 (using_directives_opt -> empty .)
    RBRACE          reduce using rule 426 (using_directives_opt -> empty .)
    $end            reduce using rule 426 (using_directives_opt -> empty .)


state 7

    (1) compilation_unit -> using_directives_opt . namespace_member_declarations_opt
    (394) namespace_member_declarations_opt -> . empty
    (395) namespace_member_declarations_opt -> . namespace_member_declarations
    (371) empty -> .
    (290) namespace_member_declarations -> . namespace_member_declaration
    (291) namespace_member_declarations -> . namespace_member_declarations namespace_member_declaration
    (292) namespace_member_declaration -> . namespace_declaration
    (293) namespace_member_declaration -> . type_declaration
    (294) namespace_declaration -> . NAMESPACE qualified_identifier namespace_body smt_terminator_opt
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE

    $end            reduce using rule 371 (empty -> .)
    NAMESPACE       shift and go to state 25
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    IDENTIFIER      shift and go to state 20
    LPAREN          shift and go to state 16
    LBRACE          shift and go to state 28

    namespace_member_declaration   shift and go to state 12
    type_declaration               shift and go to state 14
    class_declaration              shift and go to state 17
    struct_declaration             shift and go to state 19
    struct_body                    shift and go to state 29
    delegate_declaration           shift and go to state 22
    namespace_member_declarations_opt shift and go to state 23
    namespace_declaration          shift and go to state 24
    enum_declaration               shift and go to state 18
    empty                          shift and go to state 26
    namespace_member_declarations  shift and go to state 30

state 8

    (3) using_directives -> using_directives using_directive .

    USING           reduce using rule 3 (using_directives -> using_directives using_directive .)
    NAMESPACE       reduce using rule 3 (using_directives -> using_directives using_directive .)
    CLASS           reduce using rule 3 (using_directives -> using_directives using_directive .)
    STRUCT          reduce using rule 3 (using_directives -> using_directives using_directive .)
    ENUM            reduce using rule 3 (using_directives -> using_directives using_directive .)
    DELEGATE        reduce using rule 3 (using_directives -> using_directives using_directive .)
    IDENTIFIER      reduce using rule 3 (using_directives -> using_directives using_directive .)
    LPAREN          reduce using rule 3 (using_directives -> using_directives using_directive .)
    LBRACE          reduce using rule 3 (using_directives -> using_directives using_directive .)
    $end            reduce using rule 3 (using_directives -> using_directives using_directive .)
    RBRACE          reduce using rule 3 (using_directives -> using_directives using_directive .)


state 9

    (5) namespace_or_type_name -> IDENTIFIER .

    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LT              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    GT              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LE              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    GE              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    IS              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    AS              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    EQ              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    NE              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    AND             reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    XOR             reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    OR              reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    CAND            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    CONDOP          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    COR             reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    COLON           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACE          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    NAMESPACE       reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    DELEGATE        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    $end            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    OBJECT          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    STRING          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    BOOL            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    DECIMAL         reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    SBYTE           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    BYTE            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    USHORT          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    INT             reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    UINT            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    ULONG           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    NOT             reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)


state 10

    (47) namespace_name -> namespace_or_type_name .
    (6) namespace_or_type_name -> namespace_or_type_name . MEMBERACCESS IDENTIFIER

    STMT_TERMINATOR reduce using rule 47 (namespace_name -> namespace_or_type_name .)
    MEMBERACCESS    shift and go to state 31


state 11

    (46) using_namespace_directive -> USING namespace_name . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 32


state 12

    (290) namespace_member_declarations -> namespace_member_declaration .

    NAMESPACE       reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    CLASS           reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    STRUCT          reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    ENUM            reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    DELEGATE        reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    IDENTIFIER      reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    LPAREN          reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    LBRACE          reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    RBRACE          reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)
    $end            reduce using rule 290 (namespace_member_declarations -> namespace_member_declaration .)


state 13

    (349) struct_declaration -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 33


state 14

    (293) namespace_member_declaration -> type_declaration .

    NAMESPACE       reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    CLASS           reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    STRUCT          reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    ENUM            reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    DELEGATE        reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    IDENTIFIER      reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    LPAREN          reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    LBRACE          reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    $end            reduce using rule 293 (namespace_member_declaration -> type_declaration .)
    RBRACE          reduce using rule 293 (namespace_member_declaration -> type_declaration .)


state 15

    (360) enum_declaration -> ENUM . IDENTIFIER enum_base_opt enum_body smt_terminator_opt

    IDENTIFIER      shift and go to state 34


state 16

    (370) delegate_declaration -> LPAREN . formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (376) formal_parameter_list_opt -> . empty
    (377) formal_parameter_list_opt -> . formal_parameter_list
    (371) empty -> .
    (325) formal_parameter_list -> . fixed_parameters
    (326) formal_parameter_list -> . fixed_parameters COMMA parameter_array
    (327) formal_parameter_list -> . parameter_array
    (328) fixed_parameters -> . fixed_parameter
    (329) fixed_parameters -> . fixed_parameters COMMA fixed_parameter
    (332) parameter_array -> . PARAMS array_type IDENTIFIER
    (330) fixed_parameter -> . type IDENTIFIER default_argument_opt
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RPAREN          reduce using rule 371 (empty -> .)
    PARAMS          shift and go to state 54
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    parameter_array                shift and go to state 36
    formal_parameter_list_opt      shift and go to state 37
    empty                          shift and go to state 60
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    simple_type                    shift and go to state 40
    type                           shift and go to state 57
    class_type                     shift and go to state 59
    formal_parameter_list          shift and go to state 44
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    fixed_parameters               shift and go to state 41
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    fixed_parameter                shift and go to state 48
    type_name                      shift and go to state 50
    value_type                     shift and go to state 68

state 17

    (298) type_declaration -> class_declaration .

    NAMESPACE       reduce using rule 298 (type_declaration -> class_declaration .)
    CLASS           reduce using rule 298 (type_declaration -> class_declaration .)
    STRUCT          reduce using rule 298 (type_declaration -> class_declaration .)
    ENUM            reduce using rule 298 (type_declaration -> class_declaration .)
    DELEGATE        reduce using rule 298 (type_declaration -> class_declaration .)
    IDENTIFIER      reduce using rule 298 (type_declaration -> class_declaration .)
    LPAREN          reduce using rule 298 (type_declaration -> class_declaration .)
    LBRACE          reduce using rule 298 (type_declaration -> class_declaration .)
    $end            reduce using rule 298 (type_declaration -> class_declaration .)
    RBRACE          reduce using rule 298 (type_declaration -> class_declaration .)
    CONST           reduce using rule 298 (type_declaration -> class_declaration .)
    EXTERN          reduce using rule 298 (type_declaration -> class_declaration .)
    STATIC          reduce using rule 298 (type_declaration -> class_declaration .)
    VOID            reduce using rule 298 (type_declaration -> class_declaration .)
    OBJECT          reduce using rule 298 (type_declaration -> class_declaration .)
    STRING          reduce using rule 298 (type_declaration -> class_declaration .)
    BOOL            reduce using rule 298 (type_declaration -> class_declaration .)
    DECIMAL         reduce using rule 298 (type_declaration -> class_declaration .)
    SBYTE           reduce using rule 298 (type_declaration -> class_declaration .)
    BYTE            reduce using rule 298 (type_declaration -> class_declaration .)
    SHORT           reduce using rule 298 (type_declaration -> class_declaration .)
    USHORT          reduce using rule 298 (type_declaration -> class_declaration .)
    INT             reduce using rule 298 (type_declaration -> class_declaration .)
    UINT            reduce using rule 298 (type_declaration -> class_declaration .)
    LONG            reduce using rule 298 (type_declaration -> class_declaration .)
    ULONG           reduce using rule 298 (type_declaration -> class_declaration .)
    CHAR            reduce using rule 298 (type_declaration -> class_declaration .)
    FLOAT           reduce using rule 298 (type_declaration -> class_declaration .)
    DOUBLE          reduce using rule 298 (type_declaration -> class_declaration .)
    NOT             reduce using rule 298 (type_declaration -> class_declaration .)


state 18

    (300) type_declaration -> enum_declaration .

    NAMESPACE       reduce using rule 300 (type_declaration -> enum_declaration .)
    CLASS           reduce using rule 300 (type_declaration -> enum_declaration .)
    STRUCT          reduce using rule 300 (type_declaration -> enum_declaration .)
    ENUM            reduce using rule 300 (type_declaration -> enum_declaration .)
    DELEGATE        reduce using rule 300 (type_declaration -> enum_declaration .)
    IDENTIFIER      reduce using rule 300 (type_declaration -> enum_declaration .)
    LPAREN          reduce using rule 300 (type_declaration -> enum_declaration .)
    LBRACE          reduce using rule 300 (type_declaration -> enum_declaration .)
    $end            reduce using rule 300 (type_declaration -> enum_declaration .)
    RBRACE          reduce using rule 300 (type_declaration -> enum_declaration .)
    CONST           reduce using rule 300 (type_declaration -> enum_declaration .)
    EXTERN          reduce using rule 300 (type_declaration -> enum_declaration .)
    STATIC          reduce using rule 300 (type_declaration -> enum_declaration .)
    VOID            reduce using rule 300 (type_declaration -> enum_declaration .)
    OBJECT          reduce using rule 300 (type_declaration -> enum_declaration .)
    STRING          reduce using rule 300 (type_declaration -> enum_declaration .)
    BOOL            reduce using rule 300 (type_declaration -> enum_declaration .)
    DECIMAL         reduce using rule 300 (type_declaration -> enum_declaration .)
    SBYTE           reduce using rule 300 (type_declaration -> enum_declaration .)
    BYTE            reduce using rule 300 (type_declaration -> enum_declaration .)
    SHORT           reduce using rule 300 (type_declaration -> enum_declaration .)
    USHORT          reduce using rule 300 (type_declaration -> enum_declaration .)
    INT             reduce using rule 300 (type_declaration -> enum_declaration .)
    UINT            reduce using rule 300 (type_declaration -> enum_declaration .)
    LONG            reduce using rule 300 (type_declaration -> enum_declaration .)
    ULONG           reduce using rule 300 (type_declaration -> enum_declaration .)
    CHAR            reduce using rule 300 (type_declaration -> enum_declaration .)
    FLOAT           reduce using rule 300 (type_declaration -> enum_declaration .)
    DOUBLE          reduce using rule 300 (type_declaration -> enum_declaration .)
    NOT             reduce using rule 300 (type_declaration -> enum_declaration .)


state 19

    (299) type_declaration -> struct_declaration .

    NAMESPACE       reduce using rule 299 (type_declaration -> struct_declaration .)
    CLASS           reduce using rule 299 (type_declaration -> struct_declaration .)
    STRUCT          reduce using rule 299 (type_declaration -> struct_declaration .)
    ENUM            reduce using rule 299 (type_declaration -> struct_declaration .)
    DELEGATE        reduce using rule 299 (type_declaration -> struct_declaration .)
    IDENTIFIER      reduce using rule 299 (type_declaration -> struct_declaration .)
    LPAREN          reduce using rule 299 (type_declaration -> struct_declaration .)
    LBRACE          reduce using rule 299 (type_declaration -> struct_declaration .)
    $end            reduce using rule 299 (type_declaration -> struct_declaration .)
    RBRACE          reduce using rule 299 (type_declaration -> struct_declaration .)
    CONST           reduce using rule 299 (type_declaration -> struct_declaration .)
    EXTERN          reduce using rule 299 (type_declaration -> struct_declaration .)
    STATIC          reduce using rule 299 (type_declaration -> struct_declaration .)
    VOID            reduce using rule 299 (type_declaration -> struct_declaration .)
    OBJECT          reduce using rule 299 (type_declaration -> struct_declaration .)
    STRING          reduce using rule 299 (type_declaration -> struct_declaration .)
    BOOL            reduce using rule 299 (type_declaration -> struct_declaration .)
    DECIMAL         reduce using rule 299 (type_declaration -> struct_declaration .)
    SBYTE           reduce using rule 299 (type_declaration -> struct_declaration .)
    BYTE            reduce using rule 299 (type_declaration -> struct_declaration .)
    SHORT           reduce using rule 299 (type_declaration -> struct_declaration .)
    USHORT          reduce using rule 299 (type_declaration -> struct_declaration .)
    INT             reduce using rule 299 (type_declaration -> struct_declaration .)
    UINT            reduce using rule 299 (type_declaration -> struct_declaration .)
    LONG            reduce using rule 299 (type_declaration -> struct_declaration .)
    ULONG           reduce using rule 299 (type_declaration -> struct_declaration .)
    CHAR            reduce using rule 299 (type_declaration -> struct_declaration .)
    FLOAT           reduce using rule 299 (type_declaration -> struct_declaration .)
    DOUBLE          reduce using rule 299 (type_declaration -> struct_declaration .)
    NOT             reduce using rule 299 (type_declaration -> struct_declaration .)


state 20

    (369) delegate_declaration -> IDENTIFIER .

    NAMESPACE       reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    CLASS           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    STRUCT          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    ENUM            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    DELEGATE        reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    LPAREN          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    LBRACE          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    $end            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    RBRACE          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)


state 21

    (302) class_declaration -> CLASS . IDENTIFIER class_base_opt class_body smt_terminator_opt

    IDENTIFIER      shift and go to state 71


state 22

    (301) type_declaration -> delegate_declaration .

    NAMESPACE       reduce using rule 301 (type_declaration -> delegate_declaration .)
    CLASS           reduce using rule 301 (type_declaration -> delegate_declaration .)
    STRUCT          reduce using rule 301 (type_declaration -> delegate_declaration .)
    ENUM            reduce using rule 301 (type_declaration -> delegate_declaration .)
    DELEGATE        reduce using rule 301 (type_declaration -> delegate_declaration .)
    IDENTIFIER      reduce using rule 301 (type_declaration -> delegate_declaration .)
    LPAREN          reduce using rule 301 (type_declaration -> delegate_declaration .)
    LBRACE          reduce using rule 301 (type_declaration -> delegate_declaration .)
    $end            reduce using rule 301 (type_declaration -> delegate_declaration .)
    RBRACE          reduce using rule 301 (type_declaration -> delegate_declaration .)
    CONST           reduce using rule 301 (type_declaration -> delegate_declaration .)
    EXTERN          reduce using rule 301 (type_declaration -> delegate_declaration .)
    STATIC          reduce using rule 301 (type_declaration -> delegate_declaration .)
    VOID            reduce using rule 301 (type_declaration -> delegate_declaration .)
    OBJECT          reduce using rule 301 (type_declaration -> delegate_declaration .)
    STRING          reduce using rule 301 (type_declaration -> delegate_declaration .)
    BOOL            reduce using rule 301 (type_declaration -> delegate_declaration .)
    DECIMAL         reduce using rule 301 (type_declaration -> delegate_declaration .)
    SBYTE           reduce using rule 301 (type_declaration -> delegate_declaration .)
    BYTE            reduce using rule 301 (type_declaration -> delegate_declaration .)
    SHORT           reduce using rule 301 (type_declaration -> delegate_declaration .)
    USHORT          reduce using rule 301 (type_declaration -> delegate_declaration .)
    INT             reduce using rule 301 (type_declaration -> delegate_declaration .)
    UINT            reduce using rule 301 (type_declaration -> delegate_declaration .)
    LONG            reduce using rule 301 (type_declaration -> delegate_declaration .)
    ULONG           reduce using rule 301 (type_declaration -> delegate_declaration .)
    CHAR            reduce using rule 301 (type_declaration -> delegate_declaration .)
    FLOAT           reduce using rule 301 (type_declaration -> delegate_declaration .)
    DOUBLE          reduce using rule 301 (type_declaration -> delegate_declaration .)
    NOT             reduce using rule 301 (type_declaration -> delegate_declaration .)


state 23

    (1) compilation_unit -> using_directives_opt namespace_member_declarations_opt .

    $end            reduce using rule 1 (compilation_unit -> using_directives_opt namespace_member_declarations_opt .)


state 24

    (292) namespace_member_declaration -> namespace_declaration .

    NAMESPACE       reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    CLASS           reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    STRUCT          reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    ENUM            reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    DELEGATE        reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    IDENTIFIER      reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    LPAREN          reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    LBRACE          reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    $end            reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)
    RBRACE          reduce using rule 292 (namespace_member_declaration -> namespace_declaration .)


state 25

    (294) namespace_declaration -> NAMESPACE . qualified_identifier namespace_body smt_terminator_opt
    (295) qualified_identifier -> . IDENTIFIER
    (296) qualified_identifier -> . qualified_identifier MEMBERACCESS IDENTIFIER

    IDENTIFIER      shift and go to state 72

    qualified_identifier           shift and go to state 73

state 26

    (394) namespace_member_declarations_opt -> empty .

    $end            reduce using rule 394 (namespace_member_declarations_opt -> empty .)
    RBRACE          reduce using rule 394 (namespace_member_declarations_opt -> empty .)


state 27

    (368) delegate_declaration -> DELEGATE . return_type
    (322) return_type -> . type
    (323) return_type -> . VOID
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    VOID            shift and go to state 74
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    return_type                    shift and go to state 75
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 76
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 28

    (351) struct_body -> LBRACE . struct_member_declarations_opt RBRACE
    (412) struct_member_declarations_opt -> . empty
    (413) struct_member_declarations_opt -> . struct_member_declarations
    (371) empty -> .
    (352) struct_member_declarations -> . struct_member_declaration
    (353) struct_member_declarations -> . struct_member_declarations struct_member_declaration
    (354) struct_member_declaration -> . constant_declaration
    (355) struct_member_declaration -> . field_declaration
    (356) struct_member_declaration -> . method_declaration
    (357) struct_member_declaration -> . constructor_declaration
    (358) struct_member_declaration -> . static_constructor_declaration
    (359) struct_member_declaration -> . type_declaration
    (314) constant_declaration -> . CONST type constant_declarators STMT_TERMINATOR
    (315) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (320) method_declaration -> . method_header method_body
    (335) constructor_declaration -> . constructor_declarator constructor_body
    (344) static_constructor_declaration -> . static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (7) type -> . value_type
    (8) type -> . reference_type
    (321) method_header -> . return_type member_name LPAREN formal_parameter_list_opt RPAREN
    (336) constructor_declarator -> . IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
    (345) static_constructor_modifiers -> . extern_opt STATIC
    (346) static_constructor_modifiers -> . STATIC extern_opt
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (322) return_type -> . type
    (323) return_type -> . VOID
    (432) extern_opt -> . empty
    (433) extern_opt -> . EXTERN
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          reduce using rule 371 (empty -> .)
    CONST           shift and go to state 93
    IDENTIFIER      shift and go to state 80
    STATIC          shift and go to state 79
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    LPAREN          shift and go to state 16
    VOID            shift and go to state 74
    EXTERN          shift and go to state 84
    LBRACE          shift and go to state 28
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

  ! STATIC          [ reduce using rule 371 (empty -> .) ]

    static_constructor_modifiers   shift and go to state 77
    constructor_declaration        shift and go to state 78
    simple_type                    shift and go to state 40
    method_declaration             shift and go to state 81
    integral_type                  shift and go to state 62
    delegate_declaration           shift and go to state 22
    enum_declaration               shift and go to state 18
    struct_member_declarations_opt shift and go to state 92
    empty                          shift and go to state 83
    struct_type                    shift and go to state 42
    numeric_type                   shift and go to state 38
    type_name                      shift and go to state 50
    delegate_type                  shift and go to state 51
    field_declaration              shift and go to state 86
    method_header                  shift and go to state 85
    array_type                     shift and go to state 53
    constant_declaration           shift and go to state 87
    type_declaration               shift and go to state 88
    return_type                    shift and go to state 89
    class_declaration              shift and go to state 17
    namespace_or_type_name         shift and go to state 56
    struct_member_declaration      shift and go to state 90
    struct_declaration             shift and go to state 19
    type                           shift and go to state 91
    non_array_type                 shift and go to state 58
    class_type                     shift and go to state 59
    reference_type                 shift and go to state 61
    static_constructor_declaration shift and go to state 94
    extern_opt                     shift and go to state 95
    struct_member_declarations     shift and go to state 96
    constructor_declarator         shift and go to state 82
    struct_body                    shift and go to state 29
    floating_point_type            shift and go to state 70
    value_type                     shift and go to state 68

state 29

    (350) struct_declaration -> struct_body . smt_terminator_opt
    (380) smt_terminator_opt -> . empty
    (381) smt_terminator_opt -> . STMT_TERMINATOR
    (371) empty -> .

    STMT_TERMINATOR shift and go to state 97
    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    $end            reduce using rule 371 (empty -> .)
    CONST           reduce using rule 371 (empty -> .)
    STATIC          reduce using rule 371 (empty -> .)
    VOID            reduce using rule 371 (empty -> .)
    EXTERN          reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)

    empty                          shift and go to state 98
    smt_terminator_opt             shift and go to state 99

state 30

    (395) namespace_member_declarations_opt -> namespace_member_declarations .
    (291) namespace_member_declarations -> namespace_member_declarations . namespace_member_declaration
    (292) namespace_member_declaration -> . namespace_declaration
    (293) namespace_member_declaration -> . type_declaration
    (294) namespace_declaration -> . NAMESPACE qualified_identifier namespace_body smt_terminator_opt
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE

    $end            reduce using rule 395 (namespace_member_declarations_opt -> namespace_member_declarations .)
    RBRACE          reduce using rule 395 (namespace_member_declarations_opt -> namespace_member_declarations .)
    NAMESPACE       shift and go to state 25
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    IDENTIFIER      shift and go to state 20
    LPAREN          shift and go to state 16
    LBRACE          shift and go to state 28

    namespace_member_declaration   shift and go to state 100
    enum_declaration               shift and go to state 18
    type_declaration               shift and go to state 14
    class_declaration              shift and go to state 17
    struct_declaration             shift and go to state 19
    struct_body                    shift and go to state 29
    delegate_declaration           shift and go to state 22
    namespace_declaration          shift and go to state 24

state 31

    (6) namespace_or_type_name -> namespace_or_type_name MEMBERACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 101


state 32

    (46) using_namespace_directive -> USING namespace_name STMT_TERMINATOR .

    USING           reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    NAMESPACE       reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    CLASS           reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    STRUCT          reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    ENUM            reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    DELEGATE        reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    LPAREN          reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    LBRACE          reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    $end            reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)
    RBRACE          reduce using rule 46 (using_namespace_directive -> USING namespace_name STMT_TERMINATOR .)


state 33

    (349) struct_declaration -> STRUCT IDENTIFIER .

    NAMESPACE       reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    CLASS           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    STRUCT          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    ENUM            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    DELEGATE        reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    LPAREN          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    LBRACE          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    $end            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    CONST           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    EXTERN          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    STATIC          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    VOID            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    OBJECT          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    STRING          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    BOOL            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    DECIMAL         reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    SBYTE           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    BYTE            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    SHORT           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    USHORT          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    INT             reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    UINT            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    LONG            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    ULONG           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    CHAR            reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    FLOAT           reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    DOUBLE          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    NOT             reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)
    RBRACE          reduce using rule 349 (struct_declaration -> STRUCT IDENTIFIER .)


state 34

    (360) enum_declaration -> ENUM IDENTIFIER . enum_base_opt enum_body smt_terminator_opt
    (386) enum_base_opt -> . empty
    (387) enum_base_opt -> . enum_base
    (371) empty -> .
    (361) enum_base -> . COLON integral_type

    LBRACE          reduce using rule 371 (empty -> .)
    COLON           shift and go to state 103

    enum_base_opt                  shift and go to state 102
    empty                          shift and go to state 104
    enum_base                      shift and go to state 105

state 35

    (26) integral_type -> CHAR .

    LBRACE          reduce using rule 26 (integral_type -> CHAR .)
    RPAREN          reduce using rule 26 (integral_type -> CHAR .)
    LBRACKET        reduce using rule 26 (integral_type -> CHAR .)
    IDENTIFIER      reduce using rule 26 (integral_type -> CHAR .)
    LPAREN          reduce using rule 26 (integral_type -> CHAR .)
    LT              reduce using rule 26 (integral_type -> CHAR .)
    GT              reduce using rule 26 (integral_type -> CHAR .)
    LE              reduce using rule 26 (integral_type -> CHAR .)
    GE              reduce using rule 26 (integral_type -> CHAR .)
    IS              reduce using rule 26 (integral_type -> CHAR .)
    AS              reduce using rule 26 (integral_type -> CHAR .)
    EQ              reduce using rule 26 (integral_type -> CHAR .)
    NE              reduce using rule 26 (integral_type -> CHAR .)
    AND             reduce using rule 26 (integral_type -> CHAR .)
    XOR             reduce using rule 26 (integral_type -> CHAR .)
    OR              reduce using rule 26 (integral_type -> CHAR .)
    CAND            reduce using rule 26 (integral_type -> CHAR .)
    CONDOP          reduce using rule 26 (integral_type -> CHAR .)
    COR             reduce using rule 26 (integral_type -> CHAR .)
    COMMA           reduce using rule 26 (integral_type -> CHAR .)
    STMT_TERMINATOR reduce using rule 26 (integral_type -> CHAR .)
    RBRACE          reduce using rule 26 (integral_type -> CHAR .)
    COLON           reduce using rule 26 (integral_type -> CHAR .)
    RBRACKET        reduce using rule 26 (integral_type -> CHAR .)
    NAMESPACE       reduce using rule 26 (integral_type -> CHAR .)
    CLASS           reduce using rule 26 (integral_type -> CHAR .)
    STRUCT          reduce using rule 26 (integral_type -> CHAR .)
    ENUM            reduce using rule 26 (integral_type -> CHAR .)
    DELEGATE        reduce using rule 26 (integral_type -> CHAR .)
    $end            reduce using rule 26 (integral_type -> CHAR .)
    CONST           reduce using rule 26 (integral_type -> CHAR .)
    STATIC          reduce using rule 26 (integral_type -> CHAR .)
    VOID            reduce using rule 26 (integral_type -> CHAR .)
    EXTERN          reduce using rule 26 (integral_type -> CHAR .)
    OBJECT          reduce using rule 26 (integral_type -> CHAR .)
    STRING          reduce using rule 26 (integral_type -> CHAR .)
    BOOL            reduce using rule 26 (integral_type -> CHAR .)
    DECIMAL         reduce using rule 26 (integral_type -> CHAR .)
    SBYTE           reduce using rule 26 (integral_type -> CHAR .)
    BYTE            reduce using rule 26 (integral_type -> CHAR .)
    SHORT           reduce using rule 26 (integral_type -> CHAR .)
    USHORT          reduce using rule 26 (integral_type -> CHAR .)
    INT             reduce using rule 26 (integral_type -> CHAR .)
    UINT            reduce using rule 26 (integral_type -> CHAR .)
    LONG            reduce using rule 26 (integral_type -> CHAR .)
    ULONG           reduce using rule 26 (integral_type -> CHAR .)
    CHAR            reduce using rule 26 (integral_type -> CHAR .)
    FLOAT           reduce using rule 26 (integral_type -> CHAR .)
    DOUBLE          reduce using rule 26 (integral_type -> CHAR .)
    NOT             reduce using rule 26 (integral_type -> CHAR .)


state 36

    (327) formal_parameter_list -> parameter_array .

    RPAREN          reduce using rule 327 (formal_parameter_list -> parameter_array .)


state 37

    (370) delegate_declaration -> LPAREN formal_parameter_list_opt . RPAREN STMT_TERMINATOR

    RPAREN          shift and go to state 106


state 38

    (13) simple_type -> numeric_type .

    LPAREN          reduce using rule 13 (simple_type -> numeric_type .)
    LBRACE          reduce using rule 13 (simple_type -> numeric_type .)
    LBRACKET        reduce using rule 13 (simple_type -> numeric_type .)
    IDENTIFIER      reduce using rule 13 (simple_type -> numeric_type .)
    LT              reduce using rule 13 (simple_type -> numeric_type .)
    GT              reduce using rule 13 (simple_type -> numeric_type .)
    LE              reduce using rule 13 (simple_type -> numeric_type .)
    GE              reduce using rule 13 (simple_type -> numeric_type .)
    IS              reduce using rule 13 (simple_type -> numeric_type .)
    AS              reduce using rule 13 (simple_type -> numeric_type .)
    EQ              reduce using rule 13 (simple_type -> numeric_type .)
    NE              reduce using rule 13 (simple_type -> numeric_type .)
    AND             reduce using rule 13 (simple_type -> numeric_type .)
    XOR             reduce using rule 13 (simple_type -> numeric_type .)
    OR              reduce using rule 13 (simple_type -> numeric_type .)
    CAND            reduce using rule 13 (simple_type -> numeric_type .)
    CONDOP          reduce using rule 13 (simple_type -> numeric_type .)
    COR             reduce using rule 13 (simple_type -> numeric_type .)
    COMMA           reduce using rule 13 (simple_type -> numeric_type .)
    RPAREN          reduce using rule 13 (simple_type -> numeric_type .)
    STMT_TERMINATOR reduce using rule 13 (simple_type -> numeric_type .)
    RBRACE          reduce using rule 13 (simple_type -> numeric_type .)
    COLON           reduce using rule 13 (simple_type -> numeric_type .)
    RBRACKET        reduce using rule 13 (simple_type -> numeric_type .)
    NAMESPACE       reduce using rule 13 (simple_type -> numeric_type .)
    CLASS           reduce using rule 13 (simple_type -> numeric_type .)
    STRUCT          reduce using rule 13 (simple_type -> numeric_type .)
    ENUM            reduce using rule 13 (simple_type -> numeric_type .)
    DELEGATE        reduce using rule 13 (simple_type -> numeric_type .)
    $end            reduce using rule 13 (simple_type -> numeric_type .)
    CONST           reduce using rule 13 (simple_type -> numeric_type .)
    STATIC          reduce using rule 13 (simple_type -> numeric_type .)
    VOID            reduce using rule 13 (simple_type -> numeric_type .)
    EXTERN          reduce using rule 13 (simple_type -> numeric_type .)
    OBJECT          reduce using rule 13 (simple_type -> numeric_type .)
    STRING          reduce using rule 13 (simple_type -> numeric_type .)
    BOOL            reduce using rule 13 (simple_type -> numeric_type .)
    DECIMAL         reduce using rule 13 (simple_type -> numeric_type .)
    SBYTE           reduce using rule 13 (simple_type -> numeric_type .)
    BYTE            reduce using rule 13 (simple_type -> numeric_type .)
    SHORT           reduce using rule 13 (simple_type -> numeric_type .)
    USHORT          reduce using rule 13 (simple_type -> numeric_type .)
    INT             reduce using rule 13 (simple_type -> numeric_type .)
    UINT            reduce using rule 13 (simple_type -> numeric_type .)
    LONG            reduce using rule 13 (simple_type -> numeric_type .)
    ULONG           reduce using rule 13 (simple_type -> numeric_type .)
    CHAR            reduce using rule 13 (simple_type -> numeric_type .)
    FLOAT           reduce using rule 13 (simple_type -> numeric_type .)
    DOUBLE          reduce using rule 13 (simple_type -> numeric_type .)
    NOT             reduce using rule 13 (simple_type -> numeric_type .)


state 39

    (14) simple_type -> BOOL .

    LPAREN          reduce using rule 14 (simple_type -> BOOL .)
    LBRACE          reduce using rule 14 (simple_type -> BOOL .)
    LBRACKET        reduce using rule 14 (simple_type -> BOOL .)
    IDENTIFIER      reduce using rule 14 (simple_type -> BOOL .)
    LT              reduce using rule 14 (simple_type -> BOOL .)
    GT              reduce using rule 14 (simple_type -> BOOL .)
    LE              reduce using rule 14 (simple_type -> BOOL .)
    GE              reduce using rule 14 (simple_type -> BOOL .)
    IS              reduce using rule 14 (simple_type -> BOOL .)
    AS              reduce using rule 14 (simple_type -> BOOL .)
    EQ              reduce using rule 14 (simple_type -> BOOL .)
    NE              reduce using rule 14 (simple_type -> BOOL .)
    AND             reduce using rule 14 (simple_type -> BOOL .)
    XOR             reduce using rule 14 (simple_type -> BOOL .)
    OR              reduce using rule 14 (simple_type -> BOOL .)
    CAND            reduce using rule 14 (simple_type -> BOOL .)
    CONDOP          reduce using rule 14 (simple_type -> BOOL .)
    COR             reduce using rule 14 (simple_type -> BOOL .)
    COMMA           reduce using rule 14 (simple_type -> BOOL .)
    RPAREN          reduce using rule 14 (simple_type -> BOOL .)
    STMT_TERMINATOR reduce using rule 14 (simple_type -> BOOL .)
    RBRACE          reduce using rule 14 (simple_type -> BOOL .)
    COLON           reduce using rule 14 (simple_type -> BOOL .)
    RBRACKET        reduce using rule 14 (simple_type -> BOOL .)
    NAMESPACE       reduce using rule 14 (simple_type -> BOOL .)
    CLASS           reduce using rule 14 (simple_type -> BOOL .)
    STRUCT          reduce using rule 14 (simple_type -> BOOL .)
    ENUM            reduce using rule 14 (simple_type -> BOOL .)
    DELEGATE        reduce using rule 14 (simple_type -> BOOL .)
    $end            reduce using rule 14 (simple_type -> BOOL .)
    CONST           reduce using rule 14 (simple_type -> BOOL .)
    STATIC          reduce using rule 14 (simple_type -> BOOL .)
    VOID            reduce using rule 14 (simple_type -> BOOL .)
    EXTERN          reduce using rule 14 (simple_type -> BOOL .)
    OBJECT          reduce using rule 14 (simple_type -> BOOL .)
    STRING          reduce using rule 14 (simple_type -> BOOL .)
    BOOL            reduce using rule 14 (simple_type -> BOOL .)
    DECIMAL         reduce using rule 14 (simple_type -> BOOL .)
    SBYTE           reduce using rule 14 (simple_type -> BOOL .)
    BYTE            reduce using rule 14 (simple_type -> BOOL .)
    SHORT           reduce using rule 14 (simple_type -> BOOL .)
    USHORT          reduce using rule 14 (simple_type -> BOOL .)
    INT             reduce using rule 14 (simple_type -> BOOL .)
    UINT            reduce using rule 14 (simple_type -> BOOL .)
    LONG            reduce using rule 14 (simple_type -> BOOL .)
    ULONG           reduce using rule 14 (simple_type -> BOOL .)
    CHAR            reduce using rule 14 (simple_type -> BOOL .)
    FLOAT           reduce using rule 14 (simple_type -> BOOL .)
    DOUBLE          reduce using rule 14 (simple_type -> BOOL .)
    NOT             reduce using rule 14 (simple_type -> BOOL .)


state 40

    (11) struct_type -> simple_type .

    LPAREN          reduce using rule 11 (struct_type -> simple_type .)
    LBRACE          reduce using rule 11 (struct_type -> simple_type .)
    LBRACKET        reduce using rule 11 (struct_type -> simple_type .)
    IDENTIFIER      reduce using rule 11 (struct_type -> simple_type .)
    RPAREN          reduce using rule 11 (struct_type -> simple_type .)
    LT              reduce using rule 11 (struct_type -> simple_type .)
    GT              reduce using rule 11 (struct_type -> simple_type .)
    LE              reduce using rule 11 (struct_type -> simple_type .)
    GE              reduce using rule 11 (struct_type -> simple_type .)
    IS              reduce using rule 11 (struct_type -> simple_type .)
    AS              reduce using rule 11 (struct_type -> simple_type .)
    EQ              reduce using rule 11 (struct_type -> simple_type .)
    NE              reduce using rule 11 (struct_type -> simple_type .)
    AND             reduce using rule 11 (struct_type -> simple_type .)
    XOR             reduce using rule 11 (struct_type -> simple_type .)
    OR              reduce using rule 11 (struct_type -> simple_type .)
    CAND            reduce using rule 11 (struct_type -> simple_type .)
    CONDOP          reduce using rule 11 (struct_type -> simple_type .)
    COR             reduce using rule 11 (struct_type -> simple_type .)
    COMMA           reduce using rule 11 (struct_type -> simple_type .)
    STMT_TERMINATOR reduce using rule 11 (struct_type -> simple_type .)
    RBRACE          reduce using rule 11 (struct_type -> simple_type .)
    COLON           reduce using rule 11 (struct_type -> simple_type .)
    RBRACKET        reduce using rule 11 (struct_type -> simple_type .)
    NAMESPACE       reduce using rule 11 (struct_type -> simple_type .)
    CLASS           reduce using rule 11 (struct_type -> simple_type .)
    STRUCT          reduce using rule 11 (struct_type -> simple_type .)
    ENUM            reduce using rule 11 (struct_type -> simple_type .)
    DELEGATE        reduce using rule 11 (struct_type -> simple_type .)
    $end            reduce using rule 11 (struct_type -> simple_type .)
    CONST           reduce using rule 11 (struct_type -> simple_type .)
    STATIC          reduce using rule 11 (struct_type -> simple_type .)
    VOID            reduce using rule 11 (struct_type -> simple_type .)
    EXTERN          reduce using rule 11 (struct_type -> simple_type .)
    OBJECT          reduce using rule 11 (struct_type -> simple_type .)
    STRING          reduce using rule 11 (struct_type -> simple_type .)
    BOOL            reduce using rule 11 (struct_type -> simple_type .)
    DECIMAL         reduce using rule 11 (struct_type -> simple_type .)
    SBYTE           reduce using rule 11 (struct_type -> simple_type .)
    BYTE            reduce using rule 11 (struct_type -> simple_type .)
    SHORT           reduce using rule 11 (struct_type -> simple_type .)
    USHORT          reduce using rule 11 (struct_type -> simple_type .)
    INT             reduce using rule 11 (struct_type -> simple_type .)
    UINT            reduce using rule 11 (struct_type -> simple_type .)
    LONG            reduce using rule 11 (struct_type -> simple_type .)
    ULONG           reduce using rule 11 (struct_type -> simple_type .)
    CHAR            reduce using rule 11 (struct_type -> simple_type .)
    FLOAT           reduce using rule 11 (struct_type -> simple_type .)
    DOUBLE          reduce using rule 11 (struct_type -> simple_type .)
    NOT             reduce using rule 11 (struct_type -> simple_type .)


state 41

    (325) formal_parameter_list -> fixed_parameters .
    (326) formal_parameter_list -> fixed_parameters . COMMA parameter_array
    (329) fixed_parameters -> fixed_parameters . COMMA fixed_parameter

    RPAREN          reduce using rule 325 (formal_parameter_list -> fixed_parameters .)
    COMMA           shift and go to state 107


state 42

    (9) value_type -> struct_type .

    RPAREN          reduce using rule 9 (value_type -> struct_type .)
    LBRACKET        reduce using rule 9 (value_type -> struct_type .)
    IDENTIFIER      reduce using rule 9 (value_type -> struct_type .)
    LT              reduce using rule 9 (value_type -> struct_type .)
    GT              reduce using rule 9 (value_type -> struct_type .)
    LE              reduce using rule 9 (value_type -> struct_type .)
    GE              reduce using rule 9 (value_type -> struct_type .)
    IS              reduce using rule 9 (value_type -> struct_type .)
    AS              reduce using rule 9 (value_type -> struct_type .)
    EQ              reduce using rule 9 (value_type -> struct_type .)
    NE              reduce using rule 9 (value_type -> struct_type .)
    AND             reduce using rule 9 (value_type -> struct_type .)
    XOR             reduce using rule 9 (value_type -> struct_type .)
    OR              reduce using rule 9 (value_type -> struct_type .)
    CAND            reduce using rule 9 (value_type -> struct_type .)
    CONDOP          reduce using rule 9 (value_type -> struct_type .)
    COR             reduce using rule 9 (value_type -> struct_type .)
    COMMA           reduce using rule 9 (value_type -> struct_type .)
    STMT_TERMINATOR reduce using rule 9 (value_type -> struct_type .)
    RBRACE          reduce using rule 9 (value_type -> struct_type .)
    COLON           reduce using rule 9 (value_type -> struct_type .)
    RBRACKET        reduce using rule 9 (value_type -> struct_type .)
    LPAREN          reduce using rule 9 (value_type -> struct_type .)
    LBRACE          reduce using rule 9 (value_type -> struct_type .)
    NAMESPACE       reduce using rule 9 (value_type -> struct_type .)
    CLASS           reduce using rule 9 (value_type -> struct_type .)
    STRUCT          reduce using rule 9 (value_type -> struct_type .)
    ENUM            reduce using rule 9 (value_type -> struct_type .)
    DELEGATE        reduce using rule 9 (value_type -> struct_type .)
    $end            reduce using rule 9 (value_type -> struct_type .)
    CONST           reduce using rule 9 (value_type -> struct_type .)
    STATIC          reduce using rule 9 (value_type -> struct_type .)
    VOID            reduce using rule 9 (value_type -> struct_type .)
    EXTERN          reduce using rule 9 (value_type -> struct_type .)
    OBJECT          reduce using rule 9 (value_type -> struct_type .)
    STRING          reduce using rule 9 (value_type -> struct_type .)
    BOOL            reduce using rule 9 (value_type -> struct_type .)
    DECIMAL         reduce using rule 9 (value_type -> struct_type .)
    SBYTE           reduce using rule 9 (value_type -> struct_type .)
    BYTE            reduce using rule 9 (value_type -> struct_type .)
    SHORT           reduce using rule 9 (value_type -> struct_type .)
    USHORT          reduce using rule 9 (value_type -> struct_type .)
    INT             reduce using rule 9 (value_type -> struct_type .)
    UINT            reduce using rule 9 (value_type -> struct_type .)
    LONG            reduce using rule 9 (value_type -> struct_type .)
    ULONG           reduce using rule 9 (value_type -> struct_type .)
    CHAR            reduce using rule 9 (value_type -> struct_type .)
    FLOAT           reduce using rule 9 (value_type -> struct_type .)
    DOUBLE          reduce using rule 9 (value_type -> struct_type .)
    NOT             reduce using rule 9 (value_type -> struct_type .)


state 43

    (34) class_type -> STRING .

    LT              reduce using rule 34 (class_type -> STRING .)
    GT              reduce using rule 34 (class_type -> STRING .)
    LE              reduce using rule 34 (class_type -> STRING .)
    GE              reduce using rule 34 (class_type -> STRING .)
    IS              reduce using rule 34 (class_type -> STRING .)
    AS              reduce using rule 34 (class_type -> STRING .)
    EQ              reduce using rule 34 (class_type -> STRING .)
    NE              reduce using rule 34 (class_type -> STRING .)
    AND             reduce using rule 34 (class_type -> STRING .)
    XOR             reduce using rule 34 (class_type -> STRING .)
    OR              reduce using rule 34 (class_type -> STRING .)
    CAND            reduce using rule 34 (class_type -> STRING .)
    CONDOP          reduce using rule 34 (class_type -> STRING .)
    COR             reduce using rule 34 (class_type -> STRING .)
    COMMA           reduce using rule 34 (class_type -> STRING .)
    RPAREN          reduce using rule 34 (class_type -> STRING .)
    STMT_TERMINATOR reduce using rule 34 (class_type -> STRING .)
    RBRACE          reduce using rule 34 (class_type -> STRING .)
    COLON           reduce using rule 34 (class_type -> STRING .)
    RBRACKET        reduce using rule 34 (class_type -> STRING .)
    LBRACKET        reduce using rule 34 (class_type -> STRING .)
    IDENTIFIER      reduce using rule 34 (class_type -> STRING .)
    LBRACE          reduce using rule 34 (class_type -> STRING .)
    LPAREN          reduce using rule 34 (class_type -> STRING .)
    NAMESPACE       reduce using rule 34 (class_type -> STRING .)
    CLASS           reduce using rule 34 (class_type -> STRING .)
    STRUCT          reduce using rule 34 (class_type -> STRING .)
    ENUM            reduce using rule 34 (class_type -> STRING .)
    DELEGATE        reduce using rule 34 (class_type -> STRING .)
    $end            reduce using rule 34 (class_type -> STRING .)
    CONST           reduce using rule 34 (class_type -> STRING .)
    STATIC          reduce using rule 34 (class_type -> STRING .)
    VOID            reduce using rule 34 (class_type -> STRING .)
    EXTERN          reduce using rule 34 (class_type -> STRING .)
    OBJECT          reduce using rule 34 (class_type -> STRING .)
    STRING          reduce using rule 34 (class_type -> STRING .)
    BOOL            reduce using rule 34 (class_type -> STRING .)
    DECIMAL         reduce using rule 34 (class_type -> STRING .)
    SBYTE           reduce using rule 34 (class_type -> STRING .)
    BYTE            reduce using rule 34 (class_type -> STRING .)
    SHORT           reduce using rule 34 (class_type -> STRING .)
    USHORT          reduce using rule 34 (class_type -> STRING .)
    INT             reduce using rule 34 (class_type -> STRING .)
    UINT            reduce using rule 34 (class_type -> STRING .)
    LONG            reduce using rule 34 (class_type -> STRING .)
    ULONG           reduce using rule 34 (class_type -> STRING .)
    CHAR            reduce using rule 34 (class_type -> STRING .)
    FLOAT           reduce using rule 34 (class_type -> STRING .)
    DOUBLE          reduce using rule 34 (class_type -> STRING .)
    NOT             reduce using rule 34 (class_type -> STRING .)


state 44

    (377) formal_parameter_list_opt -> formal_parameter_list .

    RPAREN          reduce using rule 377 (formal_parameter_list_opt -> formal_parameter_list .)


state 45

    (18) integral_type -> SBYTE .

    LBRACE          reduce using rule 18 (integral_type -> SBYTE .)
    RPAREN          reduce using rule 18 (integral_type -> SBYTE .)
    LBRACKET        reduce using rule 18 (integral_type -> SBYTE .)
    IDENTIFIER      reduce using rule 18 (integral_type -> SBYTE .)
    LPAREN          reduce using rule 18 (integral_type -> SBYTE .)
    LT              reduce using rule 18 (integral_type -> SBYTE .)
    GT              reduce using rule 18 (integral_type -> SBYTE .)
    LE              reduce using rule 18 (integral_type -> SBYTE .)
    GE              reduce using rule 18 (integral_type -> SBYTE .)
    IS              reduce using rule 18 (integral_type -> SBYTE .)
    AS              reduce using rule 18 (integral_type -> SBYTE .)
    EQ              reduce using rule 18 (integral_type -> SBYTE .)
    NE              reduce using rule 18 (integral_type -> SBYTE .)
    AND             reduce using rule 18 (integral_type -> SBYTE .)
    XOR             reduce using rule 18 (integral_type -> SBYTE .)
    OR              reduce using rule 18 (integral_type -> SBYTE .)
    CAND            reduce using rule 18 (integral_type -> SBYTE .)
    CONDOP          reduce using rule 18 (integral_type -> SBYTE .)
    COR             reduce using rule 18 (integral_type -> SBYTE .)
    COMMA           reduce using rule 18 (integral_type -> SBYTE .)
    STMT_TERMINATOR reduce using rule 18 (integral_type -> SBYTE .)
    RBRACE          reduce using rule 18 (integral_type -> SBYTE .)
    COLON           reduce using rule 18 (integral_type -> SBYTE .)
    RBRACKET        reduce using rule 18 (integral_type -> SBYTE .)
    NAMESPACE       reduce using rule 18 (integral_type -> SBYTE .)
    CLASS           reduce using rule 18 (integral_type -> SBYTE .)
    STRUCT          reduce using rule 18 (integral_type -> SBYTE .)
    ENUM            reduce using rule 18 (integral_type -> SBYTE .)
    DELEGATE        reduce using rule 18 (integral_type -> SBYTE .)
    $end            reduce using rule 18 (integral_type -> SBYTE .)
    CONST           reduce using rule 18 (integral_type -> SBYTE .)
    STATIC          reduce using rule 18 (integral_type -> SBYTE .)
    VOID            reduce using rule 18 (integral_type -> SBYTE .)
    EXTERN          reduce using rule 18 (integral_type -> SBYTE .)
    OBJECT          reduce using rule 18 (integral_type -> SBYTE .)
    STRING          reduce using rule 18 (integral_type -> SBYTE .)
    BOOL            reduce using rule 18 (integral_type -> SBYTE .)
    DECIMAL         reduce using rule 18 (integral_type -> SBYTE .)
    SBYTE           reduce using rule 18 (integral_type -> SBYTE .)
    BYTE            reduce using rule 18 (integral_type -> SBYTE .)
    SHORT           reduce using rule 18 (integral_type -> SBYTE .)
    USHORT          reduce using rule 18 (integral_type -> SBYTE .)
    INT             reduce using rule 18 (integral_type -> SBYTE .)
    UINT            reduce using rule 18 (integral_type -> SBYTE .)
    LONG            reduce using rule 18 (integral_type -> SBYTE .)
    ULONG           reduce using rule 18 (integral_type -> SBYTE .)
    CHAR            reduce using rule 18 (integral_type -> SBYTE .)
    FLOAT           reduce using rule 18 (integral_type -> SBYTE .)
    DOUBLE          reduce using rule 18 (integral_type -> SBYTE .)
    NOT             reduce using rule 18 (integral_type -> SBYTE .)


state 46

    (22) integral_type -> INT .

    LBRACE          reduce using rule 22 (integral_type -> INT .)
    RPAREN          reduce using rule 22 (integral_type -> INT .)
    LBRACKET        reduce using rule 22 (integral_type -> INT .)
    IDENTIFIER      reduce using rule 22 (integral_type -> INT .)
    LPAREN          reduce using rule 22 (integral_type -> INT .)
    LT              reduce using rule 22 (integral_type -> INT .)
    GT              reduce using rule 22 (integral_type -> INT .)
    LE              reduce using rule 22 (integral_type -> INT .)
    GE              reduce using rule 22 (integral_type -> INT .)
    IS              reduce using rule 22 (integral_type -> INT .)
    AS              reduce using rule 22 (integral_type -> INT .)
    EQ              reduce using rule 22 (integral_type -> INT .)
    NE              reduce using rule 22 (integral_type -> INT .)
    AND             reduce using rule 22 (integral_type -> INT .)
    XOR             reduce using rule 22 (integral_type -> INT .)
    OR              reduce using rule 22 (integral_type -> INT .)
    CAND            reduce using rule 22 (integral_type -> INT .)
    CONDOP          reduce using rule 22 (integral_type -> INT .)
    COR             reduce using rule 22 (integral_type -> INT .)
    COMMA           reduce using rule 22 (integral_type -> INT .)
    STMT_TERMINATOR reduce using rule 22 (integral_type -> INT .)
    RBRACE          reduce using rule 22 (integral_type -> INT .)
    COLON           reduce using rule 22 (integral_type -> INT .)
    RBRACKET        reduce using rule 22 (integral_type -> INT .)
    NAMESPACE       reduce using rule 22 (integral_type -> INT .)
    CLASS           reduce using rule 22 (integral_type -> INT .)
    STRUCT          reduce using rule 22 (integral_type -> INT .)
    ENUM            reduce using rule 22 (integral_type -> INT .)
    DELEGATE        reduce using rule 22 (integral_type -> INT .)
    $end            reduce using rule 22 (integral_type -> INT .)
    CONST           reduce using rule 22 (integral_type -> INT .)
    STATIC          reduce using rule 22 (integral_type -> INT .)
    VOID            reduce using rule 22 (integral_type -> INT .)
    EXTERN          reduce using rule 22 (integral_type -> INT .)
    OBJECT          reduce using rule 22 (integral_type -> INT .)
    STRING          reduce using rule 22 (integral_type -> INT .)
    BOOL            reduce using rule 22 (integral_type -> INT .)
    DECIMAL         reduce using rule 22 (integral_type -> INT .)
    SBYTE           reduce using rule 22 (integral_type -> INT .)
    BYTE            reduce using rule 22 (integral_type -> INT .)
    SHORT           reduce using rule 22 (integral_type -> INT .)
    USHORT          reduce using rule 22 (integral_type -> INT .)
    INT             reduce using rule 22 (integral_type -> INT .)
    UINT            reduce using rule 22 (integral_type -> INT .)
    LONG            reduce using rule 22 (integral_type -> INT .)
    ULONG           reduce using rule 22 (integral_type -> INT .)
    CHAR            reduce using rule 22 (integral_type -> INT .)
    FLOAT           reduce using rule 22 (integral_type -> INT .)
    DOUBLE          reduce using rule 22 (integral_type -> INT .)
    NOT             reduce using rule 22 (integral_type -> INT .)


state 47

    (25) integral_type -> ULONG .

    LBRACE          reduce using rule 25 (integral_type -> ULONG .)
    RPAREN          reduce using rule 25 (integral_type -> ULONG .)
    LBRACKET        reduce using rule 25 (integral_type -> ULONG .)
    IDENTIFIER      reduce using rule 25 (integral_type -> ULONG .)
    LPAREN          reduce using rule 25 (integral_type -> ULONG .)
    LT              reduce using rule 25 (integral_type -> ULONG .)
    GT              reduce using rule 25 (integral_type -> ULONG .)
    LE              reduce using rule 25 (integral_type -> ULONG .)
    GE              reduce using rule 25 (integral_type -> ULONG .)
    IS              reduce using rule 25 (integral_type -> ULONG .)
    AS              reduce using rule 25 (integral_type -> ULONG .)
    EQ              reduce using rule 25 (integral_type -> ULONG .)
    NE              reduce using rule 25 (integral_type -> ULONG .)
    AND             reduce using rule 25 (integral_type -> ULONG .)
    XOR             reduce using rule 25 (integral_type -> ULONG .)
    OR              reduce using rule 25 (integral_type -> ULONG .)
    CAND            reduce using rule 25 (integral_type -> ULONG .)
    CONDOP          reduce using rule 25 (integral_type -> ULONG .)
    COR             reduce using rule 25 (integral_type -> ULONG .)
    COMMA           reduce using rule 25 (integral_type -> ULONG .)
    STMT_TERMINATOR reduce using rule 25 (integral_type -> ULONG .)
    RBRACE          reduce using rule 25 (integral_type -> ULONG .)
    COLON           reduce using rule 25 (integral_type -> ULONG .)
    RBRACKET        reduce using rule 25 (integral_type -> ULONG .)
    NAMESPACE       reduce using rule 25 (integral_type -> ULONG .)
    CLASS           reduce using rule 25 (integral_type -> ULONG .)
    STRUCT          reduce using rule 25 (integral_type -> ULONG .)
    ENUM            reduce using rule 25 (integral_type -> ULONG .)
    DELEGATE        reduce using rule 25 (integral_type -> ULONG .)
    $end            reduce using rule 25 (integral_type -> ULONG .)
    CONST           reduce using rule 25 (integral_type -> ULONG .)
    STATIC          reduce using rule 25 (integral_type -> ULONG .)
    VOID            reduce using rule 25 (integral_type -> ULONG .)
    EXTERN          reduce using rule 25 (integral_type -> ULONG .)
    OBJECT          reduce using rule 25 (integral_type -> ULONG .)
    STRING          reduce using rule 25 (integral_type -> ULONG .)
    BOOL            reduce using rule 25 (integral_type -> ULONG .)
    DECIMAL         reduce using rule 25 (integral_type -> ULONG .)
    SBYTE           reduce using rule 25 (integral_type -> ULONG .)
    BYTE            reduce using rule 25 (integral_type -> ULONG .)
    SHORT           reduce using rule 25 (integral_type -> ULONG .)
    USHORT          reduce using rule 25 (integral_type -> ULONG .)
    INT             reduce using rule 25 (integral_type -> ULONG .)
    UINT            reduce using rule 25 (integral_type -> ULONG .)
    LONG            reduce using rule 25 (integral_type -> ULONG .)
    ULONG           reduce using rule 25 (integral_type -> ULONG .)
    CHAR            reduce using rule 25 (integral_type -> ULONG .)
    FLOAT           reduce using rule 25 (integral_type -> ULONG .)
    DOUBLE          reduce using rule 25 (integral_type -> ULONG .)
    NOT             reduce using rule 25 (integral_type -> ULONG .)


state 48

    (328) fixed_parameters -> fixed_parameter .

    COMMA           reduce using rule 328 (fixed_parameters -> fixed_parameter .)
    RPAREN          reduce using rule 328 (fixed_parameters -> fixed_parameter .)


state 49

    (33) class_type -> OBJECT .

    LT              reduce using rule 33 (class_type -> OBJECT .)
    GT              reduce using rule 33 (class_type -> OBJECT .)
    LE              reduce using rule 33 (class_type -> OBJECT .)
    GE              reduce using rule 33 (class_type -> OBJECT .)
    IS              reduce using rule 33 (class_type -> OBJECT .)
    AS              reduce using rule 33 (class_type -> OBJECT .)
    EQ              reduce using rule 33 (class_type -> OBJECT .)
    NE              reduce using rule 33 (class_type -> OBJECT .)
    AND             reduce using rule 33 (class_type -> OBJECT .)
    XOR             reduce using rule 33 (class_type -> OBJECT .)
    OR              reduce using rule 33 (class_type -> OBJECT .)
    CAND            reduce using rule 33 (class_type -> OBJECT .)
    CONDOP          reduce using rule 33 (class_type -> OBJECT .)
    COR             reduce using rule 33 (class_type -> OBJECT .)
    COMMA           reduce using rule 33 (class_type -> OBJECT .)
    RPAREN          reduce using rule 33 (class_type -> OBJECT .)
    STMT_TERMINATOR reduce using rule 33 (class_type -> OBJECT .)
    RBRACE          reduce using rule 33 (class_type -> OBJECT .)
    COLON           reduce using rule 33 (class_type -> OBJECT .)
    RBRACKET        reduce using rule 33 (class_type -> OBJECT .)
    LBRACKET        reduce using rule 33 (class_type -> OBJECT .)
    IDENTIFIER      reduce using rule 33 (class_type -> OBJECT .)
    LBRACE          reduce using rule 33 (class_type -> OBJECT .)
    LPAREN          reduce using rule 33 (class_type -> OBJECT .)
    NAMESPACE       reduce using rule 33 (class_type -> OBJECT .)
    CLASS           reduce using rule 33 (class_type -> OBJECT .)
    STRUCT          reduce using rule 33 (class_type -> OBJECT .)
    ENUM            reduce using rule 33 (class_type -> OBJECT .)
    DELEGATE        reduce using rule 33 (class_type -> OBJECT .)
    $end            reduce using rule 33 (class_type -> OBJECT .)
    CONST           reduce using rule 33 (class_type -> OBJECT .)
    STATIC          reduce using rule 33 (class_type -> OBJECT .)
    VOID            reduce using rule 33 (class_type -> OBJECT .)
    EXTERN          reduce using rule 33 (class_type -> OBJECT .)
    OBJECT          reduce using rule 33 (class_type -> OBJECT .)
    STRING          reduce using rule 33 (class_type -> OBJECT .)
    BOOL            reduce using rule 33 (class_type -> OBJECT .)
    DECIMAL         reduce using rule 33 (class_type -> OBJECT .)
    SBYTE           reduce using rule 33 (class_type -> OBJECT .)
    BYTE            reduce using rule 33 (class_type -> OBJECT .)
    SHORT           reduce using rule 33 (class_type -> OBJECT .)
    USHORT          reduce using rule 33 (class_type -> OBJECT .)
    INT             reduce using rule 33 (class_type -> OBJECT .)
    UINT            reduce using rule 33 (class_type -> OBJECT .)
    LONG            reduce using rule 33 (class_type -> OBJECT .)
    ULONG           reduce using rule 33 (class_type -> OBJECT .)
    CHAR            reduce using rule 33 (class_type -> OBJECT .)
    FLOAT           reduce using rule 33 (class_type -> OBJECT .)
    DOUBLE          reduce using rule 33 (class_type -> OBJECT .)
    NOT             reduce using rule 33 (class_type -> OBJECT .)


state 50

    (10) struct_type -> type_name .
    (32) class_type -> type_name .
    (45) delegate_type -> type_name .

  ! reduce/reduce conflict for LT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for GT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for GE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for IS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for AS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for EQ resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for AND resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for XOR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for OR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CAND resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CONDOP resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STMT_TERMINATOR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COLON resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STRUCT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for ENUM resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DELEGATE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for $end resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CONST resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STATIC resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for VOID resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for EXTERN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for OBJECT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for BOOL resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for SBYTE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for BYTE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for SHORT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for USHORT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for INT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for UINT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LONG resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for ULONG resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CHAR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STRUCT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for ENUM resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DELEGATE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for $end resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CONST resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STATIC resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for VOID resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for EXTERN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for OBJECT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for BOOL resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for SBYTE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for BYTE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for SHORT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for USHORT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for INT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for UINT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LONG resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for ULONG resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CHAR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for GT resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for GE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for IS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for AS resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for EQ resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for NE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for AND resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for XOR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for OR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CAND resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for CONDOP resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for STMT_TERMINATOR resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for COLON resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 10 (struct_type -> type_name .)
    IDENTIFIER      reduce using rule 10 (struct_type -> type_name .)
    LBRACKET        reduce using rule 10 (struct_type -> type_name .)
    RPAREN          reduce using rule 10 (struct_type -> type_name .)
    LT              reduce using rule 10 (struct_type -> type_name .)
    GT              reduce using rule 10 (struct_type -> type_name .)
    LE              reduce using rule 10 (struct_type -> type_name .)
    GE              reduce using rule 10 (struct_type -> type_name .)
    IS              reduce using rule 10 (struct_type -> type_name .)
    AS              reduce using rule 10 (struct_type -> type_name .)
    EQ              reduce using rule 10 (struct_type -> type_name .)
    NE              reduce using rule 10 (struct_type -> type_name .)
    AND             reduce using rule 10 (struct_type -> type_name .)
    XOR             reduce using rule 10 (struct_type -> type_name .)
    OR              reduce using rule 10 (struct_type -> type_name .)
    CAND            reduce using rule 10 (struct_type -> type_name .)
    CONDOP          reduce using rule 10 (struct_type -> type_name .)
    COR             reduce using rule 10 (struct_type -> type_name .)
    COMMA           reduce using rule 10 (struct_type -> type_name .)
    STMT_TERMINATOR reduce using rule 10 (struct_type -> type_name .)
    RBRACE          reduce using rule 10 (struct_type -> type_name .)
    COLON           reduce using rule 10 (struct_type -> type_name .)
    RBRACKET        reduce using rule 10 (struct_type -> type_name .)
    NAMESPACE       reduce using rule 10 (struct_type -> type_name .)
    CLASS           reduce using rule 10 (struct_type -> type_name .)
    STRUCT          reduce using rule 10 (struct_type -> type_name .)
    ENUM            reduce using rule 10 (struct_type -> type_name .)
    DELEGATE        reduce using rule 10 (struct_type -> type_name .)
    LPAREN          reduce using rule 10 (struct_type -> type_name .)
    LBRACE          reduce using rule 10 (struct_type -> type_name .)
    $end            reduce using rule 10 (struct_type -> type_name .)
    CONST           reduce using rule 10 (struct_type -> type_name .)
    STATIC          reduce using rule 10 (struct_type -> type_name .)
    VOID            reduce using rule 10 (struct_type -> type_name .)
    EXTERN          reduce using rule 10 (struct_type -> type_name .)
    OBJECT          reduce using rule 10 (struct_type -> type_name .)
    STRING          reduce using rule 10 (struct_type -> type_name .)
    BOOL            reduce using rule 10 (struct_type -> type_name .)
    DECIMAL         reduce using rule 10 (struct_type -> type_name .)
    SBYTE           reduce using rule 10 (struct_type -> type_name .)
    BYTE            reduce using rule 10 (struct_type -> type_name .)
    SHORT           reduce using rule 10 (struct_type -> type_name .)
    USHORT          reduce using rule 10 (struct_type -> type_name .)
    INT             reduce using rule 10 (struct_type -> type_name .)
    UINT            reduce using rule 10 (struct_type -> type_name .)
    LONG            reduce using rule 10 (struct_type -> type_name .)
    ULONG           reduce using rule 10 (struct_type -> type_name .)
    CHAR            reduce using rule 10 (struct_type -> type_name .)
    FLOAT           reduce using rule 10 (struct_type -> type_name .)
    DOUBLE          reduce using rule 10 (struct_type -> type_name .)
    NOT             reduce using rule 10 (struct_type -> type_name .)

  ! LT              [ reduce using rule 32 (class_type -> type_name .) ]
  ! GT              [ reduce using rule 32 (class_type -> type_name .) ]
  ! LE              [ reduce using rule 32 (class_type -> type_name .) ]
  ! GE              [ reduce using rule 32 (class_type -> type_name .) ]
  ! IS              [ reduce using rule 32 (class_type -> type_name .) ]
  ! AS              [ reduce using rule 32 (class_type -> type_name .) ]
  ! EQ              [ reduce using rule 32 (class_type -> type_name .) ]
  ! NE              [ reduce using rule 32 (class_type -> type_name .) ]
  ! AND             [ reduce using rule 32 (class_type -> type_name .) ]
  ! XOR             [ reduce using rule 32 (class_type -> type_name .) ]
  ! OR              [ reduce using rule 32 (class_type -> type_name .) ]
  ! CAND            [ reduce using rule 32 (class_type -> type_name .) ]
  ! CONDOP          [ reduce using rule 32 (class_type -> type_name .) ]
  ! COR             [ reduce using rule 32 (class_type -> type_name .) ]
  ! COMMA           [ reduce using rule 32 (class_type -> type_name .) ]
  ! RPAREN          [ reduce using rule 32 (class_type -> type_name .) ]
  ! STMT_TERMINATOR [ reduce using rule 32 (class_type -> type_name .) ]
  ! RBRACE          [ reduce using rule 32 (class_type -> type_name .) ]
  ! COLON           [ reduce using rule 32 (class_type -> type_name .) ]
  ! RBRACKET        [ reduce using rule 32 (class_type -> type_name .) ]
  ! LBRACKET        [ reduce using rule 32 (class_type -> type_name .) ]
  ! IDENTIFIER      [ reduce using rule 32 (class_type -> type_name .) ]
  ! NAMESPACE       [ reduce using rule 32 (class_type -> type_name .) ]
  ! CLASS           [ reduce using rule 32 (class_type -> type_name .) ]
  ! STRUCT          [ reduce using rule 32 (class_type -> type_name .) ]
  ! ENUM            [ reduce using rule 32 (class_type -> type_name .) ]
  ! DELEGATE        [ reduce using rule 32 (class_type -> type_name .) ]
  ! LPAREN          [ reduce using rule 32 (class_type -> type_name .) ]
  ! LBRACE          [ reduce using rule 32 (class_type -> type_name .) ]
  ! $end            [ reduce using rule 32 (class_type -> type_name .) ]
  ! CONST           [ reduce using rule 32 (class_type -> type_name .) ]
  ! STATIC          [ reduce using rule 32 (class_type -> type_name .) ]
  ! VOID            [ reduce using rule 32 (class_type -> type_name .) ]
  ! EXTERN          [ reduce using rule 32 (class_type -> type_name .) ]
  ! OBJECT          [ reduce using rule 32 (class_type -> type_name .) ]
  ! STRING          [ reduce using rule 32 (class_type -> type_name .) ]
  ! BOOL            [ reduce using rule 32 (class_type -> type_name .) ]
  ! DECIMAL         [ reduce using rule 32 (class_type -> type_name .) ]
  ! SBYTE           [ reduce using rule 32 (class_type -> type_name .) ]
  ! BYTE            [ reduce using rule 32 (class_type -> type_name .) ]
  ! SHORT           [ reduce using rule 32 (class_type -> type_name .) ]
  ! USHORT          [ reduce using rule 32 (class_type -> type_name .) ]
  ! INT             [ reduce using rule 32 (class_type -> type_name .) ]
  ! UINT            [ reduce using rule 32 (class_type -> type_name .) ]
  ! LONG            [ reduce using rule 32 (class_type -> type_name .) ]
  ! ULONG           [ reduce using rule 32 (class_type -> type_name .) ]
  ! CHAR            [ reduce using rule 32 (class_type -> type_name .) ]
  ! FLOAT           [ reduce using rule 32 (class_type -> type_name .) ]
  ! DOUBLE          [ reduce using rule 32 (class_type -> type_name .) ]
  ! NOT             [ reduce using rule 32 (class_type -> type_name .) ]
  ! IDENTIFIER      [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LBRACKET        [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! RPAREN          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! NAMESPACE       [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! CLASS           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! STRUCT          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! ENUM            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! DELEGATE        [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LPAREN          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LBRACE          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! $end            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! CONST           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! STATIC          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! VOID            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! EXTERN          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! OBJECT          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! STRING          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! BOOL            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! DECIMAL         [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! SBYTE           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! BYTE            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! SHORT           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! USHORT          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! INT             [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! UINT            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LONG            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! ULONG           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! CHAR            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! FLOAT           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! DOUBLE          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! RBRACE          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! NOT             [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LT              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! GT              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LE              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! GE              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! IS              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! AS              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! EQ              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! NE              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! AND             [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! XOR             [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! OR              [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! CAND            [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! CONDOP          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! COR             [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! COMMA           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! STMT_TERMINATOR [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! COLON           [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! RBRACKET        [ reduce using rule 45 (delegate_type -> type_name .) ]


state 51

    (31) reference_type -> delegate_type .

    IDENTIFIER      reduce using rule 31 (reference_type -> delegate_type .)
    LBRACKET        reduce using rule 31 (reference_type -> delegate_type .)
    RPAREN          reduce using rule 31 (reference_type -> delegate_type .)
    LT              reduce using rule 31 (reference_type -> delegate_type .)
    GT              reduce using rule 31 (reference_type -> delegate_type .)
    LE              reduce using rule 31 (reference_type -> delegate_type .)
    GE              reduce using rule 31 (reference_type -> delegate_type .)
    IS              reduce using rule 31 (reference_type -> delegate_type .)
    AS              reduce using rule 31 (reference_type -> delegate_type .)
    EQ              reduce using rule 31 (reference_type -> delegate_type .)
    NE              reduce using rule 31 (reference_type -> delegate_type .)
    AND             reduce using rule 31 (reference_type -> delegate_type .)
    XOR             reduce using rule 31 (reference_type -> delegate_type .)
    OR              reduce using rule 31 (reference_type -> delegate_type .)
    CAND            reduce using rule 31 (reference_type -> delegate_type .)
    CONDOP          reduce using rule 31 (reference_type -> delegate_type .)
    COR             reduce using rule 31 (reference_type -> delegate_type .)
    COMMA           reduce using rule 31 (reference_type -> delegate_type .)
    STMT_TERMINATOR reduce using rule 31 (reference_type -> delegate_type .)
    RBRACE          reduce using rule 31 (reference_type -> delegate_type .)
    COLON           reduce using rule 31 (reference_type -> delegate_type .)
    RBRACKET        reduce using rule 31 (reference_type -> delegate_type .)
    NAMESPACE       reduce using rule 31 (reference_type -> delegate_type .)
    CLASS           reduce using rule 31 (reference_type -> delegate_type .)
    STRUCT          reduce using rule 31 (reference_type -> delegate_type .)
    ENUM            reduce using rule 31 (reference_type -> delegate_type .)
    DELEGATE        reduce using rule 31 (reference_type -> delegate_type .)
    LPAREN          reduce using rule 31 (reference_type -> delegate_type .)
    LBRACE          reduce using rule 31 (reference_type -> delegate_type .)
    $end            reduce using rule 31 (reference_type -> delegate_type .)
    CONST           reduce using rule 31 (reference_type -> delegate_type .)
    STATIC          reduce using rule 31 (reference_type -> delegate_type .)
    VOID            reduce using rule 31 (reference_type -> delegate_type .)
    EXTERN          reduce using rule 31 (reference_type -> delegate_type .)
    OBJECT          reduce using rule 31 (reference_type -> delegate_type .)
    STRING          reduce using rule 31 (reference_type -> delegate_type .)
    BOOL            reduce using rule 31 (reference_type -> delegate_type .)
    DECIMAL         reduce using rule 31 (reference_type -> delegate_type .)
    SBYTE           reduce using rule 31 (reference_type -> delegate_type .)
    BYTE            reduce using rule 31 (reference_type -> delegate_type .)
    SHORT           reduce using rule 31 (reference_type -> delegate_type .)
    USHORT          reduce using rule 31 (reference_type -> delegate_type .)
    INT             reduce using rule 31 (reference_type -> delegate_type .)
    UINT            reduce using rule 31 (reference_type -> delegate_type .)
    LONG            reduce using rule 31 (reference_type -> delegate_type .)
    ULONG           reduce using rule 31 (reference_type -> delegate_type .)
    CHAR            reduce using rule 31 (reference_type -> delegate_type .)
    FLOAT           reduce using rule 31 (reference_type -> delegate_type .)
    DOUBLE          reduce using rule 31 (reference_type -> delegate_type .)
    NOT             reduce using rule 31 (reference_type -> delegate_type .)


state 52

    (21) integral_type -> USHORT .

    LBRACE          reduce using rule 21 (integral_type -> USHORT .)
    RPAREN          reduce using rule 21 (integral_type -> USHORT .)
    LBRACKET        reduce using rule 21 (integral_type -> USHORT .)
    IDENTIFIER      reduce using rule 21 (integral_type -> USHORT .)
    LPAREN          reduce using rule 21 (integral_type -> USHORT .)
    LT              reduce using rule 21 (integral_type -> USHORT .)
    GT              reduce using rule 21 (integral_type -> USHORT .)
    LE              reduce using rule 21 (integral_type -> USHORT .)
    GE              reduce using rule 21 (integral_type -> USHORT .)
    IS              reduce using rule 21 (integral_type -> USHORT .)
    AS              reduce using rule 21 (integral_type -> USHORT .)
    EQ              reduce using rule 21 (integral_type -> USHORT .)
    NE              reduce using rule 21 (integral_type -> USHORT .)
    AND             reduce using rule 21 (integral_type -> USHORT .)
    XOR             reduce using rule 21 (integral_type -> USHORT .)
    OR              reduce using rule 21 (integral_type -> USHORT .)
    CAND            reduce using rule 21 (integral_type -> USHORT .)
    CONDOP          reduce using rule 21 (integral_type -> USHORT .)
    COR             reduce using rule 21 (integral_type -> USHORT .)
    COMMA           reduce using rule 21 (integral_type -> USHORT .)
    STMT_TERMINATOR reduce using rule 21 (integral_type -> USHORT .)
    RBRACE          reduce using rule 21 (integral_type -> USHORT .)
    COLON           reduce using rule 21 (integral_type -> USHORT .)
    RBRACKET        reduce using rule 21 (integral_type -> USHORT .)
    NAMESPACE       reduce using rule 21 (integral_type -> USHORT .)
    CLASS           reduce using rule 21 (integral_type -> USHORT .)
    STRUCT          reduce using rule 21 (integral_type -> USHORT .)
    ENUM            reduce using rule 21 (integral_type -> USHORT .)
    DELEGATE        reduce using rule 21 (integral_type -> USHORT .)
    $end            reduce using rule 21 (integral_type -> USHORT .)
    CONST           reduce using rule 21 (integral_type -> USHORT .)
    STATIC          reduce using rule 21 (integral_type -> USHORT .)
    VOID            reduce using rule 21 (integral_type -> USHORT .)
    EXTERN          reduce using rule 21 (integral_type -> USHORT .)
    OBJECT          reduce using rule 21 (integral_type -> USHORT .)
    STRING          reduce using rule 21 (integral_type -> USHORT .)
    BOOL            reduce using rule 21 (integral_type -> USHORT .)
    DECIMAL         reduce using rule 21 (integral_type -> USHORT .)
    SBYTE           reduce using rule 21 (integral_type -> USHORT .)
    BYTE            reduce using rule 21 (integral_type -> USHORT .)
    SHORT           reduce using rule 21 (integral_type -> USHORT .)
    USHORT          reduce using rule 21 (integral_type -> USHORT .)
    INT             reduce using rule 21 (integral_type -> USHORT .)
    UINT            reduce using rule 21 (integral_type -> USHORT .)
    LONG            reduce using rule 21 (integral_type -> USHORT .)
    ULONG           reduce using rule 21 (integral_type -> USHORT .)
    CHAR            reduce using rule 21 (integral_type -> USHORT .)
    FLOAT           reduce using rule 21 (integral_type -> USHORT .)
    DOUBLE          reduce using rule 21 (integral_type -> USHORT .)
    NOT             reduce using rule 21 (integral_type -> USHORT .)


state 53

    (30) reference_type -> array_type .

    IDENTIFIER      reduce using rule 30 (reference_type -> array_type .)
    LBRACKET        reduce using rule 30 (reference_type -> array_type .)
    RPAREN          reduce using rule 30 (reference_type -> array_type .)
    LT              reduce using rule 30 (reference_type -> array_type .)
    GT              reduce using rule 30 (reference_type -> array_type .)
    LE              reduce using rule 30 (reference_type -> array_type .)
    GE              reduce using rule 30 (reference_type -> array_type .)
    IS              reduce using rule 30 (reference_type -> array_type .)
    AS              reduce using rule 30 (reference_type -> array_type .)
    EQ              reduce using rule 30 (reference_type -> array_type .)
    NE              reduce using rule 30 (reference_type -> array_type .)
    AND             reduce using rule 30 (reference_type -> array_type .)
    XOR             reduce using rule 30 (reference_type -> array_type .)
    OR              reduce using rule 30 (reference_type -> array_type .)
    CAND            reduce using rule 30 (reference_type -> array_type .)
    CONDOP          reduce using rule 30 (reference_type -> array_type .)
    COR             reduce using rule 30 (reference_type -> array_type .)
    COMMA           reduce using rule 30 (reference_type -> array_type .)
    STMT_TERMINATOR reduce using rule 30 (reference_type -> array_type .)
    RBRACE          reduce using rule 30 (reference_type -> array_type .)
    COLON           reduce using rule 30 (reference_type -> array_type .)
    RBRACKET        reduce using rule 30 (reference_type -> array_type .)
    NAMESPACE       reduce using rule 30 (reference_type -> array_type .)
    CLASS           reduce using rule 30 (reference_type -> array_type .)
    STRUCT          reduce using rule 30 (reference_type -> array_type .)
    ENUM            reduce using rule 30 (reference_type -> array_type .)
    DELEGATE        reduce using rule 30 (reference_type -> array_type .)
    LPAREN          reduce using rule 30 (reference_type -> array_type .)
    LBRACE          reduce using rule 30 (reference_type -> array_type .)
    $end            reduce using rule 30 (reference_type -> array_type .)
    CONST           reduce using rule 30 (reference_type -> array_type .)
    STATIC          reduce using rule 30 (reference_type -> array_type .)
    VOID            reduce using rule 30 (reference_type -> array_type .)
    EXTERN          reduce using rule 30 (reference_type -> array_type .)
    OBJECT          reduce using rule 30 (reference_type -> array_type .)
    STRING          reduce using rule 30 (reference_type -> array_type .)
    BOOL            reduce using rule 30 (reference_type -> array_type .)
    DECIMAL         reduce using rule 30 (reference_type -> array_type .)
    SBYTE           reduce using rule 30 (reference_type -> array_type .)
    BYTE            reduce using rule 30 (reference_type -> array_type .)
    SHORT           reduce using rule 30 (reference_type -> array_type .)
    USHORT          reduce using rule 30 (reference_type -> array_type .)
    INT             reduce using rule 30 (reference_type -> array_type .)
    UINT            reduce using rule 30 (reference_type -> array_type .)
    LONG            reduce using rule 30 (reference_type -> array_type .)
    ULONG           reduce using rule 30 (reference_type -> array_type .)
    CHAR            reduce using rule 30 (reference_type -> array_type .)
    FLOAT           reduce using rule 30 (reference_type -> array_type .)
    DOUBLE          reduce using rule 30 (reference_type -> array_type .)
    NOT             reduce using rule 30 (reference_type -> array_type .)


state 54

    (332) parameter_array -> PARAMS . array_type IDENTIFIER
    (35) array_type -> . non_array_type rank_specifiers
    (36) non_array_type -> . type
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 108
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 109
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 55

    (24) integral_type -> LONG .

    LBRACE          reduce using rule 24 (integral_type -> LONG .)
    RPAREN          reduce using rule 24 (integral_type -> LONG .)
    LBRACKET        reduce using rule 24 (integral_type -> LONG .)
    IDENTIFIER      reduce using rule 24 (integral_type -> LONG .)
    LPAREN          reduce using rule 24 (integral_type -> LONG .)
    LT              reduce using rule 24 (integral_type -> LONG .)
    GT              reduce using rule 24 (integral_type -> LONG .)
    LE              reduce using rule 24 (integral_type -> LONG .)
    GE              reduce using rule 24 (integral_type -> LONG .)
    IS              reduce using rule 24 (integral_type -> LONG .)
    AS              reduce using rule 24 (integral_type -> LONG .)
    EQ              reduce using rule 24 (integral_type -> LONG .)
    NE              reduce using rule 24 (integral_type -> LONG .)
    AND             reduce using rule 24 (integral_type -> LONG .)
    XOR             reduce using rule 24 (integral_type -> LONG .)
    OR              reduce using rule 24 (integral_type -> LONG .)
    CAND            reduce using rule 24 (integral_type -> LONG .)
    CONDOP          reduce using rule 24 (integral_type -> LONG .)
    COR             reduce using rule 24 (integral_type -> LONG .)
    COMMA           reduce using rule 24 (integral_type -> LONG .)
    STMT_TERMINATOR reduce using rule 24 (integral_type -> LONG .)
    RBRACE          reduce using rule 24 (integral_type -> LONG .)
    COLON           reduce using rule 24 (integral_type -> LONG .)
    RBRACKET        reduce using rule 24 (integral_type -> LONG .)
    NAMESPACE       reduce using rule 24 (integral_type -> LONG .)
    CLASS           reduce using rule 24 (integral_type -> LONG .)
    STRUCT          reduce using rule 24 (integral_type -> LONG .)
    ENUM            reduce using rule 24 (integral_type -> LONG .)
    DELEGATE        reduce using rule 24 (integral_type -> LONG .)
    $end            reduce using rule 24 (integral_type -> LONG .)
    CONST           reduce using rule 24 (integral_type -> LONG .)
    STATIC          reduce using rule 24 (integral_type -> LONG .)
    VOID            reduce using rule 24 (integral_type -> LONG .)
    EXTERN          reduce using rule 24 (integral_type -> LONG .)
    OBJECT          reduce using rule 24 (integral_type -> LONG .)
    STRING          reduce using rule 24 (integral_type -> LONG .)
    BOOL            reduce using rule 24 (integral_type -> LONG .)
    DECIMAL         reduce using rule 24 (integral_type -> LONG .)
    SBYTE           reduce using rule 24 (integral_type -> LONG .)
    BYTE            reduce using rule 24 (integral_type -> LONG .)
    SHORT           reduce using rule 24 (integral_type -> LONG .)
    USHORT          reduce using rule 24 (integral_type -> LONG .)
    INT             reduce using rule 24 (integral_type -> LONG .)
    UINT            reduce using rule 24 (integral_type -> LONG .)
    LONG            reduce using rule 24 (integral_type -> LONG .)
    ULONG           reduce using rule 24 (integral_type -> LONG .)
    CHAR            reduce using rule 24 (integral_type -> LONG .)
    FLOAT           reduce using rule 24 (integral_type -> LONG .)
    DOUBLE          reduce using rule 24 (integral_type -> LONG .)
    NOT             reduce using rule 24 (integral_type -> LONG .)


state 56

    (12) type_name -> namespace_or_type_name .
    (6) namespace_or_type_name -> namespace_or_type_name . MEMBERACCESS IDENTIFIER

    IDENTIFIER      reduce using rule 12 (type_name -> namespace_or_type_name .)
    LBRACKET        reduce using rule 12 (type_name -> namespace_or_type_name .)
    RPAREN          reduce using rule 12 (type_name -> namespace_or_type_name .)
    LT              reduce using rule 12 (type_name -> namespace_or_type_name .)
    GT              reduce using rule 12 (type_name -> namespace_or_type_name .)
    LE              reduce using rule 12 (type_name -> namespace_or_type_name .)
    GE              reduce using rule 12 (type_name -> namespace_or_type_name .)
    IS              reduce using rule 12 (type_name -> namespace_or_type_name .)
    AS              reduce using rule 12 (type_name -> namespace_or_type_name .)
    EQ              reduce using rule 12 (type_name -> namespace_or_type_name .)
    NE              reduce using rule 12 (type_name -> namespace_or_type_name .)
    AND             reduce using rule 12 (type_name -> namespace_or_type_name .)
    XOR             reduce using rule 12 (type_name -> namespace_or_type_name .)
    OR              reduce using rule 12 (type_name -> namespace_or_type_name .)
    CAND            reduce using rule 12 (type_name -> namespace_or_type_name .)
    CONDOP          reduce using rule 12 (type_name -> namespace_or_type_name .)
    COR             reduce using rule 12 (type_name -> namespace_or_type_name .)
    COMMA           reduce using rule 12 (type_name -> namespace_or_type_name .)
    STMT_TERMINATOR reduce using rule 12 (type_name -> namespace_or_type_name .)
    RBRACE          reduce using rule 12 (type_name -> namespace_or_type_name .)
    COLON           reduce using rule 12 (type_name -> namespace_or_type_name .)
    RBRACKET        reduce using rule 12 (type_name -> namespace_or_type_name .)
    LBRACE          reduce using rule 12 (type_name -> namespace_or_type_name .)
    NAMESPACE       reduce using rule 12 (type_name -> namespace_or_type_name .)
    CLASS           reduce using rule 12 (type_name -> namespace_or_type_name .)
    STRUCT          reduce using rule 12 (type_name -> namespace_or_type_name .)
    ENUM            reduce using rule 12 (type_name -> namespace_or_type_name .)
    DELEGATE        reduce using rule 12 (type_name -> namespace_or_type_name .)
    LPAREN          reduce using rule 12 (type_name -> namespace_or_type_name .)
    $end            reduce using rule 12 (type_name -> namespace_or_type_name .)
    CONST           reduce using rule 12 (type_name -> namespace_or_type_name .)
    STATIC          reduce using rule 12 (type_name -> namespace_or_type_name .)
    VOID            reduce using rule 12 (type_name -> namespace_or_type_name .)
    EXTERN          reduce using rule 12 (type_name -> namespace_or_type_name .)
    OBJECT          reduce using rule 12 (type_name -> namespace_or_type_name .)
    STRING          reduce using rule 12 (type_name -> namespace_or_type_name .)
    BOOL            reduce using rule 12 (type_name -> namespace_or_type_name .)
    DECIMAL         reduce using rule 12 (type_name -> namespace_or_type_name .)
    SBYTE           reduce using rule 12 (type_name -> namespace_or_type_name .)
    BYTE            reduce using rule 12 (type_name -> namespace_or_type_name .)
    SHORT           reduce using rule 12 (type_name -> namespace_or_type_name .)
    USHORT          reduce using rule 12 (type_name -> namespace_or_type_name .)
    INT             reduce using rule 12 (type_name -> namespace_or_type_name .)
    UINT            reduce using rule 12 (type_name -> namespace_or_type_name .)
    LONG            reduce using rule 12 (type_name -> namespace_or_type_name .)
    ULONG           reduce using rule 12 (type_name -> namespace_or_type_name .)
    CHAR            reduce using rule 12 (type_name -> namespace_or_type_name .)
    FLOAT           reduce using rule 12 (type_name -> namespace_or_type_name .)
    DOUBLE          reduce using rule 12 (type_name -> namespace_or_type_name .)
    NOT             reduce using rule 12 (type_name -> namespace_or_type_name .)
    MEMBERACCESS    shift and go to state 31


state 57

    (330) fixed_parameter -> type . IDENTIFIER default_argument_opt
    (36) non_array_type -> type .

    IDENTIFIER      shift and go to state 110
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 58

    (35) array_type -> non_array_type . rank_specifiers
    (37) rank_specifiers -> . rank_specifier
    (38) rank_specifiers -> . rank_specifiers rank_specifier
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET

    LBRACKET        shift and go to state 111

    rank_specifiers                shift and go to state 112
    rank_specifier                 shift and go to state 113

state 59

    (29) reference_type -> class_type .

    IDENTIFIER      reduce using rule 29 (reference_type -> class_type .)
    LBRACKET        reduce using rule 29 (reference_type -> class_type .)
    RPAREN          reduce using rule 29 (reference_type -> class_type .)
    LPAREN          reduce using rule 29 (reference_type -> class_type .)
    LBRACE          reduce using rule 29 (reference_type -> class_type .)
    LT              reduce using rule 29 (reference_type -> class_type .)
    GT              reduce using rule 29 (reference_type -> class_type .)
    LE              reduce using rule 29 (reference_type -> class_type .)
    GE              reduce using rule 29 (reference_type -> class_type .)
    IS              reduce using rule 29 (reference_type -> class_type .)
    AS              reduce using rule 29 (reference_type -> class_type .)
    EQ              reduce using rule 29 (reference_type -> class_type .)
    NE              reduce using rule 29 (reference_type -> class_type .)
    AND             reduce using rule 29 (reference_type -> class_type .)
    XOR             reduce using rule 29 (reference_type -> class_type .)
    OR              reduce using rule 29 (reference_type -> class_type .)
    CAND            reduce using rule 29 (reference_type -> class_type .)
    CONDOP          reduce using rule 29 (reference_type -> class_type .)
    COR             reduce using rule 29 (reference_type -> class_type .)
    COMMA           reduce using rule 29 (reference_type -> class_type .)
    STMT_TERMINATOR reduce using rule 29 (reference_type -> class_type .)
    RBRACE          reduce using rule 29 (reference_type -> class_type .)
    COLON           reduce using rule 29 (reference_type -> class_type .)
    RBRACKET        reduce using rule 29 (reference_type -> class_type .)
    NAMESPACE       reduce using rule 29 (reference_type -> class_type .)
    CLASS           reduce using rule 29 (reference_type -> class_type .)
    STRUCT          reduce using rule 29 (reference_type -> class_type .)
    ENUM            reduce using rule 29 (reference_type -> class_type .)
    DELEGATE        reduce using rule 29 (reference_type -> class_type .)
    $end            reduce using rule 29 (reference_type -> class_type .)
    CONST           reduce using rule 29 (reference_type -> class_type .)
    STATIC          reduce using rule 29 (reference_type -> class_type .)
    VOID            reduce using rule 29 (reference_type -> class_type .)
    EXTERN          reduce using rule 29 (reference_type -> class_type .)
    OBJECT          reduce using rule 29 (reference_type -> class_type .)
    STRING          reduce using rule 29 (reference_type -> class_type .)
    BOOL            reduce using rule 29 (reference_type -> class_type .)
    DECIMAL         reduce using rule 29 (reference_type -> class_type .)
    SBYTE           reduce using rule 29 (reference_type -> class_type .)
    BYTE            reduce using rule 29 (reference_type -> class_type .)
    SHORT           reduce using rule 29 (reference_type -> class_type .)
    USHORT          reduce using rule 29 (reference_type -> class_type .)
    INT             reduce using rule 29 (reference_type -> class_type .)
    UINT            reduce using rule 29 (reference_type -> class_type .)
    LONG            reduce using rule 29 (reference_type -> class_type .)
    ULONG           reduce using rule 29 (reference_type -> class_type .)
    CHAR            reduce using rule 29 (reference_type -> class_type .)
    FLOAT           reduce using rule 29 (reference_type -> class_type .)
    DOUBLE          reduce using rule 29 (reference_type -> class_type .)
    NOT             reduce using rule 29 (reference_type -> class_type .)


state 60

    (376) formal_parameter_list_opt -> empty .

    RPAREN          reduce using rule 376 (formal_parameter_list_opt -> empty .)


state 61

    (8) type -> reference_type .

    IDENTIFIER      reduce using rule 8 (type -> reference_type .)
    LBRACKET        reduce using rule 8 (type -> reference_type .)
    LT              reduce using rule 8 (type -> reference_type .)
    GT              reduce using rule 8 (type -> reference_type .)
    LE              reduce using rule 8 (type -> reference_type .)
    GE              reduce using rule 8 (type -> reference_type .)
    IS              reduce using rule 8 (type -> reference_type .)
    AS              reduce using rule 8 (type -> reference_type .)
    EQ              reduce using rule 8 (type -> reference_type .)
    NE              reduce using rule 8 (type -> reference_type .)
    AND             reduce using rule 8 (type -> reference_type .)
    XOR             reduce using rule 8 (type -> reference_type .)
    OR              reduce using rule 8 (type -> reference_type .)
    CAND            reduce using rule 8 (type -> reference_type .)
    CONDOP          reduce using rule 8 (type -> reference_type .)
    COR             reduce using rule 8 (type -> reference_type .)
    COMMA           reduce using rule 8 (type -> reference_type .)
    RPAREN          reduce using rule 8 (type -> reference_type .)
    STMT_TERMINATOR reduce using rule 8 (type -> reference_type .)
    RBRACE          reduce using rule 8 (type -> reference_type .)
    COLON           reduce using rule 8 (type -> reference_type .)
    RBRACKET        reduce using rule 8 (type -> reference_type .)
    LPAREN          reduce using rule 8 (type -> reference_type .)
    LBRACE          reduce using rule 8 (type -> reference_type .)
    NAMESPACE       reduce using rule 8 (type -> reference_type .)
    CLASS           reduce using rule 8 (type -> reference_type .)
    STRUCT          reduce using rule 8 (type -> reference_type .)
    ENUM            reduce using rule 8 (type -> reference_type .)
    DELEGATE        reduce using rule 8 (type -> reference_type .)
    $end            reduce using rule 8 (type -> reference_type .)
    CONST           reduce using rule 8 (type -> reference_type .)
    STATIC          reduce using rule 8 (type -> reference_type .)
    VOID            reduce using rule 8 (type -> reference_type .)
    EXTERN          reduce using rule 8 (type -> reference_type .)
    OBJECT          reduce using rule 8 (type -> reference_type .)
    STRING          reduce using rule 8 (type -> reference_type .)
    BOOL            reduce using rule 8 (type -> reference_type .)
    DECIMAL         reduce using rule 8 (type -> reference_type .)
    SBYTE           reduce using rule 8 (type -> reference_type .)
    BYTE            reduce using rule 8 (type -> reference_type .)
    SHORT           reduce using rule 8 (type -> reference_type .)
    USHORT          reduce using rule 8 (type -> reference_type .)
    INT             reduce using rule 8 (type -> reference_type .)
    UINT            reduce using rule 8 (type -> reference_type .)
    LONG            reduce using rule 8 (type -> reference_type .)
    ULONG           reduce using rule 8 (type -> reference_type .)
    CHAR            reduce using rule 8 (type -> reference_type .)
    FLOAT           reduce using rule 8 (type -> reference_type .)
    DOUBLE          reduce using rule 8 (type -> reference_type .)
    NOT             reduce using rule 8 (type -> reference_type .)


state 62

    (15) numeric_type -> integral_type .

    IDENTIFIER      reduce using rule 15 (numeric_type -> integral_type .)
    LBRACKET        reduce using rule 15 (numeric_type -> integral_type .)
    RPAREN          reduce using rule 15 (numeric_type -> integral_type .)
    NAMESPACE       reduce using rule 15 (numeric_type -> integral_type .)
    CLASS           reduce using rule 15 (numeric_type -> integral_type .)
    STRUCT          reduce using rule 15 (numeric_type -> integral_type .)
    ENUM            reduce using rule 15 (numeric_type -> integral_type .)
    DELEGATE        reduce using rule 15 (numeric_type -> integral_type .)
    LPAREN          reduce using rule 15 (numeric_type -> integral_type .)
    LBRACE          reduce using rule 15 (numeric_type -> integral_type .)
    $end            reduce using rule 15 (numeric_type -> integral_type .)
    CONST           reduce using rule 15 (numeric_type -> integral_type .)
    STATIC          reduce using rule 15 (numeric_type -> integral_type .)
    VOID            reduce using rule 15 (numeric_type -> integral_type .)
    EXTERN          reduce using rule 15 (numeric_type -> integral_type .)
    OBJECT          reduce using rule 15 (numeric_type -> integral_type .)
    STRING          reduce using rule 15 (numeric_type -> integral_type .)
    BOOL            reduce using rule 15 (numeric_type -> integral_type .)
    DECIMAL         reduce using rule 15 (numeric_type -> integral_type .)
    SBYTE           reduce using rule 15 (numeric_type -> integral_type .)
    BYTE            reduce using rule 15 (numeric_type -> integral_type .)
    SHORT           reduce using rule 15 (numeric_type -> integral_type .)
    USHORT          reduce using rule 15 (numeric_type -> integral_type .)
    INT             reduce using rule 15 (numeric_type -> integral_type .)
    UINT            reduce using rule 15 (numeric_type -> integral_type .)
    LONG            reduce using rule 15 (numeric_type -> integral_type .)
    ULONG           reduce using rule 15 (numeric_type -> integral_type .)
    CHAR            reduce using rule 15 (numeric_type -> integral_type .)
    FLOAT           reduce using rule 15 (numeric_type -> integral_type .)
    DOUBLE          reduce using rule 15 (numeric_type -> integral_type .)
    RBRACE          reduce using rule 15 (numeric_type -> integral_type .)
    NOT             reduce using rule 15 (numeric_type -> integral_type .)
    LT              reduce using rule 15 (numeric_type -> integral_type .)
    GT              reduce using rule 15 (numeric_type -> integral_type .)
    LE              reduce using rule 15 (numeric_type -> integral_type .)
    GE              reduce using rule 15 (numeric_type -> integral_type .)
    IS              reduce using rule 15 (numeric_type -> integral_type .)
    AS              reduce using rule 15 (numeric_type -> integral_type .)
    EQ              reduce using rule 15 (numeric_type -> integral_type .)
    NE              reduce using rule 15 (numeric_type -> integral_type .)
    AND             reduce using rule 15 (numeric_type -> integral_type .)
    XOR             reduce using rule 15 (numeric_type -> integral_type .)
    OR              reduce using rule 15 (numeric_type -> integral_type .)
    CAND            reduce using rule 15 (numeric_type -> integral_type .)
    CONDOP          reduce using rule 15 (numeric_type -> integral_type .)
    COR             reduce using rule 15 (numeric_type -> integral_type .)
    COMMA           reduce using rule 15 (numeric_type -> integral_type .)
    STMT_TERMINATOR reduce using rule 15 (numeric_type -> integral_type .)
    COLON           reduce using rule 15 (numeric_type -> integral_type .)
    RBRACKET        reduce using rule 15 (numeric_type -> integral_type .)


state 63

    (23) integral_type -> UINT .

    LBRACE          reduce using rule 23 (integral_type -> UINT .)
    RPAREN          reduce using rule 23 (integral_type -> UINT .)
    LBRACKET        reduce using rule 23 (integral_type -> UINT .)
    IDENTIFIER      reduce using rule 23 (integral_type -> UINT .)
    LPAREN          reduce using rule 23 (integral_type -> UINT .)
    LT              reduce using rule 23 (integral_type -> UINT .)
    GT              reduce using rule 23 (integral_type -> UINT .)
    LE              reduce using rule 23 (integral_type -> UINT .)
    GE              reduce using rule 23 (integral_type -> UINT .)
    IS              reduce using rule 23 (integral_type -> UINT .)
    AS              reduce using rule 23 (integral_type -> UINT .)
    EQ              reduce using rule 23 (integral_type -> UINT .)
    NE              reduce using rule 23 (integral_type -> UINT .)
    AND             reduce using rule 23 (integral_type -> UINT .)
    XOR             reduce using rule 23 (integral_type -> UINT .)
    OR              reduce using rule 23 (integral_type -> UINT .)
    CAND            reduce using rule 23 (integral_type -> UINT .)
    CONDOP          reduce using rule 23 (integral_type -> UINT .)
    COR             reduce using rule 23 (integral_type -> UINT .)
    COMMA           reduce using rule 23 (integral_type -> UINT .)
    STMT_TERMINATOR reduce using rule 23 (integral_type -> UINT .)
    RBRACE          reduce using rule 23 (integral_type -> UINT .)
    COLON           reduce using rule 23 (integral_type -> UINT .)
    RBRACKET        reduce using rule 23 (integral_type -> UINT .)
    NAMESPACE       reduce using rule 23 (integral_type -> UINT .)
    CLASS           reduce using rule 23 (integral_type -> UINT .)
    STRUCT          reduce using rule 23 (integral_type -> UINT .)
    ENUM            reduce using rule 23 (integral_type -> UINT .)
    DELEGATE        reduce using rule 23 (integral_type -> UINT .)
    $end            reduce using rule 23 (integral_type -> UINT .)
    CONST           reduce using rule 23 (integral_type -> UINT .)
    STATIC          reduce using rule 23 (integral_type -> UINT .)
    VOID            reduce using rule 23 (integral_type -> UINT .)
    EXTERN          reduce using rule 23 (integral_type -> UINT .)
    OBJECT          reduce using rule 23 (integral_type -> UINT .)
    STRING          reduce using rule 23 (integral_type -> UINT .)
    BOOL            reduce using rule 23 (integral_type -> UINT .)
    DECIMAL         reduce using rule 23 (integral_type -> UINT .)
    SBYTE           reduce using rule 23 (integral_type -> UINT .)
    BYTE            reduce using rule 23 (integral_type -> UINT .)
    SHORT           reduce using rule 23 (integral_type -> UINT .)
    USHORT          reduce using rule 23 (integral_type -> UINT .)
    INT             reduce using rule 23 (integral_type -> UINT .)
    UINT            reduce using rule 23 (integral_type -> UINT .)
    LONG            reduce using rule 23 (integral_type -> UINT .)
    ULONG           reduce using rule 23 (integral_type -> UINT .)
    CHAR            reduce using rule 23 (integral_type -> UINT .)
    FLOAT           reduce using rule 23 (integral_type -> UINT .)
    DOUBLE          reduce using rule 23 (integral_type -> UINT .)
    NOT             reduce using rule 23 (integral_type -> UINT .)


state 64

    (20) integral_type -> SHORT .

    LBRACE          reduce using rule 20 (integral_type -> SHORT .)
    RPAREN          reduce using rule 20 (integral_type -> SHORT .)
    LBRACKET        reduce using rule 20 (integral_type -> SHORT .)
    IDENTIFIER      reduce using rule 20 (integral_type -> SHORT .)
    LPAREN          reduce using rule 20 (integral_type -> SHORT .)
    LT              reduce using rule 20 (integral_type -> SHORT .)
    GT              reduce using rule 20 (integral_type -> SHORT .)
    LE              reduce using rule 20 (integral_type -> SHORT .)
    GE              reduce using rule 20 (integral_type -> SHORT .)
    IS              reduce using rule 20 (integral_type -> SHORT .)
    AS              reduce using rule 20 (integral_type -> SHORT .)
    EQ              reduce using rule 20 (integral_type -> SHORT .)
    NE              reduce using rule 20 (integral_type -> SHORT .)
    AND             reduce using rule 20 (integral_type -> SHORT .)
    XOR             reduce using rule 20 (integral_type -> SHORT .)
    OR              reduce using rule 20 (integral_type -> SHORT .)
    CAND            reduce using rule 20 (integral_type -> SHORT .)
    CONDOP          reduce using rule 20 (integral_type -> SHORT .)
    COR             reduce using rule 20 (integral_type -> SHORT .)
    COMMA           reduce using rule 20 (integral_type -> SHORT .)
    STMT_TERMINATOR reduce using rule 20 (integral_type -> SHORT .)
    RBRACE          reduce using rule 20 (integral_type -> SHORT .)
    COLON           reduce using rule 20 (integral_type -> SHORT .)
    RBRACKET        reduce using rule 20 (integral_type -> SHORT .)
    NAMESPACE       reduce using rule 20 (integral_type -> SHORT .)
    CLASS           reduce using rule 20 (integral_type -> SHORT .)
    STRUCT          reduce using rule 20 (integral_type -> SHORT .)
    ENUM            reduce using rule 20 (integral_type -> SHORT .)
    DELEGATE        reduce using rule 20 (integral_type -> SHORT .)
    $end            reduce using rule 20 (integral_type -> SHORT .)
    CONST           reduce using rule 20 (integral_type -> SHORT .)
    STATIC          reduce using rule 20 (integral_type -> SHORT .)
    VOID            reduce using rule 20 (integral_type -> SHORT .)
    EXTERN          reduce using rule 20 (integral_type -> SHORT .)
    OBJECT          reduce using rule 20 (integral_type -> SHORT .)
    STRING          reduce using rule 20 (integral_type -> SHORT .)
    BOOL            reduce using rule 20 (integral_type -> SHORT .)
    DECIMAL         reduce using rule 20 (integral_type -> SHORT .)
    SBYTE           reduce using rule 20 (integral_type -> SHORT .)
    BYTE            reduce using rule 20 (integral_type -> SHORT .)
    SHORT           reduce using rule 20 (integral_type -> SHORT .)
    USHORT          reduce using rule 20 (integral_type -> SHORT .)
    INT             reduce using rule 20 (integral_type -> SHORT .)
    UINT            reduce using rule 20 (integral_type -> SHORT .)
    LONG            reduce using rule 20 (integral_type -> SHORT .)
    ULONG           reduce using rule 20 (integral_type -> SHORT .)
    CHAR            reduce using rule 20 (integral_type -> SHORT .)
    FLOAT           reduce using rule 20 (integral_type -> SHORT .)
    DOUBLE          reduce using rule 20 (integral_type -> SHORT .)
    NOT             reduce using rule 20 (integral_type -> SHORT .)


state 65

    (28) floating_point_type -> DOUBLE .

    RPAREN          reduce using rule 28 (floating_point_type -> DOUBLE .)
    LBRACKET        reduce using rule 28 (floating_point_type -> DOUBLE .)
    IDENTIFIER      reduce using rule 28 (floating_point_type -> DOUBLE .)
    LT              reduce using rule 28 (floating_point_type -> DOUBLE .)
    GT              reduce using rule 28 (floating_point_type -> DOUBLE .)
    LE              reduce using rule 28 (floating_point_type -> DOUBLE .)
    GE              reduce using rule 28 (floating_point_type -> DOUBLE .)
    IS              reduce using rule 28 (floating_point_type -> DOUBLE .)
    AS              reduce using rule 28 (floating_point_type -> DOUBLE .)
    EQ              reduce using rule 28 (floating_point_type -> DOUBLE .)
    NE              reduce using rule 28 (floating_point_type -> DOUBLE .)
    AND             reduce using rule 28 (floating_point_type -> DOUBLE .)
    XOR             reduce using rule 28 (floating_point_type -> DOUBLE .)
    OR              reduce using rule 28 (floating_point_type -> DOUBLE .)
    CAND            reduce using rule 28 (floating_point_type -> DOUBLE .)
    CONDOP          reduce using rule 28 (floating_point_type -> DOUBLE .)
    COR             reduce using rule 28 (floating_point_type -> DOUBLE .)
    COMMA           reduce using rule 28 (floating_point_type -> DOUBLE .)
    STMT_TERMINATOR reduce using rule 28 (floating_point_type -> DOUBLE .)
    RBRACE          reduce using rule 28 (floating_point_type -> DOUBLE .)
    COLON           reduce using rule 28 (floating_point_type -> DOUBLE .)
    RBRACKET        reduce using rule 28 (floating_point_type -> DOUBLE .)
    LPAREN          reduce using rule 28 (floating_point_type -> DOUBLE .)
    LBRACE          reduce using rule 28 (floating_point_type -> DOUBLE .)
    NAMESPACE       reduce using rule 28 (floating_point_type -> DOUBLE .)
    CLASS           reduce using rule 28 (floating_point_type -> DOUBLE .)
    STRUCT          reduce using rule 28 (floating_point_type -> DOUBLE .)
    ENUM            reduce using rule 28 (floating_point_type -> DOUBLE .)
    DELEGATE        reduce using rule 28 (floating_point_type -> DOUBLE .)
    $end            reduce using rule 28 (floating_point_type -> DOUBLE .)
    CONST           reduce using rule 28 (floating_point_type -> DOUBLE .)
    STATIC          reduce using rule 28 (floating_point_type -> DOUBLE .)
    VOID            reduce using rule 28 (floating_point_type -> DOUBLE .)
    EXTERN          reduce using rule 28 (floating_point_type -> DOUBLE .)
    OBJECT          reduce using rule 28 (floating_point_type -> DOUBLE .)
    STRING          reduce using rule 28 (floating_point_type -> DOUBLE .)
    BOOL            reduce using rule 28 (floating_point_type -> DOUBLE .)
    DECIMAL         reduce using rule 28 (floating_point_type -> DOUBLE .)
    SBYTE           reduce using rule 28 (floating_point_type -> DOUBLE .)
    BYTE            reduce using rule 28 (floating_point_type -> DOUBLE .)
    SHORT           reduce using rule 28 (floating_point_type -> DOUBLE .)
    USHORT          reduce using rule 28 (floating_point_type -> DOUBLE .)
    INT             reduce using rule 28 (floating_point_type -> DOUBLE .)
    UINT            reduce using rule 28 (floating_point_type -> DOUBLE .)
    LONG            reduce using rule 28 (floating_point_type -> DOUBLE .)
    ULONG           reduce using rule 28 (floating_point_type -> DOUBLE .)
    CHAR            reduce using rule 28 (floating_point_type -> DOUBLE .)
    FLOAT           reduce using rule 28 (floating_point_type -> DOUBLE .)
    DOUBLE          reduce using rule 28 (floating_point_type -> DOUBLE .)
    NOT             reduce using rule 28 (floating_point_type -> DOUBLE .)


state 66

    (19) integral_type -> BYTE .

    LBRACE          reduce using rule 19 (integral_type -> BYTE .)
    RPAREN          reduce using rule 19 (integral_type -> BYTE .)
    LBRACKET        reduce using rule 19 (integral_type -> BYTE .)
    IDENTIFIER      reduce using rule 19 (integral_type -> BYTE .)
    LPAREN          reduce using rule 19 (integral_type -> BYTE .)
    LT              reduce using rule 19 (integral_type -> BYTE .)
    GT              reduce using rule 19 (integral_type -> BYTE .)
    LE              reduce using rule 19 (integral_type -> BYTE .)
    GE              reduce using rule 19 (integral_type -> BYTE .)
    IS              reduce using rule 19 (integral_type -> BYTE .)
    AS              reduce using rule 19 (integral_type -> BYTE .)
    EQ              reduce using rule 19 (integral_type -> BYTE .)
    NE              reduce using rule 19 (integral_type -> BYTE .)
    AND             reduce using rule 19 (integral_type -> BYTE .)
    XOR             reduce using rule 19 (integral_type -> BYTE .)
    OR              reduce using rule 19 (integral_type -> BYTE .)
    CAND            reduce using rule 19 (integral_type -> BYTE .)
    CONDOP          reduce using rule 19 (integral_type -> BYTE .)
    COR             reduce using rule 19 (integral_type -> BYTE .)
    COMMA           reduce using rule 19 (integral_type -> BYTE .)
    STMT_TERMINATOR reduce using rule 19 (integral_type -> BYTE .)
    RBRACE          reduce using rule 19 (integral_type -> BYTE .)
    COLON           reduce using rule 19 (integral_type -> BYTE .)
    RBRACKET        reduce using rule 19 (integral_type -> BYTE .)
    NAMESPACE       reduce using rule 19 (integral_type -> BYTE .)
    CLASS           reduce using rule 19 (integral_type -> BYTE .)
    STRUCT          reduce using rule 19 (integral_type -> BYTE .)
    ENUM            reduce using rule 19 (integral_type -> BYTE .)
    DELEGATE        reduce using rule 19 (integral_type -> BYTE .)
    $end            reduce using rule 19 (integral_type -> BYTE .)
    CONST           reduce using rule 19 (integral_type -> BYTE .)
    STATIC          reduce using rule 19 (integral_type -> BYTE .)
    VOID            reduce using rule 19 (integral_type -> BYTE .)
    EXTERN          reduce using rule 19 (integral_type -> BYTE .)
    OBJECT          reduce using rule 19 (integral_type -> BYTE .)
    STRING          reduce using rule 19 (integral_type -> BYTE .)
    BOOL            reduce using rule 19 (integral_type -> BYTE .)
    DECIMAL         reduce using rule 19 (integral_type -> BYTE .)
    SBYTE           reduce using rule 19 (integral_type -> BYTE .)
    BYTE            reduce using rule 19 (integral_type -> BYTE .)
    SHORT           reduce using rule 19 (integral_type -> BYTE .)
    USHORT          reduce using rule 19 (integral_type -> BYTE .)
    INT             reduce using rule 19 (integral_type -> BYTE .)
    UINT            reduce using rule 19 (integral_type -> BYTE .)
    LONG            reduce using rule 19 (integral_type -> BYTE .)
    ULONG           reduce using rule 19 (integral_type -> BYTE .)
    CHAR            reduce using rule 19 (integral_type -> BYTE .)
    FLOAT           reduce using rule 19 (integral_type -> BYTE .)
    DOUBLE          reduce using rule 19 (integral_type -> BYTE .)
    NOT             reduce using rule 19 (integral_type -> BYTE .)


state 67

    (17) numeric_type -> DECIMAL .

    RPAREN          reduce using rule 17 (numeric_type -> DECIMAL .)
    LBRACKET        reduce using rule 17 (numeric_type -> DECIMAL .)
    IDENTIFIER      reduce using rule 17 (numeric_type -> DECIMAL .)
    NAMESPACE       reduce using rule 17 (numeric_type -> DECIMAL .)
    CLASS           reduce using rule 17 (numeric_type -> DECIMAL .)
    STRUCT          reduce using rule 17 (numeric_type -> DECIMAL .)
    ENUM            reduce using rule 17 (numeric_type -> DECIMAL .)
    DELEGATE        reduce using rule 17 (numeric_type -> DECIMAL .)
    LPAREN          reduce using rule 17 (numeric_type -> DECIMAL .)
    LBRACE          reduce using rule 17 (numeric_type -> DECIMAL .)
    $end            reduce using rule 17 (numeric_type -> DECIMAL .)
    CONST           reduce using rule 17 (numeric_type -> DECIMAL .)
    STATIC          reduce using rule 17 (numeric_type -> DECIMAL .)
    VOID            reduce using rule 17 (numeric_type -> DECIMAL .)
    EXTERN          reduce using rule 17 (numeric_type -> DECIMAL .)
    OBJECT          reduce using rule 17 (numeric_type -> DECIMAL .)
    STRING          reduce using rule 17 (numeric_type -> DECIMAL .)
    BOOL            reduce using rule 17 (numeric_type -> DECIMAL .)
    DECIMAL         reduce using rule 17 (numeric_type -> DECIMAL .)
    SBYTE           reduce using rule 17 (numeric_type -> DECIMAL .)
    BYTE            reduce using rule 17 (numeric_type -> DECIMAL .)
    SHORT           reduce using rule 17 (numeric_type -> DECIMAL .)
    USHORT          reduce using rule 17 (numeric_type -> DECIMAL .)
    INT             reduce using rule 17 (numeric_type -> DECIMAL .)
    UINT            reduce using rule 17 (numeric_type -> DECIMAL .)
    LONG            reduce using rule 17 (numeric_type -> DECIMAL .)
    ULONG           reduce using rule 17 (numeric_type -> DECIMAL .)
    CHAR            reduce using rule 17 (numeric_type -> DECIMAL .)
    FLOAT           reduce using rule 17 (numeric_type -> DECIMAL .)
    DOUBLE          reduce using rule 17 (numeric_type -> DECIMAL .)
    RBRACE          reduce using rule 17 (numeric_type -> DECIMAL .)
    NOT             reduce using rule 17 (numeric_type -> DECIMAL .)
    LT              reduce using rule 17 (numeric_type -> DECIMAL .)
    GT              reduce using rule 17 (numeric_type -> DECIMAL .)
    LE              reduce using rule 17 (numeric_type -> DECIMAL .)
    GE              reduce using rule 17 (numeric_type -> DECIMAL .)
    IS              reduce using rule 17 (numeric_type -> DECIMAL .)
    AS              reduce using rule 17 (numeric_type -> DECIMAL .)
    EQ              reduce using rule 17 (numeric_type -> DECIMAL .)
    NE              reduce using rule 17 (numeric_type -> DECIMAL .)
    AND             reduce using rule 17 (numeric_type -> DECIMAL .)
    XOR             reduce using rule 17 (numeric_type -> DECIMAL .)
    OR              reduce using rule 17 (numeric_type -> DECIMAL .)
    CAND            reduce using rule 17 (numeric_type -> DECIMAL .)
    CONDOP          reduce using rule 17 (numeric_type -> DECIMAL .)
    COR             reduce using rule 17 (numeric_type -> DECIMAL .)
    COMMA           reduce using rule 17 (numeric_type -> DECIMAL .)
    STMT_TERMINATOR reduce using rule 17 (numeric_type -> DECIMAL .)
    COLON           reduce using rule 17 (numeric_type -> DECIMAL .)
    RBRACKET        reduce using rule 17 (numeric_type -> DECIMAL .)


state 68

    (7) type -> value_type .

    IDENTIFIER      reduce using rule 7 (type -> value_type .)
    LBRACKET        reduce using rule 7 (type -> value_type .)
    LT              reduce using rule 7 (type -> value_type .)
    GT              reduce using rule 7 (type -> value_type .)
    LE              reduce using rule 7 (type -> value_type .)
    GE              reduce using rule 7 (type -> value_type .)
    IS              reduce using rule 7 (type -> value_type .)
    AS              reduce using rule 7 (type -> value_type .)
    EQ              reduce using rule 7 (type -> value_type .)
    NE              reduce using rule 7 (type -> value_type .)
    AND             reduce using rule 7 (type -> value_type .)
    XOR             reduce using rule 7 (type -> value_type .)
    OR              reduce using rule 7 (type -> value_type .)
    CAND            reduce using rule 7 (type -> value_type .)
    CONDOP          reduce using rule 7 (type -> value_type .)
    COR             reduce using rule 7 (type -> value_type .)
    COMMA           reduce using rule 7 (type -> value_type .)
    RPAREN          reduce using rule 7 (type -> value_type .)
    STMT_TERMINATOR reduce using rule 7 (type -> value_type .)
    RBRACE          reduce using rule 7 (type -> value_type .)
    COLON           reduce using rule 7 (type -> value_type .)
    RBRACKET        reduce using rule 7 (type -> value_type .)
    LPAREN          reduce using rule 7 (type -> value_type .)
    LBRACE          reduce using rule 7 (type -> value_type .)
    NAMESPACE       reduce using rule 7 (type -> value_type .)
    CLASS           reduce using rule 7 (type -> value_type .)
    STRUCT          reduce using rule 7 (type -> value_type .)
    ENUM            reduce using rule 7 (type -> value_type .)
    DELEGATE        reduce using rule 7 (type -> value_type .)
    $end            reduce using rule 7 (type -> value_type .)
    CONST           reduce using rule 7 (type -> value_type .)
    STATIC          reduce using rule 7 (type -> value_type .)
    VOID            reduce using rule 7 (type -> value_type .)
    EXTERN          reduce using rule 7 (type -> value_type .)
    OBJECT          reduce using rule 7 (type -> value_type .)
    STRING          reduce using rule 7 (type -> value_type .)
    BOOL            reduce using rule 7 (type -> value_type .)
    DECIMAL         reduce using rule 7 (type -> value_type .)
    SBYTE           reduce using rule 7 (type -> value_type .)
    BYTE            reduce using rule 7 (type -> value_type .)
    SHORT           reduce using rule 7 (type -> value_type .)
    USHORT          reduce using rule 7 (type -> value_type .)
    INT             reduce using rule 7 (type -> value_type .)
    UINT            reduce using rule 7 (type -> value_type .)
    LONG            reduce using rule 7 (type -> value_type .)
    ULONG           reduce using rule 7 (type -> value_type .)
    CHAR            reduce using rule 7 (type -> value_type .)
    FLOAT           reduce using rule 7 (type -> value_type .)
    DOUBLE          reduce using rule 7 (type -> value_type .)
    NOT             reduce using rule 7 (type -> value_type .)


state 69

    (27) floating_point_type -> FLOAT .

    RPAREN          reduce using rule 27 (floating_point_type -> FLOAT .)
    LBRACKET        reduce using rule 27 (floating_point_type -> FLOAT .)
    IDENTIFIER      reduce using rule 27 (floating_point_type -> FLOAT .)
    LT              reduce using rule 27 (floating_point_type -> FLOAT .)
    GT              reduce using rule 27 (floating_point_type -> FLOAT .)
    LE              reduce using rule 27 (floating_point_type -> FLOAT .)
    GE              reduce using rule 27 (floating_point_type -> FLOAT .)
    IS              reduce using rule 27 (floating_point_type -> FLOAT .)
    AS              reduce using rule 27 (floating_point_type -> FLOAT .)
    EQ              reduce using rule 27 (floating_point_type -> FLOAT .)
    NE              reduce using rule 27 (floating_point_type -> FLOAT .)
    AND             reduce using rule 27 (floating_point_type -> FLOAT .)
    XOR             reduce using rule 27 (floating_point_type -> FLOAT .)
    OR              reduce using rule 27 (floating_point_type -> FLOAT .)
    CAND            reduce using rule 27 (floating_point_type -> FLOAT .)
    CONDOP          reduce using rule 27 (floating_point_type -> FLOAT .)
    COR             reduce using rule 27 (floating_point_type -> FLOAT .)
    COMMA           reduce using rule 27 (floating_point_type -> FLOAT .)
    STMT_TERMINATOR reduce using rule 27 (floating_point_type -> FLOAT .)
    RBRACE          reduce using rule 27 (floating_point_type -> FLOAT .)
    COLON           reduce using rule 27 (floating_point_type -> FLOAT .)
    RBRACKET        reduce using rule 27 (floating_point_type -> FLOAT .)
    LPAREN          reduce using rule 27 (floating_point_type -> FLOAT .)
    LBRACE          reduce using rule 27 (floating_point_type -> FLOAT .)
    NAMESPACE       reduce using rule 27 (floating_point_type -> FLOAT .)
    CLASS           reduce using rule 27 (floating_point_type -> FLOAT .)
    STRUCT          reduce using rule 27 (floating_point_type -> FLOAT .)
    ENUM            reduce using rule 27 (floating_point_type -> FLOAT .)
    DELEGATE        reduce using rule 27 (floating_point_type -> FLOAT .)
    $end            reduce using rule 27 (floating_point_type -> FLOAT .)
    CONST           reduce using rule 27 (floating_point_type -> FLOAT .)
    STATIC          reduce using rule 27 (floating_point_type -> FLOAT .)
    VOID            reduce using rule 27 (floating_point_type -> FLOAT .)
    EXTERN          reduce using rule 27 (floating_point_type -> FLOAT .)
    OBJECT          reduce using rule 27 (floating_point_type -> FLOAT .)
    STRING          reduce using rule 27 (floating_point_type -> FLOAT .)
    BOOL            reduce using rule 27 (floating_point_type -> FLOAT .)
    DECIMAL         reduce using rule 27 (floating_point_type -> FLOAT .)
    SBYTE           reduce using rule 27 (floating_point_type -> FLOAT .)
    BYTE            reduce using rule 27 (floating_point_type -> FLOAT .)
    SHORT           reduce using rule 27 (floating_point_type -> FLOAT .)
    USHORT          reduce using rule 27 (floating_point_type -> FLOAT .)
    INT             reduce using rule 27 (floating_point_type -> FLOAT .)
    UINT            reduce using rule 27 (floating_point_type -> FLOAT .)
    LONG            reduce using rule 27 (floating_point_type -> FLOAT .)
    ULONG           reduce using rule 27 (floating_point_type -> FLOAT .)
    CHAR            reduce using rule 27 (floating_point_type -> FLOAT .)
    FLOAT           reduce using rule 27 (floating_point_type -> FLOAT .)
    DOUBLE          reduce using rule 27 (floating_point_type -> FLOAT .)
    NOT             reduce using rule 27 (floating_point_type -> FLOAT .)


state 70

    (16) numeric_type -> floating_point_type .

    IDENTIFIER      reduce using rule 16 (numeric_type -> floating_point_type .)
    LBRACKET        reduce using rule 16 (numeric_type -> floating_point_type .)
    RPAREN          reduce using rule 16 (numeric_type -> floating_point_type .)
    NAMESPACE       reduce using rule 16 (numeric_type -> floating_point_type .)
    CLASS           reduce using rule 16 (numeric_type -> floating_point_type .)
    STRUCT          reduce using rule 16 (numeric_type -> floating_point_type .)
    ENUM            reduce using rule 16 (numeric_type -> floating_point_type .)
    DELEGATE        reduce using rule 16 (numeric_type -> floating_point_type .)
    LPAREN          reduce using rule 16 (numeric_type -> floating_point_type .)
    LBRACE          reduce using rule 16 (numeric_type -> floating_point_type .)
    $end            reduce using rule 16 (numeric_type -> floating_point_type .)
    CONST           reduce using rule 16 (numeric_type -> floating_point_type .)
    STATIC          reduce using rule 16 (numeric_type -> floating_point_type .)
    VOID            reduce using rule 16 (numeric_type -> floating_point_type .)
    EXTERN          reduce using rule 16 (numeric_type -> floating_point_type .)
    OBJECT          reduce using rule 16 (numeric_type -> floating_point_type .)
    STRING          reduce using rule 16 (numeric_type -> floating_point_type .)
    BOOL            reduce using rule 16 (numeric_type -> floating_point_type .)
    DECIMAL         reduce using rule 16 (numeric_type -> floating_point_type .)
    SBYTE           reduce using rule 16 (numeric_type -> floating_point_type .)
    BYTE            reduce using rule 16 (numeric_type -> floating_point_type .)
    SHORT           reduce using rule 16 (numeric_type -> floating_point_type .)
    USHORT          reduce using rule 16 (numeric_type -> floating_point_type .)
    INT             reduce using rule 16 (numeric_type -> floating_point_type .)
    UINT            reduce using rule 16 (numeric_type -> floating_point_type .)
    LONG            reduce using rule 16 (numeric_type -> floating_point_type .)
    ULONG           reduce using rule 16 (numeric_type -> floating_point_type .)
    CHAR            reduce using rule 16 (numeric_type -> floating_point_type .)
    FLOAT           reduce using rule 16 (numeric_type -> floating_point_type .)
    DOUBLE          reduce using rule 16 (numeric_type -> floating_point_type .)
    RBRACE          reduce using rule 16 (numeric_type -> floating_point_type .)
    NOT             reduce using rule 16 (numeric_type -> floating_point_type .)
    LT              reduce using rule 16 (numeric_type -> floating_point_type .)
    GT              reduce using rule 16 (numeric_type -> floating_point_type .)
    LE              reduce using rule 16 (numeric_type -> floating_point_type .)
    GE              reduce using rule 16 (numeric_type -> floating_point_type .)
    IS              reduce using rule 16 (numeric_type -> floating_point_type .)
    AS              reduce using rule 16 (numeric_type -> floating_point_type .)
    EQ              reduce using rule 16 (numeric_type -> floating_point_type .)
    NE              reduce using rule 16 (numeric_type -> floating_point_type .)
    AND             reduce using rule 16 (numeric_type -> floating_point_type .)
    XOR             reduce using rule 16 (numeric_type -> floating_point_type .)
    OR              reduce using rule 16 (numeric_type -> floating_point_type .)
    CAND            reduce using rule 16 (numeric_type -> floating_point_type .)
    CONDOP          reduce using rule 16 (numeric_type -> floating_point_type .)
    COR             reduce using rule 16 (numeric_type -> floating_point_type .)
    COMMA           reduce using rule 16 (numeric_type -> floating_point_type .)
    STMT_TERMINATOR reduce using rule 16 (numeric_type -> floating_point_type .)
    COLON           reduce using rule 16 (numeric_type -> floating_point_type .)
    RBRACKET        reduce using rule 16 (numeric_type -> floating_point_type .)


state 71

    (302) class_declaration -> CLASS IDENTIFIER . class_base_opt class_body smt_terminator_opt
    (402) class_base_opt -> . empty
    (403) class_base_opt -> . class_base
    (371) empty -> .
    (303) class_base -> . COLON class_type

    LBRACE          reduce using rule 371 (empty -> .)
    COLON           shift and go to state 116

    class_base_opt                 shift and go to state 114
    class_base                     shift and go to state 115
    empty                          shift and go to state 117

state 72

    (295) qualified_identifier -> IDENTIFIER .

    MEMBERACCESS    reduce using rule 295 (qualified_identifier -> IDENTIFIER .)
    LBRACE          reduce using rule 295 (qualified_identifier -> IDENTIFIER .)


state 73

    (294) namespace_declaration -> NAMESPACE qualified_identifier . namespace_body smt_terminator_opt
    (296) qualified_identifier -> qualified_identifier . MEMBERACCESS IDENTIFIER
    (297) namespace_body -> . LBRACE using_directives_opt namespace_member_declarations_opt RBRACE

    MEMBERACCESS    shift and go to state 118
    LBRACE          shift and go to state 119

    namespace_body                 shift and go to state 120

state 74

    (323) return_type -> VOID .

    NAMESPACE       reduce using rule 323 (return_type -> VOID .)
    CLASS           reduce using rule 323 (return_type -> VOID .)
    STRUCT          reduce using rule 323 (return_type -> VOID .)
    ENUM            reduce using rule 323 (return_type -> VOID .)
    DELEGATE        reduce using rule 323 (return_type -> VOID .)
    IDENTIFIER      reduce using rule 323 (return_type -> VOID .)
    LPAREN          reduce using rule 323 (return_type -> VOID .)
    LBRACE          reduce using rule 323 (return_type -> VOID .)
    $end            reduce using rule 323 (return_type -> VOID .)
    CONST           reduce using rule 323 (return_type -> VOID .)
    STATIC          reduce using rule 323 (return_type -> VOID .)
    VOID            reduce using rule 323 (return_type -> VOID .)
    EXTERN          reduce using rule 323 (return_type -> VOID .)
    OBJECT          reduce using rule 323 (return_type -> VOID .)
    STRING          reduce using rule 323 (return_type -> VOID .)
    BOOL            reduce using rule 323 (return_type -> VOID .)
    DECIMAL         reduce using rule 323 (return_type -> VOID .)
    SBYTE           reduce using rule 323 (return_type -> VOID .)
    BYTE            reduce using rule 323 (return_type -> VOID .)
    SHORT           reduce using rule 323 (return_type -> VOID .)
    USHORT          reduce using rule 323 (return_type -> VOID .)
    INT             reduce using rule 323 (return_type -> VOID .)
    UINT            reduce using rule 323 (return_type -> VOID .)
    LONG            reduce using rule 323 (return_type -> VOID .)
    ULONG           reduce using rule 323 (return_type -> VOID .)
    CHAR            reduce using rule 323 (return_type -> VOID .)
    FLOAT           reduce using rule 323 (return_type -> VOID .)
    DOUBLE          reduce using rule 323 (return_type -> VOID .)
    RBRACE          reduce using rule 323 (return_type -> VOID .)
    NOT             reduce using rule 323 (return_type -> VOID .)


state 75

    (368) delegate_declaration -> DELEGATE return_type .

    NAMESPACE       reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    CLASS           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    STRUCT          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    ENUM            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    DELEGATE        reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    IDENTIFIER      reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    LPAREN          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    LBRACE          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    $end            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    RBRACE          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    CONST           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    STATIC          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    VOID            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    EXTERN          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    OBJECT          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    STRING          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    BOOL            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    DECIMAL         reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    SBYTE           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    BYTE            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    SHORT           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    USHORT          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    INT             reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    UINT            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    LONG            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    ULONG           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    CHAR            reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    FLOAT           reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    DOUBLE          reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)
    NOT             reduce using rule 368 (delegate_declaration -> DELEGATE return_type .)


state 76

    (322) return_type -> type .
    (36) non_array_type -> type .

    NAMESPACE       reduce using rule 322 (return_type -> type .)
    CLASS           reduce using rule 322 (return_type -> type .)
    STRUCT          reduce using rule 322 (return_type -> type .)
    ENUM            reduce using rule 322 (return_type -> type .)
    DELEGATE        reduce using rule 322 (return_type -> type .)
    IDENTIFIER      reduce using rule 322 (return_type -> type .)
    LPAREN          reduce using rule 322 (return_type -> type .)
    LBRACE          reduce using rule 322 (return_type -> type .)
    $end            reduce using rule 322 (return_type -> type .)
    CONST           reduce using rule 322 (return_type -> type .)
    STATIC          reduce using rule 322 (return_type -> type .)
    VOID            reduce using rule 322 (return_type -> type .)
    EXTERN          reduce using rule 322 (return_type -> type .)
    OBJECT          reduce using rule 322 (return_type -> type .)
    STRING          reduce using rule 322 (return_type -> type .)
    BOOL            reduce using rule 322 (return_type -> type .)
    DECIMAL         reduce using rule 322 (return_type -> type .)
    SBYTE           reduce using rule 322 (return_type -> type .)
    BYTE            reduce using rule 322 (return_type -> type .)
    SHORT           reduce using rule 322 (return_type -> type .)
    USHORT          reduce using rule 322 (return_type -> type .)
    INT             reduce using rule 322 (return_type -> type .)
    UINT            reduce using rule 322 (return_type -> type .)
    LONG            reduce using rule 322 (return_type -> type .)
    ULONG           reduce using rule 322 (return_type -> type .)
    CHAR            reduce using rule 322 (return_type -> type .)
    FLOAT           reduce using rule 322 (return_type -> type .)
    DOUBLE          reduce using rule 322 (return_type -> type .)
    RBRACE          reduce using rule 322 (return_type -> type .)
    NOT             reduce using rule 322 (return_type -> type .)
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 77

    (344) static_constructor_declaration -> static_constructor_modifiers . IDENTIFIER LPAREN RPAREN static_constructor_body

    IDENTIFIER      shift and go to state 121


state 78

    (357) struct_member_declaration -> constructor_declaration .

    CONST           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    IDENTIFIER      reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    CLASS           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    STRUCT          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    ENUM            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    DELEGATE        reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    LPAREN          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    VOID            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    EXTERN          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    LBRACE          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    OBJECT          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    STRING          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    BOOL            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    DECIMAL         reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    SBYTE           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    BYTE            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    SHORT           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    USHORT          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    INT             reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    UINT            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    LONG            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    ULONG           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    CHAR            reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    FLOAT           reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    DOUBLE          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)
    RBRACE          reduce using rule 357 (struct_member_declaration -> constructor_declaration .)


state 79

    (346) static_constructor_modifiers -> STATIC . extern_opt
    (432) extern_opt -> . empty
    (433) extern_opt -> . EXTERN
    (371) empty -> .

    EXTERN          shift and go to state 84
    IDENTIFIER      reduce using rule 371 (empty -> .)

    empty                          shift and go to state 122
    extern_opt                     shift and go to state 123

state 80

    (336) constructor_declarator -> IDENTIFIER . LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
    (369) delegate_declaration -> IDENTIFIER .
    (5) namespace_or_type_name -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LPAREN          shift and go to state 124
    CONST           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    STATIC          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    CLASS           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    STRUCT          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    ENUM            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    DELEGATE        reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    VOID            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    EXTERN          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    LBRACE          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    OBJECT          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    STRING          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    BOOL            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    DECIMAL         reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    SBYTE           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    BYTE            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    SHORT           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    USHORT          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    INT             reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    UINT            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    LONG            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    ULONG           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    CHAR            reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    FLOAT           reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    DOUBLE          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    RBRACE          reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    NOT             reduce using rule 369 (delegate_declaration -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)

  ! IDENTIFIER      [ reduce using rule 369 (delegate_declaration -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 369 (delegate_declaration -> IDENTIFIER .) ]


state 81

    (356) struct_member_declaration -> method_declaration .

    CONST           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    IDENTIFIER      reduce using rule 356 (struct_member_declaration -> method_declaration .)
    STATIC          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    CLASS           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    STRUCT          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    ENUM            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    DELEGATE        reduce using rule 356 (struct_member_declaration -> method_declaration .)
    LPAREN          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    VOID            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    EXTERN          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    LBRACE          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    OBJECT          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    STRING          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    BOOL            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    DECIMAL         reduce using rule 356 (struct_member_declaration -> method_declaration .)
    SBYTE           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    BYTE            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    SHORT           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    USHORT          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    INT             reduce using rule 356 (struct_member_declaration -> method_declaration .)
    UINT            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    LONG            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    ULONG           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    CHAR            reduce using rule 356 (struct_member_declaration -> method_declaration .)
    FLOAT           reduce using rule 356 (struct_member_declaration -> method_declaration .)
    DOUBLE          reduce using rule 356 (struct_member_declaration -> method_declaration .)
    RBRACE          reduce using rule 356 (struct_member_declaration -> method_declaration .)


state 82

    (335) constructor_declaration -> constructor_declarator . constructor_body
    (339) constructor_body -> . block
    (340) constructor_body -> . STMT_TERMINATOR
    (184) block -> . LBRACE statement_list_opt RBRACE

    STMT_TERMINATOR shift and go to state 125
    LBRACE          shift and go to state 126

    constructor_body               shift and go to state 128
    block                          shift and go to state 127

state 83

    (412) struct_member_declarations_opt -> empty .
    (432) extern_opt -> empty .

    RBRACE          reduce using rule 412 (struct_member_declarations_opt -> empty .)
    STATIC          reduce using rule 432 (extern_opt -> empty .)


state 84

    (433) extern_opt -> EXTERN .

    NOT             reduce using rule 433 (extern_opt -> EXTERN .)
    STATIC          reduce using rule 433 (extern_opt -> EXTERN .)
    IDENTIFIER      reduce using rule 433 (extern_opt -> EXTERN .)


state 85

    (320) method_declaration -> method_header . method_body
    (333) method_body -> . block
    (334) method_body -> . STMT_TERMINATOR
    (184) block -> . LBRACE statement_list_opt RBRACE

    STMT_TERMINATOR shift and go to state 129
    LBRACE          shift and go to state 126

    method_body                    shift and go to state 131
    block                          shift and go to state 130

state 86

    (355) struct_member_declaration -> field_declaration .

    CONST           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    IDENTIFIER      reduce using rule 355 (struct_member_declaration -> field_declaration .)
    STATIC          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    CLASS           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    STRUCT          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    ENUM            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    DELEGATE        reduce using rule 355 (struct_member_declaration -> field_declaration .)
    LPAREN          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    VOID            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    EXTERN          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    LBRACE          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    OBJECT          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    STRING          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    BOOL            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    DECIMAL         reduce using rule 355 (struct_member_declaration -> field_declaration .)
    SBYTE           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    BYTE            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    SHORT           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    USHORT          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    INT             reduce using rule 355 (struct_member_declaration -> field_declaration .)
    UINT            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    LONG            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    ULONG           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    CHAR            reduce using rule 355 (struct_member_declaration -> field_declaration .)
    FLOAT           reduce using rule 355 (struct_member_declaration -> field_declaration .)
    DOUBLE          reduce using rule 355 (struct_member_declaration -> field_declaration .)
    RBRACE          reduce using rule 355 (struct_member_declaration -> field_declaration .)


state 87

    (354) struct_member_declaration -> constant_declaration .

    CONST           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    IDENTIFIER      reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    STATIC          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    CLASS           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    STRUCT          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    ENUM            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    DELEGATE        reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    LPAREN          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    VOID            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    EXTERN          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    LBRACE          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    OBJECT          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    STRING          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    BOOL            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    DECIMAL         reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    SBYTE           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    BYTE            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    SHORT           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    USHORT          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    INT             reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    UINT            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    LONG            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    ULONG           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    CHAR            reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    FLOAT           reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    DOUBLE          reduce using rule 354 (struct_member_declaration -> constant_declaration .)
    RBRACE          reduce using rule 354 (struct_member_declaration -> constant_declaration .)


state 88

    (359) struct_member_declaration -> type_declaration .

    CONST           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    IDENTIFIER      reduce using rule 359 (struct_member_declaration -> type_declaration .)
    STATIC          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    CLASS           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    STRUCT          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    ENUM            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    DELEGATE        reduce using rule 359 (struct_member_declaration -> type_declaration .)
    LPAREN          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    VOID            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    EXTERN          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    LBRACE          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    OBJECT          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    STRING          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    BOOL            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    DECIMAL         reduce using rule 359 (struct_member_declaration -> type_declaration .)
    SBYTE           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    BYTE            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    SHORT           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    USHORT          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    INT             reduce using rule 359 (struct_member_declaration -> type_declaration .)
    UINT            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    LONG            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    ULONG           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    CHAR            reduce using rule 359 (struct_member_declaration -> type_declaration .)
    FLOAT           reduce using rule 359 (struct_member_declaration -> type_declaration .)
    DOUBLE          reduce using rule 359 (struct_member_declaration -> type_declaration .)
    RBRACE          reduce using rule 359 (struct_member_declaration -> type_declaration .)


state 89

    (321) method_header -> return_type . member_name LPAREN formal_parameter_list_opt RPAREN
    (324) member_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 132

    member_name                    shift and go to state 133

state 90

    (352) struct_member_declarations -> struct_member_declaration .

    CONST           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    IDENTIFIER      reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    STATIC          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    CLASS           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    STRUCT          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    ENUM            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    DELEGATE        reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    LPAREN          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    VOID            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    EXTERN          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    LBRACE          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    OBJECT          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    STRING          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    BOOL            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    DECIMAL         reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    SBYTE           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    BYTE            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    SHORT           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    USHORT          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    INT             reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    UINT            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    LONG            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    ULONG           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    CHAR            reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    FLOAT           reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    DOUBLE          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)
    RBRACE          reduce using rule 352 (struct_member_declarations -> struct_member_declaration .)


state 91

    (315) field_declaration -> type . variable_declarators STMT_TERMINATOR
    (322) return_type -> type .
    (36) non_array_type -> type .
    (316) variable_declarators -> . variable_declarator
    (317) variable_declarators -> . variable_declarators COMMA variable_declarator
    (318) variable_declarator -> . IDENTIFIER
    (319) variable_declarator -> . IDENTIFIER EQUALS variable_initializer

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACKET        reduce using rule 36 (non_array_type -> type .)
    IDENTIFIER      shift and go to state 134

  ! IDENTIFIER      [ reduce using rule 322 (return_type -> type .) ]

    variable_declarators           shift and go to state 136
    variable_declarator            shift and go to state 135

state 92

    (351) struct_body -> LBRACE struct_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 137


state 93

    (314) constant_declaration -> CONST . type constant_declarators STMT_TERMINATOR
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 138
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 94

    (358) struct_member_declaration -> static_constructor_declaration .

    CONST           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    IDENTIFIER      reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    STATIC          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    CLASS           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    STRUCT          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    ENUM            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    DELEGATE        reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    LPAREN          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    VOID            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    EXTERN          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    LBRACE          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    OBJECT          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    STRING          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    BOOL            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    DECIMAL         reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    SBYTE           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    BYTE            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    SHORT           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    USHORT          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    INT             reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    UINT            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    LONG            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    ULONG           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    CHAR            reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    FLOAT           reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    DOUBLE          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)
    RBRACE          reduce using rule 358 (struct_member_declaration -> static_constructor_declaration .)


state 95

    (345) static_constructor_modifiers -> extern_opt . STATIC

    STATIC          shift and go to state 139


state 96

    (413) struct_member_declarations_opt -> struct_member_declarations .
    (353) struct_member_declarations -> struct_member_declarations . struct_member_declaration
    (354) struct_member_declaration -> . constant_declaration
    (355) struct_member_declaration -> . field_declaration
    (356) struct_member_declaration -> . method_declaration
    (357) struct_member_declaration -> . constructor_declaration
    (358) struct_member_declaration -> . static_constructor_declaration
    (359) struct_member_declaration -> . type_declaration
    (314) constant_declaration -> . CONST type constant_declarators STMT_TERMINATOR
    (315) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (320) method_declaration -> . method_header method_body
    (335) constructor_declaration -> . constructor_declarator constructor_body
    (344) static_constructor_declaration -> . static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (7) type -> . value_type
    (8) type -> . reference_type
    (321) method_header -> . return_type member_name LPAREN formal_parameter_list_opt RPAREN
    (336) constructor_declarator -> . IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
    (345) static_constructor_modifiers -> . extern_opt STATIC
    (346) static_constructor_modifiers -> . STATIC extern_opt
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (322) return_type -> . type
    (323) return_type -> . VOID
    (432) extern_opt -> . empty
    (433) extern_opt -> . EXTERN
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (371) empty -> .
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          reduce using rule 413 (struct_member_declarations_opt -> struct_member_declarations .)
    CONST           shift and go to state 93
    IDENTIFIER      shift and go to state 80
    STATIC          shift and go to state 79
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    LPAREN          shift and go to state 16
    VOID            shift and go to state 74
    EXTERN          shift and go to state 84
    LBRACE          shift and go to state 28
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

  ! STATIC          [ reduce using rule 371 (empty -> .) ]

    static_constructor_modifiers   shift and go to state 77
    constructor_declaration        shift and go to state 78
    simple_type                    shift and go to state 40
    method_declaration             shift and go to state 81
    integral_type                  shift and go to state 62
    delegate_declaration           shift and go to state 22
    enum_declaration               shift and go to state 18
    constructor_declarator         shift and go to state 82
    empty                          shift and go to state 122
    struct_type                    shift and go to state 42
    numeric_type                   shift and go to state 38
    type_name                      shift and go to state 50
    delegate_type                  shift and go to state 51
    field_declaration              shift and go to state 86
    method_header                  shift and go to state 85
    array_type                     shift and go to state 53
    constant_declaration           shift and go to state 87
    type_declaration               shift and go to state 88
    return_type                    shift and go to state 89
    class_declaration              shift and go to state 17
    namespace_or_type_name         shift and go to state 56
    struct_member_declaration      shift and go to state 140
    struct_declaration             shift and go to state 19
    type                           shift and go to state 91
    non_array_type                 shift and go to state 58
    class_type                     shift and go to state 59
    reference_type                 shift and go to state 61
    static_constructor_declaration shift and go to state 94
    extern_opt                     shift and go to state 95
    struct_body                    shift and go to state 29
    floating_point_type            shift and go to state 70
    value_type                     shift and go to state 68

state 97

    (381) smt_terminator_opt -> STMT_TERMINATOR .

    NAMESPACE       reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    CLASS           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    STRUCT          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    ENUM            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    $end            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    CONST           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    STATIC          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    VOID            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    EXTERN          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    STRING          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    BOOL            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    BYTE            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    SHORT           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    USHORT          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    INT             reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    UINT            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    LONG            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    ULONG           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    CHAR            reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)
    NOT             reduce using rule 381 (smt_terminator_opt -> STMT_TERMINATOR .)


state 98

    (380) smt_terminator_opt -> empty .

    NAMESPACE       reduce using rule 380 (smt_terminator_opt -> empty .)
    CLASS           reduce using rule 380 (smt_terminator_opt -> empty .)
    STRUCT          reduce using rule 380 (smt_terminator_opt -> empty .)
    ENUM            reduce using rule 380 (smt_terminator_opt -> empty .)
    DELEGATE        reduce using rule 380 (smt_terminator_opt -> empty .)
    IDENTIFIER      reduce using rule 380 (smt_terminator_opt -> empty .)
    LPAREN          reduce using rule 380 (smt_terminator_opt -> empty .)
    LBRACE          reduce using rule 380 (smt_terminator_opt -> empty .)
    $end            reduce using rule 380 (smt_terminator_opt -> empty .)
    CONST           reduce using rule 380 (smt_terminator_opt -> empty .)
    STATIC          reduce using rule 380 (smt_terminator_opt -> empty .)
    VOID            reduce using rule 380 (smt_terminator_opt -> empty .)
    EXTERN          reduce using rule 380 (smt_terminator_opt -> empty .)
    OBJECT          reduce using rule 380 (smt_terminator_opt -> empty .)
    STRING          reduce using rule 380 (smt_terminator_opt -> empty .)
    BOOL            reduce using rule 380 (smt_terminator_opt -> empty .)
    DECIMAL         reduce using rule 380 (smt_terminator_opt -> empty .)
    SBYTE           reduce using rule 380 (smt_terminator_opt -> empty .)
    BYTE            reduce using rule 380 (smt_terminator_opt -> empty .)
    SHORT           reduce using rule 380 (smt_terminator_opt -> empty .)
    USHORT          reduce using rule 380 (smt_terminator_opt -> empty .)
    INT             reduce using rule 380 (smt_terminator_opt -> empty .)
    UINT            reduce using rule 380 (smt_terminator_opt -> empty .)
    LONG            reduce using rule 380 (smt_terminator_opt -> empty .)
    ULONG           reduce using rule 380 (smt_terminator_opt -> empty .)
    CHAR            reduce using rule 380 (smt_terminator_opt -> empty .)
    FLOAT           reduce using rule 380 (smt_terminator_opt -> empty .)
    DOUBLE          reduce using rule 380 (smt_terminator_opt -> empty .)
    RBRACE          reduce using rule 380 (smt_terminator_opt -> empty .)
    NOT             reduce using rule 380 (smt_terminator_opt -> empty .)


state 99

    (350) struct_declaration -> struct_body smt_terminator_opt .

    NAMESPACE       reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    CLASS           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    STRUCT          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    ENUM            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    DELEGATE        reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    IDENTIFIER      reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    LPAREN          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    LBRACE          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    $end            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    CONST           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    EXTERN          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    STATIC          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    VOID            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    OBJECT          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    STRING          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    BOOL            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    DECIMAL         reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    SBYTE           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    BYTE            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    SHORT           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    USHORT          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    INT             reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    UINT            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    LONG            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    ULONG           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    CHAR            reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    FLOAT           reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    DOUBLE          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    NOT             reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)
    RBRACE          reduce using rule 350 (struct_declaration -> struct_body smt_terminator_opt .)


state 100

    (291) namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .

    NAMESPACE       reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    CLASS           reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    STRUCT          reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    ENUM            reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    DELEGATE        reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    IDENTIFIER      reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    LPAREN          reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    LBRACE          reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    RBRACE          reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)
    $end            reduce using rule 291 (namespace_member_declarations -> namespace_member_declarations namespace_member_declaration .)


state 101

    (6) namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .

    MEMBERACCESS    reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    IDENTIFIER      reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LBRACKET        reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LT              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    GT              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LE              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    GE              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    IS              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    AS              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    EQ              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    NE              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    AND             reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    XOR             reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    OR              reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    CAND            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    CONDOP          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    COR             reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    COMMA           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    RPAREN          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    RBRACE          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    COLON           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    RBRACKET        reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LPAREN          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LBRACE          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    NAMESPACE       reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    CLASS           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    STRUCT          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    ENUM            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    DELEGATE        reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    $end            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    CONST           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    STATIC          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    VOID            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    EXTERN          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    OBJECT          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    STRING          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    BOOL            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    DECIMAL         reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    SBYTE           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    BYTE            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    SHORT           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    USHORT          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    INT             reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    UINT            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    LONG            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    ULONG           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    CHAR            reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    FLOAT           reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    DOUBLE          reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)
    NOT             reduce using rule 6 (namespace_or_type_name -> namespace_or_type_name MEMBERACCESS IDENTIFIER .)


state 102

    (360) enum_declaration -> ENUM IDENTIFIER enum_base_opt . enum_body smt_terminator_opt
    (362) enum_body -> . LBRACE enum_member_declarations_opt RBRACE
    (363) enum_body -> . LBRACE enum_member_declarations COMMA RBRACE

    LBRACE          shift and go to state 141

    enum_body                      shift and go to state 142

state 103

    (361) enum_base -> COLON . integral_type
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR

    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35

    integral_type                  shift and go to state 143

state 104

    (386) enum_base_opt -> empty .

    LBRACE          reduce using rule 386 (enum_base_opt -> empty .)


state 105

    (387) enum_base_opt -> enum_base .

    LBRACE          reduce using rule 387 (enum_base_opt -> enum_base .)


state 106

    (370) delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 144


state 107

    (326) formal_parameter_list -> fixed_parameters COMMA . parameter_array
    (329) fixed_parameters -> fixed_parameters COMMA . fixed_parameter
    (332) parameter_array -> . PARAMS array_type IDENTIFIER
    (330) fixed_parameter -> . type IDENTIFIER default_argument_opt
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    PARAMS          shift and go to state 54
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    parameter_array                shift and go to state 145
    type                           shift and go to state 57
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    floating_point_type            shift and go to state 70
    integral_type                  shift and go to state 62
    fixed_parameter                shift and go to state 146
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 108

    (332) parameter_array -> PARAMS array_type . IDENTIFIER
    (30) reference_type -> array_type .

    IDENTIFIER      shift and go to state 147
    LBRACKET        reduce using rule 30 (reference_type -> array_type .)


state 109

    (36) non_array_type -> type .

    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 110

    (330) fixed_parameter -> type IDENTIFIER . default_argument_opt
    (388) default_argument_opt -> . empty
    (389) default_argument_opt -> . default_argument
    (371) empty -> .
    (331) default_argument -> . EQUALS expression

    COMMA           reduce using rule 371 (empty -> .)
    RPAREN          reduce using rule 371 (empty -> .)
    EQUALS          shift and go to state 151

    default_argument               shift and go to state 148
    empty                          shift and go to state 150
    default_argument_opt           shift and go to state 149

state 111

    (39) rank_specifier -> LBRACKET . dim_separators_opt RBRACKET
    (420) dim_separators_opt -> . empty
    (421) dim_separators_opt -> . dim_separators
    (371) empty -> .
    (43) dim_separators -> . COMMA
    (44) dim_separators -> . dim_separators COMMA

    RBRACKET        reduce using rule 371 (empty -> .)
    COMMA           shift and go to state 155

    dim_separators_opt             shift and go to state 154
    empty                          shift and go to state 153
    dim_separators                 shift and go to state 152

state 112

    (35) array_type -> non_array_type rank_specifiers .
    (38) rank_specifiers -> rank_specifiers . rank_specifier
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    IDENTIFIER      reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LBRACE          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LPAREN          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    RPAREN          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LT              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    GT              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LE              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    GE              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    IS              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    AS              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    EQ              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    NE              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    AND             reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    XOR             reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    OR              reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    CAND            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    CONDOP          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    COR             reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    COMMA           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    STMT_TERMINATOR reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    RBRACE          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    COLON           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    RBRACKET        reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    NAMESPACE       reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    CLASS           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    STRUCT          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    ENUM            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    DELEGATE        reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    $end            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    CONST           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    STATIC          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    VOID            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    EXTERN          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    OBJECT          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    STRING          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    BOOL            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    DECIMAL         reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    SBYTE           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    BYTE            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    SHORT           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    USHORT          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    INT             reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    UINT            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LONG            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    ULONG           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    CHAR            reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    FLOAT           reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    DOUBLE          reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    NOT             reduce using rule 35 (array_type -> non_array_type rank_specifiers .)
    LBRACKET        shift and go to state 111

  ! LBRACKET        [ reduce using rule 35 (array_type -> non_array_type rank_specifiers .) ]

    rank_specifier                 shift and go to state 156

state 113

    (37) rank_specifiers -> rank_specifier .

    LBRACKET        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    IDENTIFIER      reduce using rule 37 (rank_specifiers -> rank_specifier .)
    NAMESPACE       reduce using rule 37 (rank_specifiers -> rank_specifier .)
    CLASS           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    STRUCT          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    ENUM            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DELEGATE        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LPAREN          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LBRACE          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    $end            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    CONST           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    STATIC          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    VOID            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    EXTERN          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    OBJECT          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    STRING          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    BOOL            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DECIMAL         reduce using rule 37 (rank_specifiers -> rank_specifier .)
    SBYTE           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    BYTE            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    SHORT           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    USHORT          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    INT             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    UINT            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LONG            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    ULONG           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    CHAR            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    FLOAT           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DOUBLE          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    RBRACE          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    NOT             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    RPAREN          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LT              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    GT              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LE              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    GE              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    IS              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    AS              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    EQ              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    NE              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    AND             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    XOR             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    OR              reduce using rule 37 (rank_specifiers -> rank_specifier .)
    CAND            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    CONDOP          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    COR             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    COMMA           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    STMT_TERMINATOR reduce using rule 37 (rank_specifiers -> rank_specifier .)
    COLON           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    RBRACKET        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    INCREMENT       reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DECREMENT       reduce using rule 37 (rank_specifiers -> rank_specifier .)
    MEMBERACCESS    reduce using rule 37 (rank_specifiers -> rank_specifier .)
    EQUALS          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    PLUSEQUAL       reduce using rule 37 (rank_specifiers -> rank_specifier .)
    MINUSEQUAL      reduce using rule 37 (rank_specifiers -> rank_specifier .)
    TIMESEQUAL      reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DIVEQUAL        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    MODEQUAL        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    ANDEQUAL        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    OREQUAL         reduce using rule 37 (rank_specifiers -> rank_specifier .)
    XOREQUAL        reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LAMBDADEC       reduce using rule 37 (rank_specifiers -> rank_specifier .)
    RSHIFTEQUAL     reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LSHIFTEQUAL     reduce using rule 37 (rank_specifiers -> rank_specifier .)
    TIMES           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    DIVIDE          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    MOD             reduce using rule 37 (rank_specifiers -> rank_specifier .)
    PLUS            reduce using rule 37 (rank_specifiers -> rank_specifier .)
    MINUS           reduce using rule 37 (rank_specifiers -> rank_specifier .)
    LSHIFT          reduce using rule 37 (rank_specifiers -> rank_specifier .)
    RSHIFT          reduce using rule 37 (rank_specifiers -> rank_specifier .)


state 114

    (302) class_declaration -> CLASS IDENTIFIER class_base_opt . class_body smt_terminator_opt
    (304) class_body -> . LBRACE class_member_declarations_opt RBRACE

    LBRACE          shift and go to state 158

    class_body                     shift and go to state 157

state 115

    (403) class_base_opt -> class_base .

    LBRACE          reduce using rule 403 (class_base_opt -> class_base .)


state 116

    (303) class_base -> COLON . class_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (12) type_name -> . namespace_or_type_name
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    IDENTIFIER      shift and go to state 9

    type_name                      shift and go to state 159
    class_type                     shift and go to state 160
    namespace_or_type_name         shift and go to state 56

state 117

    (402) class_base_opt -> empty .

    LBRACE          reduce using rule 402 (class_base_opt -> empty .)


state 118

    (296) qualified_identifier -> qualified_identifier MEMBERACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 161


state 119

    (297) namespace_body -> LBRACE . using_directives_opt namespace_member_declarations_opt RBRACE
    (426) using_directives_opt -> . empty
    (427) using_directives_opt -> . using_directives
    (371) empty -> .
    (2) using_directives -> . using_directive
    (3) using_directives -> . using_directives using_directive
    (4) using_directive -> . using_namespace_directive
    (46) using_namespace_directive -> . USING namespace_name STMT_TERMINATOR

    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    USING           shift and go to state 4

    using_namespace_directive      shift and go to state 1
    using_directives               shift and go to state 2
    using_directive                shift and go to state 3
    empty                          shift and go to state 6
    using_directives_opt           shift and go to state 162

state 120

    (294) namespace_declaration -> NAMESPACE qualified_identifier namespace_body . smt_terminator_opt
    (380) smt_terminator_opt -> . empty
    (381) smt_terminator_opt -> . STMT_TERMINATOR
    (371) empty -> .

    STMT_TERMINATOR shift and go to state 97
    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    $end            reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)

    empty                          shift and go to state 98
    smt_terminator_opt             shift and go to state 163

state 121

    (344) static_constructor_declaration -> static_constructor_modifiers IDENTIFIER . LPAREN RPAREN static_constructor_body

    LPAREN          shift and go to state 164


state 122

    (432) extern_opt -> empty .

    NOT             reduce using rule 432 (extern_opt -> empty .)
    STATIC          reduce using rule 432 (extern_opt -> empty .)
    IDENTIFIER      reduce using rule 432 (extern_opt -> empty .)


state 123

    (346) static_constructor_modifiers -> STATIC extern_opt .

    IDENTIFIER      reduce using rule 346 (static_constructor_modifiers -> STATIC extern_opt .)


state 124

    (336) constructor_declarator -> IDENTIFIER LPAREN . formal_parameter_list_opt RPAREN constructor_initializer_opt
    (376) formal_parameter_list_opt -> . empty
    (377) formal_parameter_list_opt -> . formal_parameter_list
    (371) empty -> .
    (325) formal_parameter_list -> . fixed_parameters
    (326) formal_parameter_list -> . fixed_parameters COMMA parameter_array
    (327) formal_parameter_list -> . parameter_array
    (328) fixed_parameters -> . fixed_parameter
    (329) fixed_parameters -> . fixed_parameters COMMA fixed_parameter
    (332) parameter_array -> . PARAMS array_type IDENTIFIER
    (330) fixed_parameter -> . type IDENTIFIER default_argument_opt
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RPAREN          reduce using rule 371 (empty -> .)
    PARAMS          shift and go to state 54
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    parameter_array                shift and go to state 36
    formal_parameter_list_opt      shift and go to state 165
    empty                          shift and go to state 60
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    simple_type                    shift and go to state 40
    type                           shift and go to state 57
    class_type                     shift and go to state 59
    formal_parameter_list          shift and go to state 44
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    fixed_parameters               shift and go to state 41
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    fixed_parameter                shift and go to state 48
    type_name                      shift and go to state 50
    value_type                     shift and go to state 68

state 125

    (340) constructor_body -> STMT_TERMINATOR .

    CONST           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    STATIC          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    CLASS           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    STRUCT          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    ENUM            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    VOID            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    EXTERN          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    STRING          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    BOOL            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    BYTE            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    SHORT           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    USHORT          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    INT             reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    UINT            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    LONG            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    ULONG           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    CHAR            reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)
    NOT             reduce using rule 340 (constructor_body -> STMT_TERMINATOR .)


state 126

    (184) block -> LBRACE . statement_list_opt RBRACE
    (408) statement_list_opt -> . empty
    (409) statement_list_opt -> . statement_list
    (371) empty -> .
    (185) statement_list -> . statement
    (186) statement_list -> . statement_list statement
    (187) statement -> . declaration_statement
    (188) statement -> . embedded_statement
    (189) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (190) declaration_statement -> . local_constant_declaration STMT_TERMINATOR
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (191) local_variable_declaration -> . local_variable_type local_variable_declarators
    (205) local_constant_declaration -> . CONST type constant_declarators
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (192) local_variable_type -> . type
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (7) type -> . value_type
    (8) type -> . reference_type
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RBRACE          reduce using rule 371 (empty -> .)
    CONST           shift and go to state 197
    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    LPAREN          shift and go to state 236
    BOOL            shift and go to state 168
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 171
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    DECIMAL         shift and go to state 249
    BYTE            shift and go to state 211
    CHAR            shift and go to state 166
    DOUBLE          shift and go to state 254
    FLOAT           shift and go to state 230
    INT             shift and go to state 190
    LONG            shift and go to state 196
    SBYTE           shift and go to state 181
    SHORT           shift and go to state 207
    UINT            shift and go to state 225
    ULONG           shift and go to state 237
    USHORT          shift and go to state 187

    numeric_type                   shift and go to state 38
    member_access                  shift and go to state 169
    simple_type                    shift and go to state 40
    selection_statement            shift and go to state 173
    cast_expression                shift and go to state 174
    literal                        shift and go to state 221
    statement_list                 shift and go to state 177
    parenthesized_expression       shift and go to state 191
    struct_type                    shift and go to state 42
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    empty                          shift and go to state 167
    declaration_statement          shift and go to state 185
    anonymous_method_expression    shift and go to state 235
    empty_statement                shift and go to state 204
    local_constant_declaration     shift and go to state 192
    switch_statement               shift and go to state 193
    delegate_type                  shift and go to state 51
    assignment                     shift and go to state 198
    type                           shift and go to state 199
    block                          shift and go to state 200
    typeof_expression              shift and go to state 176
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    type_name                      shift and go to state 50
    integral_type                  shift and go to state 62
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    return_statement               shift and go to state 213
    element_access                 shift and go to state 209
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    simple_name                    shift and go to state 203
    this_access                    shift and go to state 251
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 216
    value_type                     shift and go to state 68
    anonymous_object_creation_expression shift and go to state 220
    expression_statement           shift and go to state 175
    for_statement                  shift and go to state 223
    base_access                    shift and go to state 226
    unary_expression               shift and go to state 229
    non_array_type                 shift and go to state 58
    local_variable_type            shift and go to state 231
    statement                      shift and go to state 232
    local_variable_declaration     shift and go to state 178
    default_value_expression       shift and go to state 172
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    array_type                     shift and go to state 53
    statement_list_opt             shift and go to state 242
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 246
    do_statement                   shift and go to state 248
    primary_no_array_creation_expression shift and go to state 250
    jump_statement                 shift and go to state 214
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    post_decrement_expression      shift and go to state 255
    while_statement                shift and go to state 257
    break_statement                shift and go to state 258
    floating_point_type            shift and go to state 70

state 127

    (339) constructor_body -> block .

    CONST           reduce using rule 339 (constructor_body -> block .)
    IDENTIFIER      reduce using rule 339 (constructor_body -> block .)
    STATIC          reduce using rule 339 (constructor_body -> block .)
    CLASS           reduce using rule 339 (constructor_body -> block .)
    STRUCT          reduce using rule 339 (constructor_body -> block .)
    ENUM            reduce using rule 339 (constructor_body -> block .)
    DELEGATE        reduce using rule 339 (constructor_body -> block .)
    LPAREN          reduce using rule 339 (constructor_body -> block .)
    VOID            reduce using rule 339 (constructor_body -> block .)
    EXTERN          reduce using rule 339 (constructor_body -> block .)
    LBRACE          reduce using rule 339 (constructor_body -> block .)
    OBJECT          reduce using rule 339 (constructor_body -> block .)
    STRING          reduce using rule 339 (constructor_body -> block .)
    BOOL            reduce using rule 339 (constructor_body -> block .)
    DECIMAL         reduce using rule 339 (constructor_body -> block .)
    SBYTE           reduce using rule 339 (constructor_body -> block .)
    BYTE            reduce using rule 339 (constructor_body -> block .)
    SHORT           reduce using rule 339 (constructor_body -> block .)
    USHORT          reduce using rule 339 (constructor_body -> block .)
    INT             reduce using rule 339 (constructor_body -> block .)
    UINT            reduce using rule 339 (constructor_body -> block .)
    LONG            reduce using rule 339 (constructor_body -> block .)
    ULONG           reduce using rule 339 (constructor_body -> block .)
    CHAR            reduce using rule 339 (constructor_body -> block .)
    FLOAT           reduce using rule 339 (constructor_body -> block .)
    DOUBLE          reduce using rule 339 (constructor_body -> block .)
    RBRACE          reduce using rule 339 (constructor_body -> block .)
    NOT             reduce using rule 339 (constructor_body -> block .)


state 128

    (335) constructor_declaration -> constructor_declarator constructor_body .

    CONST           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    IDENTIFIER      reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    STATIC          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    CLASS           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    STRUCT          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    ENUM            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    DELEGATE        reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    LPAREN          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    VOID            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    EXTERN          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    LBRACE          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    OBJECT          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    STRING          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    BOOL            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    DECIMAL         reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    SBYTE           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    BYTE            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    SHORT           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    USHORT          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    INT             reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    UINT            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    LONG            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    ULONG           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    CHAR            reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    FLOAT           reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    DOUBLE          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    RBRACE          reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)
    NOT             reduce using rule 335 (constructor_declaration -> constructor_declarator constructor_body .)


state 129

    (334) method_body -> STMT_TERMINATOR .

    CONST           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    STATIC          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    CLASS           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    STRUCT          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    ENUM            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    VOID            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    EXTERN          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    STRING          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    BOOL            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    BYTE            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    SHORT           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    USHORT          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    INT             reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    UINT            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    LONG            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    ULONG           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    CHAR            reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 334 (method_body -> STMT_TERMINATOR .)
    NOT             reduce using rule 334 (method_body -> STMT_TERMINATOR .)


state 130

    (333) method_body -> block .

    CONST           reduce using rule 333 (method_body -> block .)
    IDENTIFIER      reduce using rule 333 (method_body -> block .)
    STATIC          reduce using rule 333 (method_body -> block .)
    CLASS           reduce using rule 333 (method_body -> block .)
    STRUCT          reduce using rule 333 (method_body -> block .)
    ENUM            reduce using rule 333 (method_body -> block .)
    DELEGATE        reduce using rule 333 (method_body -> block .)
    LPAREN          reduce using rule 333 (method_body -> block .)
    VOID            reduce using rule 333 (method_body -> block .)
    EXTERN          reduce using rule 333 (method_body -> block .)
    LBRACE          reduce using rule 333 (method_body -> block .)
    OBJECT          reduce using rule 333 (method_body -> block .)
    STRING          reduce using rule 333 (method_body -> block .)
    BOOL            reduce using rule 333 (method_body -> block .)
    DECIMAL         reduce using rule 333 (method_body -> block .)
    SBYTE           reduce using rule 333 (method_body -> block .)
    BYTE            reduce using rule 333 (method_body -> block .)
    SHORT           reduce using rule 333 (method_body -> block .)
    USHORT          reduce using rule 333 (method_body -> block .)
    INT             reduce using rule 333 (method_body -> block .)
    UINT            reduce using rule 333 (method_body -> block .)
    LONG            reduce using rule 333 (method_body -> block .)
    ULONG           reduce using rule 333 (method_body -> block .)
    CHAR            reduce using rule 333 (method_body -> block .)
    FLOAT           reduce using rule 333 (method_body -> block .)
    DOUBLE          reduce using rule 333 (method_body -> block .)
    RBRACE          reduce using rule 333 (method_body -> block .)
    NOT             reduce using rule 333 (method_body -> block .)


state 131

    (320) method_declaration -> method_header method_body .

    CONST           reduce using rule 320 (method_declaration -> method_header method_body .)
    IDENTIFIER      reduce using rule 320 (method_declaration -> method_header method_body .)
    EXTERN          reduce using rule 320 (method_declaration -> method_header method_body .)
    STATIC          reduce using rule 320 (method_declaration -> method_header method_body .)
    CLASS           reduce using rule 320 (method_declaration -> method_header method_body .)
    STRUCT          reduce using rule 320 (method_declaration -> method_header method_body .)
    ENUM            reduce using rule 320 (method_declaration -> method_header method_body .)
    DELEGATE        reduce using rule 320 (method_declaration -> method_header method_body .)
    LPAREN          reduce using rule 320 (method_declaration -> method_header method_body .)
    VOID            reduce using rule 320 (method_declaration -> method_header method_body .)
    LBRACE          reduce using rule 320 (method_declaration -> method_header method_body .)
    OBJECT          reduce using rule 320 (method_declaration -> method_header method_body .)
    STRING          reduce using rule 320 (method_declaration -> method_header method_body .)
    BOOL            reduce using rule 320 (method_declaration -> method_header method_body .)
    DECIMAL         reduce using rule 320 (method_declaration -> method_header method_body .)
    SBYTE           reduce using rule 320 (method_declaration -> method_header method_body .)
    BYTE            reduce using rule 320 (method_declaration -> method_header method_body .)
    SHORT           reduce using rule 320 (method_declaration -> method_header method_body .)
    USHORT          reduce using rule 320 (method_declaration -> method_header method_body .)
    INT             reduce using rule 320 (method_declaration -> method_header method_body .)
    UINT            reduce using rule 320 (method_declaration -> method_header method_body .)
    LONG            reduce using rule 320 (method_declaration -> method_header method_body .)
    ULONG           reduce using rule 320 (method_declaration -> method_header method_body .)
    CHAR            reduce using rule 320 (method_declaration -> method_header method_body .)
    FLOAT           reduce using rule 320 (method_declaration -> method_header method_body .)
    DOUBLE          reduce using rule 320 (method_declaration -> method_header method_body .)
    NOT             reduce using rule 320 (method_declaration -> method_header method_body .)
    RBRACE          reduce using rule 320 (method_declaration -> method_header method_body .)


state 132

    (324) member_name -> IDENTIFIER .

    LPAREN          reduce using rule 324 (member_name -> IDENTIFIER .)


state 133

    (321) method_header -> return_type member_name . LPAREN formal_parameter_list_opt RPAREN

    LPAREN          shift and go to state 260


state 134

    (318) variable_declarator -> IDENTIFIER .
    (319) variable_declarator -> IDENTIFIER . EQUALS variable_initializer

    STMT_TERMINATOR reduce using rule 318 (variable_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 318 (variable_declarator -> IDENTIFIER .)
    EQUALS          shift and go to state 261


state 135

    (316) variable_declarators -> variable_declarator .

    STMT_TERMINATOR reduce using rule 316 (variable_declarators -> variable_declarator .)
    COMMA           reduce using rule 316 (variable_declarators -> variable_declarator .)


state 136

    (315) field_declaration -> type variable_declarators . STMT_TERMINATOR
    (317) variable_declarators -> variable_declarators . COMMA variable_declarator

    STMT_TERMINATOR shift and go to state 263
    COMMA           shift and go to state 262


state 137

    (351) struct_body -> LBRACE struct_member_declarations_opt RBRACE .

    STMT_TERMINATOR reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    CONST           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    IDENTIFIER      reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    STATIC          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    CLASS           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    STRUCT          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    ENUM            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    DELEGATE        reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    LPAREN          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    VOID            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    EXTERN          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    LBRACE          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    OBJECT          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    STRING          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    BOOL            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    DECIMAL         reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    SBYTE           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    BYTE            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    SHORT           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    USHORT          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    INT             reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    UINT            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    LONG            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    ULONG           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    CHAR            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    FLOAT           reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    DOUBLE          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    RBRACE          reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    NOT             reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    NAMESPACE       reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)
    $end            reduce using rule 351 (struct_body -> LBRACE struct_member_declarations_opt RBRACE .)


state 138

    (314) constant_declaration -> CONST type . constant_declarators STMT_TERMINATOR
    (36) non_array_type -> type .
    (206) constant_declarators -> . constant_declarator
    (207) constant_declarators -> . constant_declarators COMMA constant_declarator
    (208) constant_declarator -> . IDENTIFIER EQUALS constant_expression

    LBRACKET        reduce using rule 36 (non_array_type -> type .)
    IDENTIFIER      shift and go to state 264

    constant_declarators           shift and go to state 266
    constant_declarator            shift and go to state 265

state 139

    (345) static_constructor_modifiers -> extern_opt STATIC .

    IDENTIFIER      reduce using rule 345 (static_constructor_modifiers -> extern_opt STATIC .)


state 140

    (353) struct_member_declarations -> struct_member_declarations struct_member_declaration .

    CONST           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    IDENTIFIER      reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    STATIC          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    CLASS           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    STRUCT          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    ENUM            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    DELEGATE        reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    LPAREN          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    VOID            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    EXTERN          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    LBRACE          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    OBJECT          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    STRING          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    BOOL            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    DECIMAL         reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    SBYTE           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    BYTE            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    SHORT           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    USHORT          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    INT             reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    UINT            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    LONG            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    ULONG           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    CHAR            reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    FLOAT           reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    DOUBLE          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)
    RBRACE          reduce using rule 353 (struct_member_declarations -> struct_member_declarations struct_member_declaration .)


state 141

    (362) enum_body -> LBRACE . enum_member_declarations_opt RBRACE
    (363) enum_body -> LBRACE . enum_member_declarations COMMA RBRACE
    (382) enum_member_declarations_opt -> . empty
    (383) enum_member_declarations_opt -> . enum_member_declarations
    (364) enum_member_declarations -> . enum_member_declaration
    (365) enum_member_declarations -> . enum_member_declarations COMMA enum_member_declaration
    (371) empty -> .
    (366) enum_member_declaration -> . IDENTIFIER
    (367) enum_member_declaration -> . IDENTIFIER EQUALS constant_expression

    RBRACE          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 267

    enum_member_declarations_opt   shift and go to state 270
    empty                          shift and go to state 271
    enum_member_declaration        shift and go to state 268
    enum_member_declarations       shift and go to state 269

state 142

    (360) enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body . smt_terminator_opt
    (380) smt_terminator_opt -> . empty
    (381) smt_terminator_opt -> . STMT_TERMINATOR
    (371) empty -> .

    STMT_TERMINATOR shift and go to state 97
    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    $end            reduce using rule 371 (empty -> .)
    CONST           reduce using rule 371 (empty -> .)
    STATIC          reduce using rule 371 (empty -> .)
    VOID            reduce using rule 371 (empty -> .)
    EXTERN          reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)

    empty                          shift and go to state 98
    smt_terminator_opt             shift and go to state 272

state 143

    (361) enum_base -> COLON integral_type .

    LBRACE          reduce using rule 361 (enum_base -> COLON integral_type .)


state 144

    (370) delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .

    NAMESPACE       reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    CLASS           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    STRUCT          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    ENUM            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    DELEGATE        reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    LPAREN          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    LBRACE          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    $end            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    RBRACE          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    CONST           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    STATIC          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    VOID            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    EXTERN          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    OBJECT          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    STRING          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    BOOL            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    DECIMAL         reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    SBYTE           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    BYTE            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    SHORT           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    USHORT          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    INT             reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    UINT            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    LONG            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    ULONG           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    CHAR            reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    FLOAT           reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    DOUBLE          reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)
    NOT             reduce using rule 370 (delegate_declaration -> LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR .)


state 145

    (326) formal_parameter_list -> fixed_parameters COMMA parameter_array .

    RPAREN          reduce using rule 326 (formal_parameter_list -> fixed_parameters COMMA parameter_array .)


state 146

    (329) fixed_parameters -> fixed_parameters COMMA fixed_parameter .

    COMMA           reduce using rule 329 (fixed_parameters -> fixed_parameters COMMA fixed_parameter .)
    RPAREN          reduce using rule 329 (fixed_parameters -> fixed_parameters COMMA fixed_parameter .)


state 147

    (332) parameter_array -> PARAMS array_type IDENTIFIER .

    RPAREN          reduce using rule 332 (parameter_array -> PARAMS array_type IDENTIFIER .)


state 148

    (389) default_argument_opt -> default_argument .

    COMMA           reduce using rule 389 (default_argument_opt -> default_argument .)
    RPAREN          reduce using rule 389 (default_argument_opt -> default_argument .)


state 149

    (330) fixed_parameter -> type IDENTIFIER default_argument_opt .

    COMMA           reduce using rule 330 (fixed_parameter -> type IDENTIFIER default_argument_opt .)
    RPAREN          reduce using rule 330 (fixed_parameter -> type IDENTIFIER default_argument_opt .)


state 150

    (388) default_argument_opt -> empty .

    COMMA           reduce using rule 388 (default_argument_opt -> empty .)
    RPAREN          reduce using rule 388 (default_argument_opt -> empty .)


state 151

    (331) default_argument -> EQUALS . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 282
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 152

    (421) dim_separators_opt -> dim_separators .
    (44) dim_separators -> dim_separators . COMMA

    RBRACKET        reduce using rule 421 (dim_separators_opt -> dim_separators .)
    COMMA           shift and go to state 318


state 153

    (420) dim_separators_opt -> empty .

    RBRACKET        reduce using rule 420 (dim_separators_opt -> empty .)


state 154

    (39) rank_specifier -> LBRACKET dim_separators_opt . RBRACKET

    RBRACKET        shift and go to state 319


state 155

    (43) dim_separators -> COMMA .

    COMMA           reduce using rule 43 (dim_separators -> COMMA .)
    RBRACKET        reduce using rule 43 (dim_separators -> COMMA .)


state 156

    (38) rank_specifiers -> rank_specifiers rank_specifier .

    LBRACKET        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    IDENTIFIER      reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    NAMESPACE       reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    CLASS           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    STRUCT          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    ENUM            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DELEGATE        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LPAREN          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LBRACE          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    $end            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    CONST           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    STATIC          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    VOID            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    EXTERN          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    OBJECT          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    STRING          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    BOOL            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DECIMAL         reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    SBYTE           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    BYTE            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    SHORT           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    USHORT          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    INT             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    UINT            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LONG            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    ULONG           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    CHAR            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    FLOAT           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DOUBLE          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    RBRACE          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    NOT             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    RPAREN          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LT              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    GT              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LE              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    GE              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    IS              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    AS              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    EQ              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    NE              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    AND             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    XOR             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    OR              reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    CAND            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    CONDOP          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    COR             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    COMMA           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    STMT_TERMINATOR reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    COLON           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    RBRACKET        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    INCREMENT       reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DECREMENT       reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    MEMBERACCESS    reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    EQUALS          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    PLUSEQUAL       reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    MINUSEQUAL      reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    TIMESEQUAL      reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DIVEQUAL        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    MODEQUAL        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    ANDEQUAL        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    OREQUAL         reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    XOREQUAL        reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LAMBDADEC       reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    RSHIFTEQUAL     reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LSHIFTEQUAL     reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    TIMES           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    DIVIDE          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    MOD             reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    PLUS            reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    MINUS           reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    LSHIFT          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)
    RSHIFT          reduce using rule 38 (rank_specifiers -> rank_specifiers rank_specifier .)


state 157

    (302) class_declaration -> CLASS IDENTIFIER class_base_opt class_body . smt_terminator_opt
    (380) smt_terminator_opt -> . empty
    (381) smt_terminator_opt -> . STMT_TERMINATOR
    (371) empty -> .

    STMT_TERMINATOR shift and go to state 97
    NAMESPACE       reduce using rule 371 (empty -> .)
    CLASS           reduce using rule 371 (empty -> .)
    STRUCT          reduce using rule 371 (empty -> .)
    ENUM            reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    IDENTIFIER      reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    $end            reduce using rule 371 (empty -> .)
    CONST           reduce using rule 371 (empty -> .)
    STATIC          reduce using rule 371 (empty -> .)
    VOID            reduce using rule 371 (empty -> .)
    EXTERN          reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)

    empty                          shift and go to state 98
    smt_terminator_opt             shift and go to state 320

state 158

    (304) class_body -> LBRACE . class_member_declarations_opt RBRACE
    (430) class_member_declarations_opt -> . empty
    (431) class_member_declarations_opt -> . class_member_declarations
    (371) empty -> .
    (305) class_member_declarations -> . class_member_declaration
    (306) class_member_declarations -> . class_member_declarations class_member_declaration
    (307) class_member_declaration -> . constant_declaration
    (308) class_member_declaration -> . field_declaration
    (309) class_member_declaration -> . method_declaration
    (310) class_member_declaration -> . constructor_declaration
    (311) class_member_declaration -> . destructor_declaration
    (312) class_member_declaration -> . static_constructor_declaration
    (313) class_member_declaration -> . type_declaration
    (314) constant_declaration -> . CONST type constant_declarators STMT_TERMINATOR
    (315) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (320) method_declaration -> . method_header method_body
    (335) constructor_declaration -> . constructor_declarator constructor_body
    (341) destructor_declaration -> . extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body
    (344) static_constructor_declaration -> . static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (7) type -> . value_type
    (8) type -> . reference_type
    (321) method_header -> . return_type member_name LPAREN formal_parameter_list_opt RPAREN
    (336) constructor_declarator -> . IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
    (432) extern_opt -> . empty
    (433) extern_opt -> . EXTERN
    (345) static_constructor_modifiers -> . extern_opt STATIC
    (346) static_constructor_modifiers -> . STATIC extern_opt
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (322) return_type -> . type
    (323) return_type -> . VOID
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    CONST           shift and go to state 93
    IDENTIFIER      shift and go to state 80
    EXTERN          shift and go to state 84
    STATIC          shift and go to state 79
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    LPAREN          shift and go to state 16
    VOID            shift and go to state 74
    LBRACE          shift and go to state 28
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

  ! STATIC          [ reduce using rule 371 (empty -> .) ]

    static_constructor_modifiers   shift and go to state 77
    destructor_declaration         shift and go to state 321
    constructor_declaration        shift and go to state 322
    simple_type                    shift and go to state 40
    method_declaration             shift and go to state 323
    integral_type                  shift and go to state 62
    delegate_declaration           shift and go to state 22
    enum_declaration               shift and go to state 18
    constructor_declarator         shift and go to state 82
    empty                          shift and go to state 324
    non_array_type                 shift and go to state 58
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    class_member_declaration       shift and go to state 326
    type_name                      shift and go to state 50
    delegate_type                  shift and go to state 51
    field_declaration              shift and go to state 327
    method_header                  shift and go to state 85
    array_type                     shift and go to state 53
    constant_declaration           shift and go to state 328
    type_declaration               shift and go to state 329
    return_type                    shift and go to state 89
    class_declaration              shift and go to state 17
    namespace_or_type_name         shift and go to state 56
    struct_declaration             shift and go to state 19
    type                           shift and go to state 91
    class_type                     shift and go to state 59
    reference_type                 shift and go to state 61
    static_constructor_declaration shift and go to state 330
    extern_opt                     shift and go to state 331
    class_member_declarations      shift and go to state 325
    struct_body                    shift and go to state 29
    class_member_declarations_opt  shift and go to state 332
    value_type                     shift and go to state 68

state 159

    (32) class_type -> type_name .

    LBRACE          reduce using rule 32 (class_type -> type_name .)


state 160

    (303) class_base -> COLON class_type .

    LBRACE          reduce using rule 303 (class_base -> COLON class_type .)


state 161

    (296) qualified_identifier -> qualified_identifier MEMBERACCESS IDENTIFIER .

    MEMBERACCESS    reduce using rule 296 (qualified_identifier -> qualified_identifier MEMBERACCESS IDENTIFIER .)
    LBRACE          reduce using rule 296 (qualified_identifier -> qualified_identifier MEMBERACCESS IDENTIFIER .)


state 162

    (297) namespace_body -> LBRACE using_directives_opt . namespace_member_declarations_opt RBRACE
    (394) namespace_member_declarations_opt -> . empty
    (395) namespace_member_declarations_opt -> . namespace_member_declarations
    (371) empty -> .
    (290) namespace_member_declarations -> . namespace_member_declaration
    (291) namespace_member_declarations -> . namespace_member_declarations namespace_member_declaration
    (292) namespace_member_declaration -> . namespace_declaration
    (293) namespace_member_declaration -> . type_declaration
    (294) namespace_declaration -> . NAMESPACE qualified_identifier namespace_body smt_terminator_opt
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE

    RBRACE          reduce using rule 371 (empty -> .)
    NAMESPACE       shift and go to state 25
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    IDENTIFIER      shift and go to state 20
    LPAREN          shift and go to state 16
    LBRACE          shift and go to state 28

    namespace_member_declaration   shift and go to state 12
    type_declaration               shift and go to state 14
    class_declaration              shift and go to state 17
    struct_declaration             shift and go to state 19
    struct_body                    shift and go to state 29
    delegate_declaration           shift and go to state 22
    namespace_member_declarations_opt shift and go to state 333
    namespace_declaration          shift and go to state 24
    enum_declaration               shift and go to state 18
    empty                          shift and go to state 26
    namespace_member_declarations  shift and go to state 30

state 163

    (294) namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .

    NAMESPACE       reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    CLASS           reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    STRUCT          reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    ENUM            reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    DELEGATE        reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    IDENTIFIER      reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    LPAREN          reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    LBRACE          reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    $end            reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)
    RBRACE          reduce using rule 294 (namespace_declaration -> NAMESPACE qualified_identifier namespace_body smt_terminator_opt .)


state 164

    (344) static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN . RPAREN static_constructor_body

    RPAREN          shift and go to state 334


state 165

    (336) constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt . RPAREN constructor_initializer_opt

    RPAREN          shift and go to state 335


state 166

    (117) predefined_type -> CHAR .
    (26) integral_type -> CHAR .

    MEMBERACCESS    reduce using rule 117 (predefined_type -> CHAR .)
    IDENTIFIER      reduce using rule 26 (integral_type -> CHAR .)
    LBRACKET        reduce using rule 26 (integral_type -> CHAR .)


state 167

    (408) statement_list_opt -> empty .

    RBRACE          reduce using rule 408 (statement_list_opt -> empty .)


state 168

    (14) simple_type -> BOOL .
    (115) predefined_type -> BOOL .

    IDENTIFIER      reduce using rule 14 (simple_type -> BOOL .)
    LBRACKET        reduce using rule 14 (simple_type -> BOOL .)
    RPAREN          reduce using rule 14 (simple_type -> BOOL .)
    MEMBERACCESS    reduce using rule 115 (predefined_type -> BOOL .)


state 169

    (98) primary_no_array_creation_expression -> member_access .

    LBRACKET        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MEMBERACCESS    reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LPAREN          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    INCREMENT       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    DECREMENT       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    STMT_TERMINATOR reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    EQUALS          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    PLUSEQUAL       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MINUSEQUAL      reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    TIMESEQUAL      reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    DIVEQUAL        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MODEQUAL        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    ANDEQUAL        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    OREQUAL         reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    XOREQUAL        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LAMBDADEC       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    RSHIFTEQUAL     reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LSHIFTEQUAL     reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    TIMES           reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    DIVIDE          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MOD             reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    PLUS            reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MINUS           reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LSHIFT          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    RSHIFT          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LT              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    GT              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LE              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    GE              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    IS              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    AS              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    EQ              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    NE              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    AND             reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    XOR             reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    OR              reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    CAND            reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    CONDOP          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    COR             reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    COMMA           reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    RPAREN          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    RBRACE          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    COLON           reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    RBRACKET        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)


state 170

    (259) for_statement -> FOR . LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement

    LPAREN          shift and go to state 336


state 171

    (111) simple_name -> IDENTIFIER .
    (5) namespace_or_type_name -> IDENTIFIER .

  ! reduce/reduce conflict for MEMBERACCESS resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQUALS          reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    OREQUAL         reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOREQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    LAMBDADEC       reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)

  ! LBRACKET        [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]
  ! MEMBERACCESS    [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]


state 172

    (109) primary_no_array_creation_expression -> default_value_expression .

    LBRACKET        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    MEMBERACCESS    reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LPAREN          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    INCREMENT       reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    DECREMENT       reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    STMT_TERMINATOR reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    EQUALS          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    PLUSEQUAL       reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    MINUSEQUAL      reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    TIMESEQUAL      reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    DIVEQUAL        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    MODEQUAL        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    ANDEQUAL        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    OREQUAL         reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    XOREQUAL        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LAMBDADEC       reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    RSHIFTEQUAL     reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LSHIFTEQUAL     reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    TIMES           reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    DIVIDE          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    MOD             reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    PLUS            reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    MINUS           reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LSHIFT          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    RSHIFT          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LT              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    GT              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    LE              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    GE              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    IS              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    AS              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    EQ              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    NE              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    AND             reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    XOR             reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    OR              reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    CAND            reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    CONDOP          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    COR             reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    COMMA           reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    RPAREN          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    RBRACE          reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    COLON           reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)
    RBRACKET        reduce using rule 109 (primary_no_array_creation_expression -> default_value_expression .)


state 173

    (213) embedded_statement -> selection_statement .

    CONST           reduce using rule 213 (embedded_statement -> selection_statement .)
    LBRACE          reduce using rule 213 (embedded_statement -> selection_statement .)
    STMT_TERMINATOR reduce using rule 213 (embedded_statement -> selection_statement .)
    IF              reduce using rule 213 (embedded_statement -> selection_statement .)
    SWITCH          reduce using rule 213 (embedded_statement -> selection_statement .)
    WHILE           reduce using rule 213 (embedded_statement -> selection_statement .)
    DO              reduce using rule 213 (embedded_statement -> selection_statement .)
    FOR             reduce using rule 213 (embedded_statement -> selection_statement .)
    BREAK           reduce using rule 213 (embedded_statement -> selection_statement .)
    CONTINUE        reduce using rule 213 (embedded_statement -> selection_statement .)
    GOTO            reduce using rule 213 (embedded_statement -> selection_statement .)
    RETURN          reduce using rule 213 (embedded_statement -> selection_statement .)
    NEW             reduce using rule 213 (embedded_statement -> selection_statement .)
    INCREMENT       reduce using rule 213 (embedded_statement -> selection_statement .)
    DECREMENT       reduce using rule 213 (embedded_statement -> selection_statement .)
    PLUS            reduce using rule 213 (embedded_statement -> selection_statement .)
    MINUS           reduce using rule 213 (embedded_statement -> selection_statement .)
    LNOT            reduce using rule 213 (embedded_statement -> selection_statement .)
    NOT             reduce using rule 213 (embedded_statement -> selection_statement .)
    OBJECT          reduce using rule 213 (embedded_statement -> selection_statement .)
    STRING          reduce using rule 213 (embedded_statement -> selection_statement .)
    LPAREN          reduce using rule 213 (embedded_statement -> selection_statement .)
    BOOL            reduce using rule 213 (embedded_statement -> selection_statement .)
    INTCONST        reduce using rule 213 (embedded_statement -> selection_statement .)
    STRCONST        reduce using rule 213 (embedded_statement -> selection_statement .)
    CHCONST         reduce using rule 213 (embedded_statement -> selection_statement .)
    IDENTIFIER      reduce using rule 213 (embedded_statement -> selection_statement .)
    THIS            reduce using rule 213 (embedded_statement -> selection_statement .)
    BASE            reduce using rule 213 (embedded_statement -> selection_statement .)
    TYPEOF          reduce using rule 213 (embedded_statement -> selection_statement .)
    DEFAULT         reduce using rule 213 (embedded_statement -> selection_statement .)
    DELEGATE        reduce using rule 213 (embedded_statement -> selection_statement .)
    DECIMAL         reduce using rule 213 (embedded_statement -> selection_statement .)
    BYTE            reduce using rule 213 (embedded_statement -> selection_statement .)
    CHAR            reduce using rule 213 (embedded_statement -> selection_statement .)
    DOUBLE          reduce using rule 213 (embedded_statement -> selection_statement .)
    FLOAT           reduce using rule 213 (embedded_statement -> selection_statement .)
    INT             reduce using rule 213 (embedded_statement -> selection_statement .)
    LONG            reduce using rule 213 (embedded_statement -> selection_statement .)
    SBYTE           reduce using rule 213 (embedded_statement -> selection_statement .)
    SHORT           reduce using rule 213 (embedded_statement -> selection_statement .)
    UINT            reduce using rule 213 (embedded_statement -> selection_statement .)
    ULONG           reduce using rule 213 (embedded_statement -> selection_statement .)
    USHORT          reduce using rule 213 (embedded_statement -> selection_statement .)
    RBRACE          reduce using rule 213 (embedded_statement -> selection_statement .)
    ELSE            reduce using rule 213 (embedded_statement -> selection_statement .)
    CASE            reduce using rule 213 (embedded_statement -> selection_statement .)


state 174

    (92) unary_expression -> cast_expression .

    EQUALS          reduce using rule 92 (unary_expression -> cast_expression .)
    PLUSEQUAL       reduce using rule 92 (unary_expression -> cast_expression .)
    MINUSEQUAL      reduce using rule 92 (unary_expression -> cast_expression .)
    TIMESEQUAL      reduce using rule 92 (unary_expression -> cast_expression .)
    DIVEQUAL        reduce using rule 92 (unary_expression -> cast_expression .)
    MODEQUAL        reduce using rule 92 (unary_expression -> cast_expression .)
    ANDEQUAL        reduce using rule 92 (unary_expression -> cast_expression .)
    OREQUAL         reduce using rule 92 (unary_expression -> cast_expression .)
    XOREQUAL        reduce using rule 92 (unary_expression -> cast_expression .)
    LAMBDADEC       reduce using rule 92 (unary_expression -> cast_expression .)
    RSHIFTEQUAL     reduce using rule 92 (unary_expression -> cast_expression .)
    LSHIFTEQUAL     reduce using rule 92 (unary_expression -> cast_expression .)
    STMT_TERMINATOR reduce using rule 92 (unary_expression -> cast_expression .)
    TIMES           reduce using rule 92 (unary_expression -> cast_expression .)
    DIVIDE          reduce using rule 92 (unary_expression -> cast_expression .)
    MOD             reduce using rule 92 (unary_expression -> cast_expression .)
    PLUS            reduce using rule 92 (unary_expression -> cast_expression .)
    MINUS           reduce using rule 92 (unary_expression -> cast_expression .)
    LSHIFT          reduce using rule 92 (unary_expression -> cast_expression .)
    RSHIFT          reduce using rule 92 (unary_expression -> cast_expression .)
    LT              reduce using rule 92 (unary_expression -> cast_expression .)
    GT              reduce using rule 92 (unary_expression -> cast_expression .)
    LE              reduce using rule 92 (unary_expression -> cast_expression .)
    GE              reduce using rule 92 (unary_expression -> cast_expression .)
    IS              reduce using rule 92 (unary_expression -> cast_expression .)
    AS              reduce using rule 92 (unary_expression -> cast_expression .)
    EQ              reduce using rule 92 (unary_expression -> cast_expression .)
    NE              reduce using rule 92 (unary_expression -> cast_expression .)
    AND             reduce using rule 92 (unary_expression -> cast_expression .)
    XOR             reduce using rule 92 (unary_expression -> cast_expression .)
    OR              reduce using rule 92 (unary_expression -> cast_expression .)
    CAND            reduce using rule 92 (unary_expression -> cast_expression .)
    CONDOP          reduce using rule 92 (unary_expression -> cast_expression .)
    COR             reduce using rule 92 (unary_expression -> cast_expression .)
    COMMA           reduce using rule 92 (unary_expression -> cast_expression .)
    RPAREN          reduce using rule 92 (unary_expression -> cast_expression .)
    RBRACE          reduce using rule 92 (unary_expression -> cast_expression .)
    COLON           reduce using rule 92 (unary_expression -> cast_expression .)
    RBRACKET        reduce using rule 92 (unary_expression -> cast_expression .)


state 175

    (212) embedded_statement -> expression_statement .

    CONST           reduce using rule 212 (embedded_statement -> expression_statement .)
    LBRACE          reduce using rule 212 (embedded_statement -> expression_statement .)
    STMT_TERMINATOR reduce using rule 212 (embedded_statement -> expression_statement .)
    IF              reduce using rule 212 (embedded_statement -> expression_statement .)
    SWITCH          reduce using rule 212 (embedded_statement -> expression_statement .)
    WHILE           reduce using rule 212 (embedded_statement -> expression_statement .)
    DO              reduce using rule 212 (embedded_statement -> expression_statement .)
    FOR             reduce using rule 212 (embedded_statement -> expression_statement .)
    BREAK           reduce using rule 212 (embedded_statement -> expression_statement .)
    CONTINUE        reduce using rule 212 (embedded_statement -> expression_statement .)
    GOTO            reduce using rule 212 (embedded_statement -> expression_statement .)
    RETURN          reduce using rule 212 (embedded_statement -> expression_statement .)
    NEW             reduce using rule 212 (embedded_statement -> expression_statement .)
    INCREMENT       reduce using rule 212 (embedded_statement -> expression_statement .)
    DECREMENT       reduce using rule 212 (embedded_statement -> expression_statement .)
    PLUS            reduce using rule 212 (embedded_statement -> expression_statement .)
    MINUS           reduce using rule 212 (embedded_statement -> expression_statement .)
    LNOT            reduce using rule 212 (embedded_statement -> expression_statement .)
    NOT             reduce using rule 212 (embedded_statement -> expression_statement .)
    OBJECT          reduce using rule 212 (embedded_statement -> expression_statement .)
    STRING          reduce using rule 212 (embedded_statement -> expression_statement .)
    LPAREN          reduce using rule 212 (embedded_statement -> expression_statement .)
    BOOL            reduce using rule 212 (embedded_statement -> expression_statement .)
    INTCONST        reduce using rule 212 (embedded_statement -> expression_statement .)
    STRCONST        reduce using rule 212 (embedded_statement -> expression_statement .)
    CHCONST         reduce using rule 212 (embedded_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 212 (embedded_statement -> expression_statement .)
    THIS            reduce using rule 212 (embedded_statement -> expression_statement .)
    BASE            reduce using rule 212 (embedded_statement -> expression_statement .)
    TYPEOF          reduce using rule 212 (embedded_statement -> expression_statement .)
    DEFAULT         reduce using rule 212 (embedded_statement -> expression_statement .)
    DELEGATE        reduce using rule 212 (embedded_statement -> expression_statement .)
    DECIMAL         reduce using rule 212 (embedded_statement -> expression_statement .)
    BYTE            reduce using rule 212 (embedded_statement -> expression_statement .)
    CHAR            reduce using rule 212 (embedded_statement -> expression_statement .)
    DOUBLE          reduce using rule 212 (embedded_statement -> expression_statement .)
    FLOAT           reduce using rule 212 (embedded_statement -> expression_statement .)
    INT             reduce using rule 212 (embedded_statement -> expression_statement .)
    LONG            reduce using rule 212 (embedded_statement -> expression_statement .)
    SBYTE           reduce using rule 212 (embedded_statement -> expression_statement .)
    SHORT           reduce using rule 212 (embedded_statement -> expression_statement .)
    UINT            reduce using rule 212 (embedded_statement -> expression_statement .)
    ULONG           reduce using rule 212 (embedded_statement -> expression_statement .)
    USHORT          reduce using rule 212 (embedded_statement -> expression_statement .)
    RBRACE          reduce using rule 212 (embedded_statement -> expression_statement .)
    ELSE            reduce using rule 212 (embedded_statement -> expression_statement .)
    CASE            reduce using rule 212 (embedded_statement -> expression_statement .)


state 176

    (108) primary_no_array_creation_expression -> typeof_expression .

    LBRACKET        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    MEMBERACCESS    reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LPAREN          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    INCREMENT       reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    DECREMENT       reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    STMT_TERMINATOR reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    EQUALS          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    PLUSEQUAL       reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    MINUSEQUAL      reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    TIMESEQUAL      reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    DIVEQUAL        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    MODEQUAL        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    ANDEQUAL        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    OREQUAL         reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    XOREQUAL        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LAMBDADEC       reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    RSHIFTEQUAL     reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LSHIFTEQUAL     reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    TIMES           reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    DIVIDE          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    MOD             reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    PLUS            reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    MINUS           reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LSHIFT          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    RSHIFT          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LT              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    GT              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    LE              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    GE              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    IS              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    AS              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    EQ              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    NE              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    AND             reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    XOR             reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    OR              reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    CAND            reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    CONDOP          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    COR             reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    COMMA           reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    RPAREN          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    RBRACE          reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    COLON           reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)
    RBRACKET        reduce using rule 108 (primary_no_array_creation_expression -> typeof_expression .)


state 177

    (409) statement_list_opt -> statement_list .
    (186) statement_list -> statement_list . statement
    (187) statement -> . declaration_statement
    (188) statement -> . embedded_statement
    (189) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (190) declaration_statement -> . local_constant_declaration STMT_TERMINATOR
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (191) local_variable_declaration -> . local_variable_type local_variable_declarators
    (205) local_constant_declaration -> . CONST type constant_declarators
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (192) local_variable_type -> . type
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (7) type -> . value_type
    (8) type -> . reference_type
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RBRACE          reduce using rule 409 (statement_list_opt -> statement_list .)
    CONST           shift and go to state 197
    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    LPAREN          shift and go to state 236
    BOOL            shift and go to state 168
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 171
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    DECIMAL         shift and go to state 249
    BYTE            shift and go to state 211
    CHAR            shift and go to state 166
    DOUBLE          shift and go to state 254
    FLOAT           shift and go to state 230
    INT             shift and go to state 190
    LONG            shift and go to state 196
    SBYTE           shift and go to state 181
    SHORT           shift and go to state 207
    UINT            shift and go to state 225
    ULONG           shift and go to state 237
    USHORT          shift and go to state 187

    numeric_type                   shift and go to state 38
    member_access                  shift and go to state 169
    simple_type                    shift and go to state 40
    selection_statement            shift and go to state 173
    cast_expression                shift and go to state 174
    literal                        shift and go to state 221
    parenthesized_expression       shift and go to state 191
    struct_type                    shift and go to state 42
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    declaration_statement          shift and go to state 185
    anonymous_method_expression    shift and go to state 235
    empty_statement                shift and go to state 204
    local_constant_declaration     shift and go to state 192
    switch_statement               shift and go to state 193
    delegate_type                  shift and go to state 51
    assignment                     shift and go to state 198
    type                           shift and go to state 199
    block                          shift and go to state 200
    typeof_expression              shift and go to state 176
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    type_name                      shift and go to state 50
    integral_type                  shift and go to state 62
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    return_statement               shift and go to state 213
    element_access                 shift and go to state 209
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    simple_name                    shift and go to state 203
    this_access                    shift and go to state 251
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 216
    value_type                     shift and go to state 68
    anonymous_object_creation_expression shift and go to state 220
    expression_statement           shift and go to state 175
    for_statement                  shift and go to state 223
    base_access                    shift and go to state 226
    unary_expression               shift and go to state 229
    non_array_type                 shift and go to state 58
    local_variable_type            shift and go to state 231
    statement                      shift and go to state 337
    local_variable_declaration     shift and go to state 178
    default_value_expression       shift and go to state 172
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    array_type                     shift and go to state 53
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 246
    do_statement                   shift and go to state 248
    primary_no_array_creation_expression shift and go to state 250
    jump_statement                 shift and go to state 214
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    post_decrement_expression      shift and go to state 255
    while_statement                shift and go to state 257
    break_statement                shift and go to state 258
    floating_point_type            shift and go to state 70

state 178

    (189) declaration_statement -> local_variable_declaration . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 338


state 179

    (137) base_access -> BASE . MEMBERACCESS IDENTIFIER
    (138) base_access -> BASE . LBRACKET argument_list RBRACKET

    MEMBERACCESS    shift and go to state 340
    LBRACKET        shift and go to state 339


state 180

    (34) class_type -> STRING .
    (126) predefined_type -> STRING .

    IDENTIFIER      reduce using rule 34 (class_type -> STRING .)
    LBRACKET        reduce using rule 34 (class_type -> STRING .)
    RPAREN          reduce using rule 34 (class_type -> STRING .)
    MEMBERACCESS    reduce using rule 126 (predefined_type -> STRING .)


state 181

    (124) predefined_type -> SBYTE .
    (18) integral_type -> SBYTE .

    MEMBERACCESS    reduce using rule 124 (predefined_type -> SBYTE .)
    IDENTIFIER      reduce using rule 18 (integral_type -> SBYTE .)
    LBRACKET        reduce using rule 18 (integral_type -> SBYTE .)


state 182

    (221) statement_expression -> post_increment_expression .
    (103) primary_no_array_creation_expression -> post_increment_expression .

    COMMA           reduce using rule 221 (statement_expression -> post_increment_expression .)
    STMT_TERMINATOR reduce using rule 221 (statement_expression -> post_increment_expression .)
    RPAREN          reduce using rule 221 (statement_expression -> post_increment_expression .)
    LBRACKET        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LPAREN          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    INCREMENT       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    DECREMENT       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MEMBERACCESS    reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    EQUALS          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    PLUSEQUAL       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MINUSEQUAL      reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    TIMESEQUAL      reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    DIVEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MODEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    ANDEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    OREQUAL         reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    XOREQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LAMBDADEC       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RSHIFTEQUAL     reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LSHIFTEQUAL     reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)


state 183

    (267) jump_statement -> continue_statement .

    CONST           reduce using rule 267 (jump_statement -> continue_statement .)
    LBRACE          reduce using rule 267 (jump_statement -> continue_statement .)
    STMT_TERMINATOR reduce using rule 267 (jump_statement -> continue_statement .)
    IF              reduce using rule 267 (jump_statement -> continue_statement .)
    SWITCH          reduce using rule 267 (jump_statement -> continue_statement .)
    WHILE           reduce using rule 267 (jump_statement -> continue_statement .)
    DO              reduce using rule 267 (jump_statement -> continue_statement .)
    FOR             reduce using rule 267 (jump_statement -> continue_statement .)
    BREAK           reduce using rule 267 (jump_statement -> continue_statement .)
    CONTINUE        reduce using rule 267 (jump_statement -> continue_statement .)
    GOTO            reduce using rule 267 (jump_statement -> continue_statement .)
    RETURN          reduce using rule 267 (jump_statement -> continue_statement .)
    NEW             reduce using rule 267 (jump_statement -> continue_statement .)
    INCREMENT       reduce using rule 267 (jump_statement -> continue_statement .)
    DECREMENT       reduce using rule 267 (jump_statement -> continue_statement .)
    PLUS            reduce using rule 267 (jump_statement -> continue_statement .)
    MINUS           reduce using rule 267 (jump_statement -> continue_statement .)
    LNOT            reduce using rule 267 (jump_statement -> continue_statement .)
    NOT             reduce using rule 267 (jump_statement -> continue_statement .)
    OBJECT          reduce using rule 267 (jump_statement -> continue_statement .)
    STRING          reduce using rule 267 (jump_statement -> continue_statement .)
    LPAREN          reduce using rule 267 (jump_statement -> continue_statement .)
    BOOL            reduce using rule 267 (jump_statement -> continue_statement .)
    INTCONST        reduce using rule 267 (jump_statement -> continue_statement .)
    STRCONST        reduce using rule 267 (jump_statement -> continue_statement .)
    CHCONST         reduce using rule 267 (jump_statement -> continue_statement .)
    IDENTIFIER      reduce using rule 267 (jump_statement -> continue_statement .)
    THIS            reduce using rule 267 (jump_statement -> continue_statement .)
    BASE            reduce using rule 267 (jump_statement -> continue_statement .)
    TYPEOF          reduce using rule 267 (jump_statement -> continue_statement .)
    DEFAULT         reduce using rule 267 (jump_statement -> continue_statement .)
    DELEGATE        reduce using rule 267 (jump_statement -> continue_statement .)
    DECIMAL         reduce using rule 267 (jump_statement -> continue_statement .)
    BYTE            reduce using rule 267 (jump_statement -> continue_statement .)
    CHAR            reduce using rule 267 (jump_statement -> continue_statement .)
    DOUBLE          reduce using rule 267 (jump_statement -> continue_statement .)
    FLOAT           reduce using rule 267 (jump_statement -> continue_statement .)
    INT             reduce using rule 267 (jump_statement -> continue_statement .)
    LONG            reduce using rule 267 (jump_statement -> continue_statement .)
    SBYTE           reduce using rule 267 (jump_statement -> continue_statement .)
    SHORT           reduce using rule 267 (jump_statement -> continue_statement .)
    UINT            reduce using rule 267 (jump_statement -> continue_statement .)
    ULONG           reduce using rule 267 (jump_statement -> continue_statement .)
    USHORT          reduce using rule 267 (jump_statement -> continue_statement .)
    RBRACE          reduce using rule 267 (jump_statement -> continue_statement .)
    ELSE            reduce using rule 267 (jump_statement -> continue_statement .)
    CASE            reduce using rule 267 (jump_statement -> continue_statement .)


state 184

    (257) while_statement -> WHILE . LPAREN boolean_expression RPAREN embedded_statement

    LPAREN          shift and go to state 341


state 185

    (187) statement -> declaration_statement .

    CONST           reduce using rule 187 (statement -> declaration_statement .)
    LBRACE          reduce using rule 187 (statement -> declaration_statement .)
    STMT_TERMINATOR reduce using rule 187 (statement -> declaration_statement .)
    IF              reduce using rule 187 (statement -> declaration_statement .)
    SWITCH          reduce using rule 187 (statement -> declaration_statement .)
    WHILE           reduce using rule 187 (statement -> declaration_statement .)
    DO              reduce using rule 187 (statement -> declaration_statement .)
    FOR             reduce using rule 187 (statement -> declaration_statement .)
    BREAK           reduce using rule 187 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 187 (statement -> declaration_statement .)
    GOTO            reduce using rule 187 (statement -> declaration_statement .)
    RETURN          reduce using rule 187 (statement -> declaration_statement .)
    NEW             reduce using rule 187 (statement -> declaration_statement .)
    INCREMENT       reduce using rule 187 (statement -> declaration_statement .)
    DECREMENT       reduce using rule 187 (statement -> declaration_statement .)
    PLUS            reduce using rule 187 (statement -> declaration_statement .)
    MINUS           reduce using rule 187 (statement -> declaration_statement .)
    LNOT            reduce using rule 187 (statement -> declaration_statement .)
    NOT             reduce using rule 187 (statement -> declaration_statement .)
    OBJECT          reduce using rule 187 (statement -> declaration_statement .)
    STRING          reduce using rule 187 (statement -> declaration_statement .)
    LPAREN          reduce using rule 187 (statement -> declaration_statement .)
    BOOL            reduce using rule 187 (statement -> declaration_statement .)
    INTCONST        reduce using rule 187 (statement -> declaration_statement .)
    STRCONST        reduce using rule 187 (statement -> declaration_statement .)
    CHCONST         reduce using rule 187 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 187 (statement -> declaration_statement .)
    THIS            reduce using rule 187 (statement -> declaration_statement .)
    BASE            reduce using rule 187 (statement -> declaration_statement .)
    TYPEOF          reduce using rule 187 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 187 (statement -> declaration_statement .)
    DELEGATE        reduce using rule 187 (statement -> declaration_statement .)
    DECIMAL         reduce using rule 187 (statement -> declaration_statement .)
    BYTE            reduce using rule 187 (statement -> declaration_statement .)
    CHAR            reduce using rule 187 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 187 (statement -> declaration_statement .)
    FLOAT           reduce using rule 187 (statement -> declaration_statement .)
    INT             reduce using rule 187 (statement -> declaration_statement .)
    LONG            reduce using rule 187 (statement -> declaration_statement .)
    SBYTE           reduce using rule 187 (statement -> declaration_statement .)
    SHORT           reduce using rule 187 (statement -> declaration_statement .)
    UINT            reduce using rule 187 (statement -> declaration_statement .)
    ULONG           reduce using rule 187 (statement -> declaration_statement .)
    USHORT          reduce using rule 187 (statement -> declaration_statement .)
    RBRACE          reduce using rule 187 (statement -> declaration_statement .)
    CASE            reduce using rule 187 (statement -> declaration_statement .)


state 186

    (40) literal -> INTCONST .

    LBRACKET        reduce using rule 40 (literal -> INTCONST .)
    MEMBERACCESS    reduce using rule 40 (literal -> INTCONST .)
    LPAREN          reduce using rule 40 (literal -> INTCONST .)
    INCREMENT       reduce using rule 40 (literal -> INTCONST .)
    DECREMENT       reduce using rule 40 (literal -> INTCONST .)
    TIMES           reduce using rule 40 (literal -> INTCONST .)
    DIVIDE          reduce using rule 40 (literal -> INTCONST .)
    MOD             reduce using rule 40 (literal -> INTCONST .)
    PLUS            reduce using rule 40 (literal -> INTCONST .)
    MINUS           reduce using rule 40 (literal -> INTCONST .)
    LSHIFT          reduce using rule 40 (literal -> INTCONST .)
    RSHIFT          reduce using rule 40 (literal -> INTCONST .)
    LT              reduce using rule 40 (literal -> INTCONST .)
    GT              reduce using rule 40 (literal -> INTCONST .)
    LE              reduce using rule 40 (literal -> INTCONST .)
    GE              reduce using rule 40 (literal -> INTCONST .)
    IS              reduce using rule 40 (literal -> INTCONST .)
    AS              reduce using rule 40 (literal -> INTCONST .)
    EQ              reduce using rule 40 (literal -> INTCONST .)
    NE              reduce using rule 40 (literal -> INTCONST .)
    AND             reduce using rule 40 (literal -> INTCONST .)
    XOR             reduce using rule 40 (literal -> INTCONST .)
    OR              reduce using rule 40 (literal -> INTCONST .)
    CAND            reduce using rule 40 (literal -> INTCONST .)
    CONDOP          reduce using rule 40 (literal -> INTCONST .)
    COR             reduce using rule 40 (literal -> INTCONST .)
    COMMA           reduce using rule 40 (literal -> INTCONST .)
    RPAREN          reduce using rule 40 (literal -> INTCONST .)
    STMT_TERMINATOR reduce using rule 40 (literal -> INTCONST .)
    RBRACE          reduce using rule 40 (literal -> INTCONST .)
    COLON           reduce using rule 40 (literal -> INTCONST .)
    RBRACKET        reduce using rule 40 (literal -> INTCONST .)
    EQUALS          reduce using rule 40 (literal -> INTCONST .)
    PLUSEQUAL       reduce using rule 40 (literal -> INTCONST .)
    MINUSEQUAL      reduce using rule 40 (literal -> INTCONST .)
    TIMESEQUAL      reduce using rule 40 (literal -> INTCONST .)
    DIVEQUAL        reduce using rule 40 (literal -> INTCONST .)
    MODEQUAL        reduce using rule 40 (literal -> INTCONST .)
    ANDEQUAL        reduce using rule 40 (literal -> INTCONST .)
    OREQUAL         reduce using rule 40 (literal -> INTCONST .)
    XOREQUAL        reduce using rule 40 (literal -> INTCONST .)
    LAMBDADEC       reduce using rule 40 (literal -> INTCONST .)
    RSHIFTEQUAL     reduce using rule 40 (literal -> INTCONST .)
    LSHIFTEQUAL     reduce using rule 40 (literal -> INTCONST .)


state 187

    (129) predefined_type -> USHORT .
    (21) integral_type -> USHORT .

    MEMBERACCESS    reduce using rule 129 (predefined_type -> USHORT .)
    IDENTIFIER      reduce using rule 21 (integral_type -> USHORT .)
    LBRACKET        reduce using rule 21 (integral_type -> USHORT .)


state 188

    (33) class_type -> OBJECT .
    (123) predefined_type -> OBJECT .

    IDENTIFIER      reduce using rule 33 (class_type -> OBJECT .)
    LBRACKET        reduce using rule 33 (class_type -> OBJECT .)
    RPAREN          reduce using rule 33 (class_type -> OBJECT .)
    MEMBERACCESS    reduce using rule 123 (predefined_type -> OBJECT .)


state 189

    (106) primary_no_array_creation_expression -> delegate_creation_expression .

    LBRACKET        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    MEMBERACCESS    reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LPAREN          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    INCREMENT       reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    DECREMENT       reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    STMT_TERMINATOR reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    EQUALS          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    PLUSEQUAL       reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    MINUSEQUAL      reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    TIMESEQUAL      reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    DIVEQUAL        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    MODEQUAL        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    ANDEQUAL        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    OREQUAL         reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    XOREQUAL        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LAMBDADEC       reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    RSHIFTEQUAL     reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LSHIFTEQUAL     reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    TIMES           reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    DIVIDE          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    MOD             reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    PLUS            reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    MINUS           reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LSHIFT          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    RSHIFT          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LT              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    GT              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    LE              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    GE              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    IS              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    AS              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    EQ              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    NE              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    AND             reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    XOR             reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    OR              reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    CAND            reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    CONDOP          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    COR             reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    COMMA           reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    RPAREN          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    RBRACE          reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    COLON           reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)
    RBRACKET        reduce using rule 106 (primary_no_array_creation_expression -> delegate_creation_expression .)


state 190

    (121) predefined_type -> INT .
    (22) integral_type -> INT .

    MEMBERACCESS    reduce using rule 121 (predefined_type -> INT .)
    IDENTIFIER      reduce using rule 22 (integral_type -> INT .)
    LBRACKET        reduce using rule 22 (integral_type -> INT .)


state 191

    (97) primary_no_array_creation_expression -> parenthesized_expression .

    LBRACKET        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    MEMBERACCESS    reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LPAREN          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    INCREMENT       reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    DECREMENT       reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    STMT_TERMINATOR reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    EQUALS          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    PLUSEQUAL       reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    MINUSEQUAL      reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    TIMESEQUAL      reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    DIVEQUAL        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    MODEQUAL        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    ANDEQUAL        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    OREQUAL         reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    XOREQUAL        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LAMBDADEC       reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    RSHIFTEQUAL     reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LSHIFTEQUAL     reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    TIMES           reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    DIVIDE          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    MOD             reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    PLUS            reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    MINUS           reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LSHIFT          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    RSHIFT          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LT              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    GT              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    LE              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    GE              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    IS              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    AS              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    EQ              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    NE              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    AND             reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    XOR             reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    OR              reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    CAND            reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    CONDOP          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    COR             reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    COMMA           reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    RPAREN          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    RBRACE          reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    COLON           reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)
    RBRACKET        reduce using rule 97 (primary_no_array_creation_expression -> parenthesized_expression .)


state 192

    (190) declaration_statement -> local_constant_declaration . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 342


state 193

    (241) selection_statement -> switch_statement .

    CONST           reduce using rule 241 (selection_statement -> switch_statement .)
    LBRACE          reduce using rule 241 (selection_statement -> switch_statement .)
    STMT_TERMINATOR reduce using rule 241 (selection_statement -> switch_statement .)
    IF              reduce using rule 241 (selection_statement -> switch_statement .)
    SWITCH          reduce using rule 241 (selection_statement -> switch_statement .)
    WHILE           reduce using rule 241 (selection_statement -> switch_statement .)
    DO              reduce using rule 241 (selection_statement -> switch_statement .)
    FOR             reduce using rule 241 (selection_statement -> switch_statement .)
    BREAK           reduce using rule 241 (selection_statement -> switch_statement .)
    CONTINUE        reduce using rule 241 (selection_statement -> switch_statement .)
    GOTO            reduce using rule 241 (selection_statement -> switch_statement .)
    RETURN          reduce using rule 241 (selection_statement -> switch_statement .)
    NEW             reduce using rule 241 (selection_statement -> switch_statement .)
    INCREMENT       reduce using rule 241 (selection_statement -> switch_statement .)
    DECREMENT       reduce using rule 241 (selection_statement -> switch_statement .)
    PLUS            reduce using rule 241 (selection_statement -> switch_statement .)
    MINUS           reduce using rule 241 (selection_statement -> switch_statement .)
    LNOT            reduce using rule 241 (selection_statement -> switch_statement .)
    NOT             reduce using rule 241 (selection_statement -> switch_statement .)
    OBJECT          reduce using rule 241 (selection_statement -> switch_statement .)
    STRING          reduce using rule 241 (selection_statement -> switch_statement .)
    LPAREN          reduce using rule 241 (selection_statement -> switch_statement .)
    BOOL            reduce using rule 241 (selection_statement -> switch_statement .)
    INTCONST        reduce using rule 241 (selection_statement -> switch_statement .)
    STRCONST        reduce using rule 241 (selection_statement -> switch_statement .)
    CHCONST         reduce using rule 241 (selection_statement -> switch_statement .)
    IDENTIFIER      reduce using rule 241 (selection_statement -> switch_statement .)
    THIS            reduce using rule 241 (selection_statement -> switch_statement .)
    BASE            reduce using rule 241 (selection_statement -> switch_statement .)
    TYPEOF          reduce using rule 241 (selection_statement -> switch_statement .)
    DEFAULT         reduce using rule 241 (selection_statement -> switch_statement .)
    DELEGATE        reduce using rule 241 (selection_statement -> switch_statement .)
    DECIMAL         reduce using rule 241 (selection_statement -> switch_statement .)
    BYTE            reduce using rule 241 (selection_statement -> switch_statement .)
    CHAR            reduce using rule 241 (selection_statement -> switch_statement .)
    DOUBLE          reduce using rule 241 (selection_statement -> switch_statement .)
    FLOAT           reduce using rule 241 (selection_statement -> switch_statement .)
    INT             reduce using rule 241 (selection_statement -> switch_statement .)
    LONG            reduce using rule 241 (selection_statement -> switch_statement .)
    SBYTE           reduce using rule 241 (selection_statement -> switch_statement .)
    SHORT           reduce using rule 241 (selection_statement -> switch_statement .)
    UINT            reduce using rule 241 (selection_statement -> switch_statement .)
    ULONG           reduce using rule 241 (selection_statement -> switch_statement .)
    USHORT          reduce using rule 241 (selection_statement -> switch_statement .)
    RBRACE          reduce using rule 241 (selection_statement -> switch_statement .)
    ELSE            reduce using rule 241 (selection_statement -> switch_statement .)
    CASE            reduce using rule 241 (selection_statement -> switch_statement .)


state 194

    (271) continue_statement -> CONTINUE . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 343


state 195

    (240) selection_statement -> if_statement .

    CONST           reduce using rule 240 (selection_statement -> if_statement .)
    LBRACE          reduce using rule 240 (selection_statement -> if_statement .)
    STMT_TERMINATOR reduce using rule 240 (selection_statement -> if_statement .)
    IF              reduce using rule 240 (selection_statement -> if_statement .)
    SWITCH          reduce using rule 240 (selection_statement -> if_statement .)
    WHILE           reduce using rule 240 (selection_statement -> if_statement .)
    DO              reduce using rule 240 (selection_statement -> if_statement .)
    FOR             reduce using rule 240 (selection_statement -> if_statement .)
    BREAK           reduce using rule 240 (selection_statement -> if_statement .)
    CONTINUE        reduce using rule 240 (selection_statement -> if_statement .)
    GOTO            reduce using rule 240 (selection_statement -> if_statement .)
    RETURN          reduce using rule 240 (selection_statement -> if_statement .)
    NEW             reduce using rule 240 (selection_statement -> if_statement .)
    INCREMENT       reduce using rule 240 (selection_statement -> if_statement .)
    DECREMENT       reduce using rule 240 (selection_statement -> if_statement .)
    PLUS            reduce using rule 240 (selection_statement -> if_statement .)
    MINUS           reduce using rule 240 (selection_statement -> if_statement .)
    LNOT            reduce using rule 240 (selection_statement -> if_statement .)
    NOT             reduce using rule 240 (selection_statement -> if_statement .)
    OBJECT          reduce using rule 240 (selection_statement -> if_statement .)
    STRING          reduce using rule 240 (selection_statement -> if_statement .)
    LPAREN          reduce using rule 240 (selection_statement -> if_statement .)
    BOOL            reduce using rule 240 (selection_statement -> if_statement .)
    INTCONST        reduce using rule 240 (selection_statement -> if_statement .)
    STRCONST        reduce using rule 240 (selection_statement -> if_statement .)
    CHCONST         reduce using rule 240 (selection_statement -> if_statement .)
    IDENTIFIER      reduce using rule 240 (selection_statement -> if_statement .)
    THIS            reduce using rule 240 (selection_statement -> if_statement .)
    BASE            reduce using rule 240 (selection_statement -> if_statement .)
    TYPEOF          reduce using rule 240 (selection_statement -> if_statement .)
    DEFAULT         reduce using rule 240 (selection_statement -> if_statement .)
    DELEGATE        reduce using rule 240 (selection_statement -> if_statement .)
    DECIMAL         reduce using rule 240 (selection_statement -> if_statement .)
    BYTE            reduce using rule 240 (selection_statement -> if_statement .)
    CHAR            reduce using rule 240 (selection_statement -> if_statement .)
    DOUBLE          reduce using rule 240 (selection_statement -> if_statement .)
    FLOAT           reduce using rule 240 (selection_statement -> if_statement .)
    INT             reduce using rule 240 (selection_statement -> if_statement .)
    LONG            reduce using rule 240 (selection_statement -> if_statement .)
    SBYTE           reduce using rule 240 (selection_statement -> if_statement .)
    SHORT           reduce using rule 240 (selection_statement -> if_statement .)
    UINT            reduce using rule 240 (selection_statement -> if_statement .)
    ULONG           reduce using rule 240 (selection_statement -> if_statement .)
    USHORT          reduce using rule 240 (selection_statement -> if_statement .)
    RBRACE          reduce using rule 240 (selection_statement -> if_statement .)
    ELSE            reduce using rule 240 (selection_statement -> if_statement .)
    CASE            reduce using rule 240 (selection_statement -> if_statement .)


state 196

    (122) predefined_type -> LONG .
    (24) integral_type -> LONG .

    MEMBERACCESS    reduce using rule 122 (predefined_type -> LONG .)
    IDENTIFIER      reduce using rule 24 (integral_type -> LONG .)
    LBRACKET        reduce using rule 24 (integral_type -> LONG .)


state 197

    (205) local_constant_declaration -> CONST . type constant_declarators
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 344
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 198

    (220) statement_expression -> assignment .

    COMMA           reduce using rule 220 (statement_expression -> assignment .)
    STMT_TERMINATOR reduce using rule 220 (statement_expression -> assignment .)
    RPAREN          reduce using rule 220 (statement_expression -> assignment .)


state 199

    (192) local_variable_type -> type .
    (36) non_array_type -> type .

    IDENTIFIER      reduce using rule 192 (local_variable_type -> type .)
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 200

    (210) embedded_statement -> block .

    CONST           reduce using rule 210 (embedded_statement -> block .)
    LBRACE          reduce using rule 210 (embedded_statement -> block .)
    STMT_TERMINATOR reduce using rule 210 (embedded_statement -> block .)
    IF              reduce using rule 210 (embedded_statement -> block .)
    SWITCH          reduce using rule 210 (embedded_statement -> block .)
    WHILE           reduce using rule 210 (embedded_statement -> block .)
    DO              reduce using rule 210 (embedded_statement -> block .)
    FOR             reduce using rule 210 (embedded_statement -> block .)
    BREAK           reduce using rule 210 (embedded_statement -> block .)
    CONTINUE        reduce using rule 210 (embedded_statement -> block .)
    GOTO            reduce using rule 210 (embedded_statement -> block .)
    RETURN          reduce using rule 210 (embedded_statement -> block .)
    NEW             reduce using rule 210 (embedded_statement -> block .)
    INCREMENT       reduce using rule 210 (embedded_statement -> block .)
    DECREMENT       reduce using rule 210 (embedded_statement -> block .)
    PLUS            reduce using rule 210 (embedded_statement -> block .)
    MINUS           reduce using rule 210 (embedded_statement -> block .)
    LNOT            reduce using rule 210 (embedded_statement -> block .)
    NOT             reduce using rule 210 (embedded_statement -> block .)
    OBJECT          reduce using rule 210 (embedded_statement -> block .)
    STRING          reduce using rule 210 (embedded_statement -> block .)
    LPAREN          reduce using rule 210 (embedded_statement -> block .)
    BOOL            reduce using rule 210 (embedded_statement -> block .)
    INTCONST        reduce using rule 210 (embedded_statement -> block .)
    STRCONST        reduce using rule 210 (embedded_statement -> block .)
    CHCONST         reduce using rule 210 (embedded_statement -> block .)
    IDENTIFIER      reduce using rule 210 (embedded_statement -> block .)
    THIS            reduce using rule 210 (embedded_statement -> block .)
    BASE            reduce using rule 210 (embedded_statement -> block .)
    TYPEOF          reduce using rule 210 (embedded_statement -> block .)
    DEFAULT         reduce using rule 210 (embedded_statement -> block .)
    DELEGATE        reduce using rule 210 (embedded_statement -> block .)
    DECIMAL         reduce using rule 210 (embedded_statement -> block .)
    BYTE            reduce using rule 210 (embedded_statement -> block .)
    CHAR            reduce using rule 210 (embedded_statement -> block .)
    DOUBLE          reduce using rule 210 (embedded_statement -> block .)
    FLOAT           reduce using rule 210 (embedded_statement -> block .)
    INT             reduce using rule 210 (embedded_statement -> block .)
    LONG            reduce using rule 210 (embedded_statement -> block .)
    SBYTE           reduce using rule 210 (embedded_statement -> block .)
    SHORT           reduce using rule 210 (embedded_statement -> block .)
    UINT            reduce using rule 210 (embedded_statement -> block .)
    ULONG           reduce using rule 210 (embedded_statement -> block .)
    USHORT          reduce using rule 210 (embedded_statement -> block .)
    RBRACE          reduce using rule 210 (embedded_statement -> block .)
    ELSE            reduce using rule 210 (embedded_statement -> block .)
    CASE            reduce using rule 210 (embedded_statement -> block .)


state 201

    (238) pre_increment_expression -> INCREMENT . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 346
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 202

    (169) typeof_expression -> TYPEOF . LPAREN type RPAREN
    (170) typeof_expression -> TYPEOF . LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> TYPEOF . LPAREN VOID RPAREN

    LPAREN          shift and go to state 347


state 203

    (96) primary_no_array_creation_expression -> simple_name .

    LBRACKET        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MEMBERACCESS    reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LPAREN          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    INCREMENT       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    DECREMENT       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    STMT_TERMINATOR reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    EQUALS          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    PLUSEQUAL       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MINUSEQUAL      reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    TIMESEQUAL      reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    DIVEQUAL        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MODEQUAL        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    ANDEQUAL        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    OREQUAL         reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    XOREQUAL        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LAMBDADEC       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    RSHIFTEQUAL     reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LSHIFTEQUAL     reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    TIMES           reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    DIVIDE          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MOD             reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    PLUS            reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MINUS           reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LSHIFT          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    RSHIFT          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LT              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    GT              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LE              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    GE              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    IS              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    AS              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    EQ              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    NE              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    AND             reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    XOR             reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    OR              reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    CAND            reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    CONDOP          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    COR             reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    COMMA           reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    RPAREN          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    RBRACE          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    COLON           reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    RBRACKET        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)


state 204

    (211) embedded_statement -> empty_statement .

    CONST           reduce using rule 211 (embedded_statement -> empty_statement .)
    LBRACE          reduce using rule 211 (embedded_statement -> empty_statement .)
    STMT_TERMINATOR reduce using rule 211 (embedded_statement -> empty_statement .)
    IF              reduce using rule 211 (embedded_statement -> empty_statement .)
    SWITCH          reduce using rule 211 (embedded_statement -> empty_statement .)
    WHILE           reduce using rule 211 (embedded_statement -> empty_statement .)
    DO              reduce using rule 211 (embedded_statement -> empty_statement .)
    FOR             reduce using rule 211 (embedded_statement -> empty_statement .)
    BREAK           reduce using rule 211 (embedded_statement -> empty_statement .)
    CONTINUE        reduce using rule 211 (embedded_statement -> empty_statement .)
    GOTO            reduce using rule 211 (embedded_statement -> empty_statement .)
    RETURN          reduce using rule 211 (embedded_statement -> empty_statement .)
    NEW             reduce using rule 211 (embedded_statement -> empty_statement .)
    INCREMENT       reduce using rule 211 (embedded_statement -> empty_statement .)
    DECREMENT       reduce using rule 211 (embedded_statement -> empty_statement .)
    PLUS            reduce using rule 211 (embedded_statement -> empty_statement .)
    MINUS           reduce using rule 211 (embedded_statement -> empty_statement .)
    LNOT            reduce using rule 211 (embedded_statement -> empty_statement .)
    NOT             reduce using rule 211 (embedded_statement -> empty_statement .)
    OBJECT          reduce using rule 211 (embedded_statement -> empty_statement .)
    STRING          reduce using rule 211 (embedded_statement -> empty_statement .)
    LPAREN          reduce using rule 211 (embedded_statement -> empty_statement .)
    BOOL            reduce using rule 211 (embedded_statement -> empty_statement .)
    INTCONST        reduce using rule 211 (embedded_statement -> empty_statement .)
    STRCONST        reduce using rule 211 (embedded_statement -> empty_statement .)
    CHCONST         reduce using rule 211 (embedded_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 211 (embedded_statement -> empty_statement .)
    THIS            reduce using rule 211 (embedded_statement -> empty_statement .)
    BASE            reduce using rule 211 (embedded_statement -> empty_statement .)
    TYPEOF          reduce using rule 211 (embedded_statement -> empty_statement .)
    DEFAULT         reduce using rule 211 (embedded_statement -> empty_statement .)
    DELEGATE        reduce using rule 211 (embedded_statement -> empty_statement .)
    DECIMAL         reduce using rule 211 (embedded_statement -> empty_statement .)
    BYTE            reduce using rule 211 (embedded_statement -> empty_statement .)
    CHAR            reduce using rule 211 (embedded_statement -> empty_statement .)
    DOUBLE          reduce using rule 211 (embedded_statement -> empty_statement .)
    FLOAT           reduce using rule 211 (embedded_statement -> empty_statement .)
    INT             reduce using rule 211 (embedded_statement -> empty_statement .)
    LONG            reduce using rule 211 (embedded_statement -> empty_statement .)
    SBYTE           reduce using rule 211 (embedded_statement -> empty_statement .)
    SHORT           reduce using rule 211 (embedded_statement -> empty_statement .)
    UINT            reduce using rule 211 (embedded_statement -> empty_statement .)
    ULONG           reduce using rule 211 (embedded_statement -> empty_statement .)
    USHORT          reduce using rule 211 (embedded_statement -> empty_statement .)
    RBRACE          reduce using rule 211 (embedded_statement -> empty_statement .)
    ELSE            reduce using rule 211 (embedded_statement -> empty_statement .)
    CASE            reduce using rule 211 (embedded_statement -> empty_statement .)


state 205

    (218) statement_expression -> invocation_expression .
    (99) primary_no_array_creation_expression -> invocation_expression .

    COMMA           reduce using rule 218 (statement_expression -> invocation_expression .)
    STMT_TERMINATOR reduce using rule 218 (statement_expression -> invocation_expression .)
    RPAREN          reduce using rule 218 (statement_expression -> invocation_expression .)
    LBRACKET        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LPAREN          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    INCREMENT       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    DECREMENT       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MEMBERACCESS    reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    EQUALS          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    PLUSEQUAL       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MINUSEQUAL      reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    TIMESEQUAL      reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    DIVEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MODEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    ANDEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    OREQUAL         reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    XOREQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LAMBDADEC       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RSHIFTEQUAL     reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LSHIFTEQUAL     reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)


state 206

    (114) member_access -> predefined_type . MEMBERACCESS IDENTIFIER

    MEMBERACCESS    shift and go to state 348


state 207

    (125) predefined_type -> SHORT .
    (20) integral_type -> SHORT .

    MEMBERACCESS    reduce using rule 125 (predefined_type -> SHORT .)
    IDENTIFIER      reduce using rule 20 (integral_type -> SHORT .)
    LBRACKET        reduce using rule 20 (integral_type -> SHORT .)


state 208

    (224) statement_expression -> pre_decrement_expression .
    (91) unary_expression -> pre_decrement_expression .

    COMMA           reduce using rule 224 (statement_expression -> pre_decrement_expression .)
    STMT_TERMINATOR reduce using rule 224 (statement_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 224 (statement_expression -> pre_decrement_expression .)
    EQUALS          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    PLUSEQUAL       reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MINUSEQUAL      reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    TIMESEQUAL      reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    DIVEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MODEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    ANDEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    OREQUAL         reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    XOREQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LAMBDADEC       reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RSHIFTEQUAL     reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LSHIFTEQUAL     reduce using rule 91 (unary_expression -> pre_decrement_expression .)


state 209

    (100) primary_no_array_creation_expression -> element_access .

    LBRACKET        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    MEMBERACCESS    reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LPAREN          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    INCREMENT       reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    DECREMENT       reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    STMT_TERMINATOR reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    EQUALS          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    PLUSEQUAL       reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    MINUSEQUAL      reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    TIMESEQUAL      reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    DIVEQUAL        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    MODEQUAL        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    ANDEQUAL        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    OREQUAL         reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    XOREQUAL        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LAMBDADEC       reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    RSHIFTEQUAL     reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LSHIFTEQUAL     reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    TIMES           reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    DIVIDE          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    MOD             reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    PLUS            reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    MINUS           reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LSHIFT          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    RSHIFT          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LT              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    GT              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    LE              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    GE              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    IS              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    AS              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    EQ              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    NE              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    AND             reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    XOR             reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    OR              reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    CAND            reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    CONDOP          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    COR             reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    COMMA           reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    RPAREN          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    RBRACE          reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    COLON           reduce using rule 100 (primary_no_array_creation_expression -> element_access .)
    RBRACKET        reduce using rule 100 (primary_no_array_creation_expression -> element_access .)


state 210

    (214) embedded_statement -> iteration_statement .

    CONST           reduce using rule 214 (embedded_statement -> iteration_statement .)
    LBRACE          reduce using rule 214 (embedded_statement -> iteration_statement .)
    STMT_TERMINATOR reduce using rule 214 (embedded_statement -> iteration_statement .)
    IF              reduce using rule 214 (embedded_statement -> iteration_statement .)
    SWITCH          reduce using rule 214 (embedded_statement -> iteration_statement .)
    WHILE           reduce using rule 214 (embedded_statement -> iteration_statement .)
    DO              reduce using rule 214 (embedded_statement -> iteration_statement .)
    FOR             reduce using rule 214 (embedded_statement -> iteration_statement .)
    BREAK           reduce using rule 214 (embedded_statement -> iteration_statement .)
    CONTINUE        reduce using rule 214 (embedded_statement -> iteration_statement .)
    GOTO            reduce using rule 214 (embedded_statement -> iteration_statement .)
    RETURN          reduce using rule 214 (embedded_statement -> iteration_statement .)
    NEW             reduce using rule 214 (embedded_statement -> iteration_statement .)
    INCREMENT       reduce using rule 214 (embedded_statement -> iteration_statement .)
    DECREMENT       reduce using rule 214 (embedded_statement -> iteration_statement .)
    PLUS            reduce using rule 214 (embedded_statement -> iteration_statement .)
    MINUS           reduce using rule 214 (embedded_statement -> iteration_statement .)
    LNOT            reduce using rule 214 (embedded_statement -> iteration_statement .)
    NOT             reduce using rule 214 (embedded_statement -> iteration_statement .)
    OBJECT          reduce using rule 214 (embedded_statement -> iteration_statement .)
    STRING          reduce using rule 214 (embedded_statement -> iteration_statement .)
    LPAREN          reduce using rule 214 (embedded_statement -> iteration_statement .)
    BOOL            reduce using rule 214 (embedded_statement -> iteration_statement .)
    INTCONST        reduce using rule 214 (embedded_statement -> iteration_statement .)
    STRCONST        reduce using rule 214 (embedded_statement -> iteration_statement .)
    CHCONST         reduce using rule 214 (embedded_statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 214 (embedded_statement -> iteration_statement .)
    THIS            reduce using rule 214 (embedded_statement -> iteration_statement .)
    BASE            reduce using rule 214 (embedded_statement -> iteration_statement .)
    TYPEOF          reduce using rule 214 (embedded_statement -> iteration_statement .)
    DEFAULT         reduce using rule 214 (embedded_statement -> iteration_statement .)
    DELEGATE        reduce using rule 214 (embedded_statement -> iteration_statement .)
    DECIMAL         reduce using rule 214 (embedded_statement -> iteration_statement .)
    BYTE            reduce using rule 214 (embedded_statement -> iteration_statement .)
    CHAR            reduce using rule 214 (embedded_statement -> iteration_statement .)
    DOUBLE          reduce using rule 214 (embedded_statement -> iteration_statement .)
    FLOAT           reduce using rule 214 (embedded_statement -> iteration_statement .)
    INT             reduce using rule 214 (embedded_statement -> iteration_statement .)
    LONG            reduce using rule 214 (embedded_statement -> iteration_statement .)
    SBYTE           reduce using rule 214 (embedded_statement -> iteration_statement .)
    SHORT           reduce using rule 214 (embedded_statement -> iteration_statement .)
    UINT            reduce using rule 214 (embedded_statement -> iteration_statement .)
    ULONG           reduce using rule 214 (embedded_statement -> iteration_statement .)
    USHORT          reduce using rule 214 (embedded_statement -> iteration_statement .)
    RBRACE          reduce using rule 214 (embedded_statement -> iteration_statement .)
    ELSE            reduce using rule 214 (embedded_statement -> iteration_statement .)
    CASE            reduce using rule 214 (embedded_statement -> iteration_statement .)


state 211

    (116) predefined_type -> BYTE .
    (19) integral_type -> BYTE .

    MEMBERACCESS    reduce using rule 116 (predefined_type -> BYTE .)
    IDENTIFIER      reduce using rule 19 (integral_type -> BYTE .)
    LBRACKET        reduce using rule 19 (integral_type -> BYTE .)


state 212

    (268) jump_statement -> goto_statement .

    CONST           reduce using rule 268 (jump_statement -> goto_statement .)
    LBRACE          reduce using rule 268 (jump_statement -> goto_statement .)
    STMT_TERMINATOR reduce using rule 268 (jump_statement -> goto_statement .)
    IF              reduce using rule 268 (jump_statement -> goto_statement .)
    SWITCH          reduce using rule 268 (jump_statement -> goto_statement .)
    WHILE           reduce using rule 268 (jump_statement -> goto_statement .)
    DO              reduce using rule 268 (jump_statement -> goto_statement .)
    FOR             reduce using rule 268 (jump_statement -> goto_statement .)
    BREAK           reduce using rule 268 (jump_statement -> goto_statement .)
    CONTINUE        reduce using rule 268 (jump_statement -> goto_statement .)
    GOTO            reduce using rule 268 (jump_statement -> goto_statement .)
    RETURN          reduce using rule 268 (jump_statement -> goto_statement .)
    NEW             reduce using rule 268 (jump_statement -> goto_statement .)
    INCREMENT       reduce using rule 268 (jump_statement -> goto_statement .)
    DECREMENT       reduce using rule 268 (jump_statement -> goto_statement .)
    PLUS            reduce using rule 268 (jump_statement -> goto_statement .)
    MINUS           reduce using rule 268 (jump_statement -> goto_statement .)
    LNOT            reduce using rule 268 (jump_statement -> goto_statement .)
    NOT             reduce using rule 268 (jump_statement -> goto_statement .)
    OBJECT          reduce using rule 268 (jump_statement -> goto_statement .)
    STRING          reduce using rule 268 (jump_statement -> goto_statement .)
    LPAREN          reduce using rule 268 (jump_statement -> goto_statement .)
    BOOL            reduce using rule 268 (jump_statement -> goto_statement .)
    INTCONST        reduce using rule 268 (jump_statement -> goto_statement .)
    STRCONST        reduce using rule 268 (jump_statement -> goto_statement .)
    CHCONST         reduce using rule 268 (jump_statement -> goto_statement .)
    IDENTIFIER      reduce using rule 268 (jump_statement -> goto_statement .)
    THIS            reduce using rule 268 (jump_statement -> goto_statement .)
    BASE            reduce using rule 268 (jump_statement -> goto_statement .)
    TYPEOF          reduce using rule 268 (jump_statement -> goto_statement .)
    DEFAULT         reduce using rule 268 (jump_statement -> goto_statement .)
    DELEGATE        reduce using rule 268 (jump_statement -> goto_statement .)
    DECIMAL         reduce using rule 268 (jump_statement -> goto_statement .)
    BYTE            reduce using rule 268 (jump_statement -> goto_statement .)
    CHAR            reduce using rule 268 (jump_statement -> goto_statement .)
    DOUBLE          reduce using rule 268 (jump_statement -> goto_statement .)
    FLOAT           reduce using rule 268 (jump_statement -> goto_statement .)
    INT             reduce using rule 268 (jump_statement -> goto_statement .)
    LONG            reduce using rule 268 (jump_statement -> goto_statement .)
    SBYTE           reduce using rule 268 (jump_statement -> goto_statement .)
    SHORT           reduce using rule 268 (jump_statement -> goto_statement .)
    UINT            reduce using rule 268 (jump_statement -> goto_statement .)
    ULONG           reduce using rule 268 (jump_statement -> goto_statement .)
    USHORT          reduce using rule 268 (jump_statement -> goto_statement .)
    RBRACE          reduce using rule 268 (jump_statement -> goto_statement .)
    ELSE            reduce using rule 268 (jump_statement -> goto_statement .)
    CASE            reduce using rule 268 (jump_statement -> goto_statement .)


state 213

    (269) jump_statement -> return_statement .

    CONST           reduce using rule 269 (jump_statement -> return_statement .)
    LBRACE          reduce using rule 269 (jump_statement -> return_statement .)
    STMT_TERMINATOR reduce using rule 269 (jump_statement -> return_statement .)
    IF              reduce using rule 269 (jump_statement -> return_statement .)
    SWITCH          reduce using rule 269 (jump_statement -> return_statement .)
    WHILE           reduce using rule 269 (jump_statement -> return_statement .)
    DO              reduce using rule 269 (jump_statement -> return_statement .)
    FOR             reduce using rule 269 (jump_statement -> return_statement .)
    BREAK           reduce using rule 269 (jump_statement -> return_statement .)
    CONTINUE        reduce using rule 269 (jump_statement -> return_statement .)
    GOTO            reduce using rule 269 (jump_statement -> return_statement .)
    RETURN          reduce using rule 269 (jump_statement -> return_statement .)
    NEW             reduce using rule 269 (jump_statement -> return_statement .)
    INCREMENT       reduce using rule 269 (jump_statement -> return_statement .)
    DECREMENT       reduce using rule 269 (jump_statement -> return_statement .)
    PLUS            reduce using rule 269 (jump_statement -> return_statement .)
    MINUS           reduce using rule 269 (jump_statement -> return_statement .)
    LNOT            reduce using rule 269 (jump_statement -> return_statement .)
    NOT             reduce using rule 269 (jump_statement -> return_statement .)
    OBJECT          reduce using rule 269 (jump_statement -> return_statement .)
    STRING          reduce using rule 269 (jump_statement -> return_statement .)
    LPAREN          reduce using rule 269 (jump_statement -> return_statement .)
    BOOL            reduce using rule 269 (jump_statement -> return_statement .)
    INTCONST        reduce using rule 269 (jump_statement -> return_statement .)
    STRCONST        reduce using rule 269 (jump_statement -> return_statement .)
    CHCONST         reduce using rule 269 (jump_statement -> return_statement .)
    IDENTIFIER      reduce using rule 269 (jump_statement -> return_statement .)
    THIS            reduce using rule 269 (jump_statement -> return_statement .)
    BASE            reduce using rule 269 (jump_statement -> return_statement .)
    TYPEOF          reduce using rule 269 (jump_statement -> return_statement .)
    DEFAULT         reduce using rule 269 (jump_statement -> return_statement .)
    DELEGATE        reduce using rule 269 (jump_statement -> return_statement .)
    DECIMAL         reduce using rule 269 (jump_statement -> return_statement .)
    BYTE            reduce using rule 269 (jump_statement -> return_statement .)
    CHAR            reduce using rule 269 (jump_statement -> return_statement .)
    DOUBLE          reduce using rule 269 (jump_statement -> return_statement .)
    FLOAT           reduce using rule 269 (jump_statement -> return_statement .)
    INT             reduce using rule 269 (jump_statement -> return_statement .)
    LONG            reduce using rule 269 (jump_statement -> return_statement .)
    SBYTE           reduce using rule 269 (jump_statement -> return_statement .)
    SHORT           reduce using rule 269 (jump_statement -> return_statement .)
    UINT            reduce using rule 269 (jump_statement -> return_statement .)
    ULONG           reduce using rule 269 (jump_statement -> return_statement .)
    USHORT          reduce using rule 269 (jump_statement -> return_statement .)
    RBRACE          reduce using rule 269 (jump_statement -> return_statement .)
    ELSE            reduce using rule 269 (jump_statement -> return_statement .)
    CASE            reduce using rule 269 (jump_statement -> return_statement .)


state 214

    (215) embedded_statement -> jump_statement .

    CONST           reduce using rule 215 (embedded_statement -> jump_statement .)
    LBRACE          reduce using rule 215 (embedded_statement -> jump_statement .)
    STMT_TERMINATOR reduce using rule 215 (embedded_statement -> jump_statement .)
    IF              reduce using rule 215 (embedded_statement -> jump_statement .)
    SWITCH          reduce using rule 215 (embedded_statement -> jump_statement .)
    WHILE           reduce using rule 215 (embedded_statement -> jump_statement .)
    DO              reduce using rule 215 (embedded_statement -> jump_statement .)
    FOR             reduce using rule 215 (embedded_statement -> jump_statement .)
    BREAK           reduce using rule 215 (embedded_statement -> jump_statement .)
    CONTINUE        reduce using rule 215 (embedded_statement -> jump_statement .)
    GOTO            reduce using rule 215 (embedded_statement -> jump_statement .)
    RETURN          reduce using rule 215 (embedded_statement -> jump_statement .)
    NEW             reduce using rule 215 (embedded_statement -> jump_statement .)
    INCREMENT       reduce using rule 215 (embedded_statement -> jump_statement .)
    DECREMENT       reduce using rule 215 (embedded_statement -> jump_statement .)
    PLUS            reduce using rule 215 (embedded_statement -> jump_statement .)
    MINUS           reduce using rule 215 (embedded_statement -> jump_statement .)
    LNOT            reduce using rule 215 (embedded_statement -> jump_statement .)
    NOT             reduce using rule 215 (embedded_statement -> jump_statement .)
    OBJECT          reduce using rule 215 (embedded_statement -> jump_statement .)
    STRING          reduce using rule 215 (embedded_statement -> jump_statement .)
    LPAREN          reduce using rule 215 (embedded_statement -> jump_statement .)
    BOOL            reduce using rule 215 (embedded_statement -> jump_statement .)
    INTCONST        reduce using rule 215 (embedded_statement -> jump_statement .)
    STRCONST        reduce using rule 215 (embedded_statement -> jump_statement .)
    CHCONST         reduce using rule 215 (embedded_statement -> jump_statement .)
    IDENTIFIER      reduce using rule 215 (embedded_statement -> jump_statement .)
    THIS            reduce using rule 215 (embedded_statement -> jump_statement .)
    BASE            reduce using rule 215 (embedded_statement -> jump_statement .)
    TYPEOF          reduce using rule 215 (embedded_statement -> jump_statement .)
    DEFAULT         reduce using rule 215 (embedded_statement -> jump_statement .)
    DELEGATE        reduce using rule 215 (embedded_statement -> jump_statement .)
    DECIMAL         reduce using rule 215 (embedded_statement -> jump_statement .)
    BYTE            reduce using rule 215 (embedded_statement -> jump_statement .)
    CHAR            reduce using rule 215 (embedded_statement -> jump_statement .)
    DOUBLE          reduce using rule 215 (embedded_statement -> jump_statement .)
    FLOAT           reduce using rule 215 (embedded_statement -> jump_statement .)
    INT             reduce using rule 215 (embedded_statement -> jump_statement .)
    LONG            reduce using rule 215 (embedded_statement -> jump_statement .)
    SBYTE           reduce using rule 215 (embedded_statement -> jump_statement .)
    SHORT           reduce using rule 215 (embedded_statement -> jump_statement .)
    UINT            reduce using rule 215 (embedded_statement -> jump_statement .)
    ULONG           reduce using rule 215 (embedded_statement -> jump_statement .)
    USHORT          reduce using rule 215 (embedded_statement -> jump_statement .)
    RBRACE          reduce using rule 215 (embedded_statement -> jump_statement .)
    ELSE            reduce using rule 215 (embedded_statement -> jump_statement .)
    CASE            reduce using rule 215 (embedded_statement -> jump_statement .)


state 215

    (275) return_statement -> RETURN . expression_opt STMT_TERMINATOR
    (414) expression_opt -> . empty
    (415) expression_opt -> . expression
    (371) empty -> .
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    conditional_expression         shift and go to state 291
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    empty                          shift and go to state 349
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 350
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    expression_opt                 shift and go to state 351
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 216

    (188) statement -> embedded_statement .

    CONST           reduce using rule 188 (statement -> embedded_statement .)
    LBRACE          reduce using rule 188 (statement -> embedded_statement .)
    STMT_TERMINATOR reduce using rule 188 (statement -> embedded_statement .)
    IF              reduce using rule 188 (statement -> embedded_statement .)
    SWITCH          reduce using rule 188 (statement -> embedded_statement .)
    WHILE           reduce using rule 188 (statement -> embedded_statement .)
    DO              reduce using rule 188 (statement -> embedded_statement .)
    FOR             reduce using rule 188 (statement -> embedded_statement .)
    BREAK           reduce using rule 188 (statement -> embedded_statement .)
    CONTINUE        reduce using rule 188 (statement -> embedded_statement .)
    GOTO            reduce using rule 188 (statement -> embedded_statement .)
    RETURN          reduce using rule 188 (statement -> embedded_statement .)
    NEW             reduce using rule 188 (statement -> embedded_statement .)
    INCREMENT       reduce using rule 188 (statement -> embedded_statement .)
    DECREMENT       reduce using rule 188 (statement -> embedded_statement .)
    PLUS            reduce using rule 188 (statement -> embedded_statement .)
    MINUS           reduce using rule 188 (statement -> embedded_statement .)
    LNOT            reduce using rule 188 (statement -> embedded_statement .)
    NOT             reduce using rule 188 (statement -> embedded_statement .)
    OBJECT          reduce using rule 188 (statement -> embedded_statement .)
    STRING          reduce using rule 188 (statement -> embedded_statement .)
    LPAREN          reduce using rule 188 (statement -> embedded_statement .)
    BOOL            reduce using rule 188 (statement -> embedded_statement .)
    INTCONST        reduce using rule 188 (statement -> embedded_statement .)
    STRCONST        reduce using rule 188 (statement -> embedded_statement .)
    CHCONST         reduce using rule 188 (statement -> embedded_statement .)
    IDENTIFIER      reduce using rule 188 (statement -> embedded_statement .)
    THIS            reduce using rule 188 (statement -> embedded_statement .)
    BASE            reduce using rule 188 (statement -> embedded_statement .)
    TYPEOF          reduce using rule 188 (statement -> embedded_statement .)
    DEFAULT         reduce using rule 188 (statement -> embedded_statement .)
    DELEGATE        reduce using rule 188 (statement -> embedded_statement .)
    DECIMAL         reduce using rule 188 (statement -> embedded_statement .)
    BYTE            reduce using rule 188 (statement -> embedded_statement .)
    CHAR            reduce using rule 188 (statement -> embedded_statement .)
    DOUBLE          reduce using rule 188 (statement -> embedded_statement .)
    FLOAT           reduce using rule 188 (statement -> embedded_statement .)
    INT             reduce using rule 188 (statement -> embedded_statement .)
    LONG            reduce using rule 188 (statement -> embedded_statement .)
    SBYTE           reduce using rule 188 (statement -> embedded_statement .)
    SHORT           reduce using rule 188 (statement -> embedded_statement .)
    UINT            reduce using rule 188 (statement -> embedded_statement .)
    ULONG           reduce using rule 188 (statement -> embedded_statement .)
    USHORT          reduce using rule 188 (statement -> embedded_statement .)
    RBRACE          reduce using rule 188 (statement -> embedded_statement .)
    CASE            reduce using rule 188 (statement -> embedded_statement .)


state 217

    (245) switch_statement -> SWITCH . LPAREN expression RPAREN switch_block

    LPAREN          shift and go to state 352


state 218

    (242) if_statement -> IF . LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> IF . LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement

    LPAREN          shift and go to state 353


state 219

    (239) pre_decrement_expression -> DECREMENT . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 354
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 220

    (107) primary_no_array_creation_expression -> anonymous_object_creation_expression .

    LBRACKET        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    MEMBERACCESS    reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LPAREN          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    INCREMENT       reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    DECREMENT       reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    STMT_TERMINATOR reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    EQUALS          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    PLUSEQUAL       reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    MINUSEQUAL      reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    TIMESEQUAL      reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    DIVEQUAL        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    MODEQUAL        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    ANDEQUAL        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    OREQUAL         reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    XOREQUAL        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LAMBDADEC       reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    RSHIFTEQUAL     reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LSHIFTEQUAL     reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    TIMES           reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    DIVIDE          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    MOD             reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    PLUS            reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    MINUS           reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LSHIFT          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    RSHIFT          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LT              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    GT              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    LE              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    GE              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    IS              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    AS              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    EQ              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    NE              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    AND             reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    XOR             reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    OR              reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    CAND            reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    CONDOP          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    COR             reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    COMMA           reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    RPAREN          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    RBRACE          reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    COLON           reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)
    RBRACKET        reduce using rule 107 (primary_no_array_creation_expression -> anonymous_object_creation_expression .)


state 221

    (95) primary_no_array_creation_expression -> literal .

    LBRACKET        reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    MEMBERACCESS    reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LPAREN          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    INCREMENT       reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    DECREMENT       reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    STMT_TERMINATOR reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    EQUALS          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    PLUSEQUAL       reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    MINUSEQUAL      reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    TIMESEQUAL      reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    DIVEQUAL        reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    MODEQUAL        reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    ANDEQUAL        reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    OREQUAL         reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    XOREQUAL        reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LAMBDADEC       reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    RSHIFTEQUAL     reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LSHIFTEQUAL     reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    TIMES           reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    DIVIDE          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    MOD             reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    PLUS            reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    MINUS           reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LSHIFT          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    RSHIFT          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LT              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    GT              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    LE              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    GE              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    IS              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    AS              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    EQ              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    NE              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    AND             reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    XOR             reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    OR              reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    CAND            reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    CONDOP          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    COR             reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    COMMA           reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    RPAREN          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    RBRACE          reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    COLON           reduce using rule 95 (primary_no_array_creation_expression -> literal .)
    RBRACKET        reduce using rule 95 (primary_no_array_creation_expression -> literal .)


state 222

    (87) unary_expression -> MINUS . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 355
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 223

    (256) iteration_statement -> for_statement .

    CONST           reduce using rule 256 (iteration_statement -> for_statement .)
    LBRACE          reduce using rule 256 (iteration_statement -> for_statement .)
    STMT_TERMINATOR reduce using rule 256 (iteration_statement -> for_statement .)
    IF              reduce using rule 256 (iteration_statement -> for_statement .)
    SWITCH          reduce using rule 256 (iteration_statement -> for_statement .)
    WHILE           reduce using rule 256 (iteration_statement -> for_statement .)
    DO              reduce using rule 256 (iteration_statement -> for_statement .)
    FOR             reduce using rule 256 (iteration_statement -> for_statement .)
    BREAK           reduce using rule 256 (iteration_statement -> for_statement .)
    CONTINUE        reduce using rule 256 (iteration_statement -> for_statement .)
    GOTO            reduce using rule 256 (iteration_statement -> for_statement .)
    RETURN          reduce using rule 256 (iteration_statement -> for_statement .)
    NEW             reduce using rule 256 (iteration_statement -> for_statement .)
    INCREMENT       reduce using rule 256 (iteration_statement -> for_statement .)
    DECREMENT       reduce using rule 256 (iteration_statement -> for_statement .)
    PLUS            reduce using rule 256 (iteration_statement -> for_statement .)
    MINUS           reduce using rule 256 (iteration_statement -> for_statement .)
    LNOT            reduce using rule 256 (iteration_statement -> for_statement .)
    NOT             reduce using rule 256 (iteration_statement -> for_statement .)
    OBJECT          reduce using rule 256 (iteration_statement -> for_statement .)
    STRING          reduce using rule 256 (iteration_statement -> for_statement .)
    LPAREN          reduce using rule 256 (iteration_statement -> for_statement .)
    BOOL            reduce using rule 256 (iteration_statement -> for_statement .)
    INTCONST        reduce using rule 256 (iteration_statement -> for_statement .)
    STRCONST        reduce using rule 256 (iteration_statement -> for_statement .)
    CHCONST         reduce using rule 256 (iteration_statement -> for_statement .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> for_statement .)
    THIS            reduce using rule 256 (iteration_statement -> for_statement .)
    BASE            reduce using rule 256 (iteration_statement -> for_statement .)
    TYPEOF          reduce using rule 256 (iteration_statement -> for_statement .)
    DEFAULT         reduce using rule 256 (iteration_statement -> for_statement .)
    DELEGATE        reduce using rule 256 (iteration_statement -> for_statement .)
    DECIMAL         reduce using rule 256 (iteration_statement -> for_statement .)
    BYTE            reduce using rule 256 (iteration_statement -> for_statement .)
    CHAR            reduce using rule 256 (iteration_statement -> for_statement .)
    DOUBLE          reduce using rule 256 (iteration_statement -> for_statement .)
    FLOAT           reduce using rule 256 (iteration_statement -> for_statement .)
    INT             reduce using rule 256 (iteration_statement -> for_statement .)
    LONG            reduce using rule 256 (iteration_statement -> for_statement .)
    SBYTE           reduce using rule 256 (iteration_statement -> for_statement .)
    SHORT           reduce using rule 256 (iteration_statement -> for_statement .)
    UINT            reduce using rule 256 (iteration_statement -> for_statement .)
    ULONG           reduce using rule 256 (iteration_statement -> for_statement .)
    USHORT          reduce using rule 256 (iteration_statement -> for_statement .)
    RBRACE          reduce using rule 256 (iteration_statement -> for_statement .)
    ELSE            reduce using rule 256 (iteration_statement -> for_statement .)
    CASE            reduce using rule 256 (iteration_statement -> for_statement .)


state 224

    (42) literal -> CHCONST .

    LBRACKET        reduce using rule 42 (literal -> CHCONST .)
    MEMBERACCESS    reduce using rule 42 (literal -> CHCONST .)
    LPAREN          reduce using rule 42 (literal -> CHCONST .)
    INCREMENT       reduce using rule 42 (literal -> CHCONST .)
    DECREMENT       reduce using rule 42 (literal -> CHCONST .)
    TIMES           reduce using rule 42 (literal -> CHCONST .)
    DIVIDE          reduce using rule 42 (literal -> CHCONST .)
    MOD             reduce using rule 42 (literal -> CHCONST .)
    PLUS            reduce using rule 42 (literal -> CHCONST .)
    MINUS           reduce using rule 42 (literal -> CHCONST .)
    LSHIFT          reduce using rule 42 (literal -> CHCONST .)
    RSHIFT          reduce using rule 42 (literal -> CHCONST .)
    LT              reduce using rule 42 (literal -> CHCONST .)
    GT              reduce using rule 42 (literal -> CHCONST .)
    LE              reduce using rule 42 (literal -> CHCONST .)
    GE              reduce using rule 42 (literal -> CHCONST .)
    IS              reduce using rule 42 (literal -> CHCONST .)
    AS              reduce using rule 42 (literal -> CHCONST .)
    EQ              reduce using rule 42 (literal -> CHCONST .)
    NE              reduce using rule 42 (literal -> CHCONST .)
    AND             reduce using rule 42 (literal -> CHCONST .)
    XOR             reduce using rule 42 (literal -> CHCONST .)
    OR              reduce using rule 42 (literal -> CHCONST .)
    CAND            reduce using rule 42 (literal -> CHCONST .)
    CONDOP          reduce using rule 42 (literal -> CHCONST .)
    COR             reduce using rule 42 (literal -> CHCONST .)
    COMMA           reduce using rule 42 (literal -> CHCONST .)
    RPAREN          reduce using rule 42 (literal -> CHCONST .)
    STMT_TERMINATOR reduce using rule 42 (literal -> CHCONST .)
    RBRACE          reduce using rule 42 (literal -> CHCONST .)
    COLON           reduce using rule 42 (literal -> CHCONST .)
    RBRACKET        reduce using rule 42 (literal -> CHCONST .)
    EQUALS          reduce using rule 42 (literal -> CHCONST .)
    PLUSEQUAL       reduce using rule 42 (literal -> CHCONST .)
    MINUSEQUAL      reduce using rule 42 (literal -> CHCONST .)
    TIMESEQUAL      reduce using rule 42 (literal -> CHCONST .)
    DIVEQUAL        reduce using rule 42 (literal -> CHCONST .)
    MODEQUAL        reduce using rule 42 (literal -> CHCONST .)
    ANDEQUAL        reduce using rule 42 (literal -> CHCONST .)
    OREQUAL         reduce using rule 42 (literal -> CHCONST .)
    XOREQUAL        reduce using rule 42 (literal -> CHCONST .)
    LAMBDADEC       reduce using rule 42 (literal -> CHCONST .)
    RSHIFTEQUAL     reduce using rule 42 (literal -> CHCONST .)
    LSHIFTEQUAL     reduce using rule 42 (literal -> CHCONST .)


state 225

    (127) predefined_type -> UINT .
    (23) integral_type -> UINT .

    MEMBERACCESS    reduce using rule 127 (predefined_type -> UINT .)
    IDENTIFIER      reduce using rule 23 (integral_type -> UINT .)
    LBRACKET        reduce using rule 23 (integral_type -> UINT .)


state 226

    (102) primary_no_array_creation_expression -> base_access .

    LBRACKET        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    MEMBERACCESS    reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LPAREN          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    INCREMENT       reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    DECREMENT       reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    STMT_TERMINATOR reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    EQUALS          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    PLUSEQUAL       reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    MINUSEQUAL      reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    TIMESEQUAL      reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    DIVEQUAL        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    MODEQUAL        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    ANDEQUAL        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    OREQUAL         reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    XOREQUAL        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LAMBDADEC       reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    RSHIFTEQUAL     reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LSHIFTEQUAL     reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    TIMES           reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    DIVIDE          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    MOD             reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    PLUS            reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    MINUS           reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LSHIFT          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    RSHIFT          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LT              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    GT              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    LE              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    GE              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    IS              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    AS              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    EQ              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    NE              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    AND             reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    XOR             reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    OR              reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    CAND            reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    CONDOP          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    COR             reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    COMMA           reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    RPAREN          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    RBRACE          reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    COLON           reduce using rule 102 (primary_no_array_creation_expression -> base_access .)
    RBRACKET        reduce using rule 102 (primary_no_array_creation_expression -> base_access .)


state 227

    (89) unary_expression -> NOT . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 356
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 228

    (86) unary_expression -> PLUS . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 357
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 229

    (225) assignment -> unary_expression . assignment_operator expression
    (226) assignment_operator -> . EQUALS
    (227) assignment_operator -> . PLUSEQUAL
    (228) assignment_operator -> . MINUSEQUAL
    (229) assignment_operator -> . TIMESEQUAL
    (230) assignment_operator -> . DIVEQUAL
    (231) assignment_operator -> . MODEQUAL
    (232) assignment_operator -> . ANDEQUAL
    (233) assignment_operator -> . OREQUAL
    (234) assignment_operator -> . XOREQUAL
    (235) assignment_operator -> . LAMBDADEC
    (236) assignment_operator -> . RSHIFTEQUAL
    (237) assignment_operator -> . LSHIFTEQUAL

    EQUALS          shift and go to state 362
    PLUSEQUAL       shift and go to state 365
    MINUSEQUAL      shift and go to state 364
    TIMESEQUAL      shift and go to state 358
    DIVEQUAL        shift and go to state 369
    MODEQUAL        shift and go to state 361
    ANDEQUAL        shift and go to state 367
    OREQUAL         shift and go to state 360
    XOREQUAL        shift and go to state 368
    LAMBDADEC       shift and go to state 370
    RSHIFTEQUAL     shift and go to state 366
    LSHIFTEQUAL     shift and go to state 359

    assignment_operator            shift and go to state 363

state 230

    (120) predefined_type -> FLOAT .
    (27) floating_point_type -> FLOAT .

    MEMBERACCESS    reduce using rule 120 (predefined_type -> FLOAT .)
    IDENTIFIER      reduce using rule 27 (floating_point_type -> FLOAT .)
    LBRACKET        reduce using rule 27 (floating_point_type -> FLOAT .)


state 231

    (191) local_variable_declaration -> local_variable_type . local_variable_declarators
    (193) local_variable_declarators -> . local_variable_declarator
    (194) local_variable_declarators -> . local_variable_declarators COMMA local_variable_declarator
    (195) local_variable_declarator -> . IDENTIFIER
    (196) local_variable_declarator -> . IDENTIFIER EQUALS local_variable_initializer

    IDENTIFIER      shift and go to state 371

    local_variable_declarator      shift and go to state 372
    local_variable_declarators     shift and go to state 373

state 232

    (185) statement_list -> statement .

    CONST           reduce using rule 185 (statement_list -> statement .)
    LBRACE          reduce using rule 185 (statement_list -> statement .)
    STMT_TERMINATOR reduce using rule 185 (statement_list -> statement .)
    IF              reduce using rule 185 (statement_list -> statement .)
    SWITCH          reduce using rule 185 (statement_list -> statement .)
    WHILE           reduce using rule 185 (statement_list -> statement .)
    DO              reduce using rule 185 (statement_list -> statement .)
    FOR             reduce using rule 185 (statement_list -> statement .)
    BREAK           reduce using rule 185 (statement_list -> statement .)
    CONTINUE        reduce using rule 185 (statement_list -> statement .)
    GOTO            reduce using rule 185 (statement_list -> statement .)
    RETURN          reduce using rule 185 (statement_list -> statement .)
    NEW             reduce using rule 185 (statement_list -> statement .)
    INCREMENT       reduce using rule 185 (statement_list -> statement .)
    DECREMENT       reduce using rule 185 (statement_list -> statement .)
    PLUS            reduce using rule 185 (statement_list -> statement .)
    MINUS           reduce using rule 185 (statement_list -> statement .)
    LNOT            reduce using rule 185 (statement_list -> statement .)
    NOT             reduce using rule 185 (statement_list -> statement .)
    OBJECT          reduce using rule 185 (statement_list -> statement .)
    STRING          reduce using rule 185 (statement_list -> statement .)
    LPAREN          reduce using rule 185 (statement_list -> statement .)
    BOOL            reduce using rule 185 (statement_list -> statement .)
    INTCONST        reduce using rule 185 (statement_list -> statement .)
    STRCONST        reduce using rule 185 (statement_list -> statement .)
    CHCONST         reduce using rule 185 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 185 (statement_list -> statement .)
    THIS            reduce using rule 185 (statement_list -> statement .)
    BASE            reduce using rule 185 (statement_list -> statement .)
    TYPEOF          reduce using rule 185 (statement_list -> statement .)
    DEFAULT         reduce using rule 185 (statement_list -> statement .)
    DELEGATE        reduce using rule 185 (statement_list -> statement .)
    DECIMAL         reduce using rule 185 (statement_list -> statement .)
    BYTE            reduce using rule 185 (statement_list -> statement .)
    CHAR            reduce using rule 185 (statement_list -> statement .)
    DOUBLE          reduce using rule 185 (statement_list -> statement .)
    FLOAT           reduce using rule 185 (statement_list -> statement .)
    INT             reduce using rule 185 (statement_list -> statement .)
    LONG            reduce using rule 185 (statement_list -> statement .)
    SBYTE           reduce using rule 185 (statement_list -> statement .)
    SHORT           reduce using rule 185 (statement_list -> statement .)
    UINT            reduce using rule 185 (statement_list -> statement .)
    ULONG           reduce using rule 185 (statement_list -> statement .)
    USHORT          reduce using rule 185 (statement_list -> statement .)
    CASE            reduce using rule 185 (statement_list -> statement .)
    RBRACE          reduce using rule 185 (statement_list -> statement .)


state 233

    (272) goto_statement -> GOTO . IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> GOTO . CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> GOTO . DEFAULT STMT_TERMINATOR

    IDENTIFIER      shift and go to state 375
    CASE            shift and go to state 376
    DEFAULT         shift and go to state 374


state 234

    (216) empty_statement -> STMT_TERMINATOR .

    CONST           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    IF              reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    SWITCH          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    WHILE           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DO              reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    FOR             reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    BREAK           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    CONTINUE        reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    GOTO            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    RETURN          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    NEW             reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    INCREMENT       reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DECREMENT       reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    PLUS            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    MINUS           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    LNOT            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    NOT             reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    STRING          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    BOOL            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    INTCONST        reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    STRCONST        reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    CHCONST         reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    THIS            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    BASE            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    TYPEOF          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DEFAULT         reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    BYTE            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    CHAR            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    INT             reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    LONG            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    SHORT           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    UINT            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    ULONG           reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    USHORT          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    ELSE            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)
    CASE            reduce using rule 216 (empty_statement -> STMT_TERMINATOR .)


state 235

    (110) primary_no_array_creation_expression -> anonymous_method_expression .

    LBRACKET        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    MEMBERACCESS    reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LPAREN          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    INCREMENT       reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    DECREMENT       reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    STMT_TERMINATOR reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    EQUALS          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    PLUSEQUAL       reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    MINUSEQUAL      reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    TIMESEQUAL      reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    DIVEQUAL        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    MODEQUAL        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    ANDEQUAL        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    OREQUAL         reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    XOREQUAL        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LAMBDADEC       reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    RSHIFTEQUAL     reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LSHIFTEQUAL     reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    TIMES           reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    DIVIDE          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    MOD             reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    PLUS            reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    MINUS           reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LSHIFT          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    RSHIFT          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LT              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    GT              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    LE              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    GE              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    IS              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    AS              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    EQ              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    NE              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    AND             reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    XOR             reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    OR              reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    CAND            reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    CONDOP          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    COR             reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    COMMA           reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    RPAREN          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    RBRACE          reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    COLON           reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)
    RBRACKET        reduce using rule 110 (primary_no_array_creation_expression -> anonymous_method_expression .)


state 236

    (279) cast_expression -> LPAREN . type RPAREN unary_expression
    (112) parenthesized_expression -> LPAREN . expression RPAREN
    (7) type -> . value_type
    (8) type -> . reference_type
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    BOOL            shift and go to state 168
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    IDENTIFIER      shift and go to state 377
    DECIMAL         shift and go to state 249
    NEW             shift and go to state 317
    SBYTE           shift and go to state 379
    BYTE            shift and go to state 385
    SHORT           shift and go to state 386
    USHORT          shift and go to state 382
    INT             shift and go to state 381
    UINT            shift and go to state 387
    LONG            shift and go to state 383
    ULONG           shift and go to state 389
    CHAR            shift and go to state 378
    FLOAT           shift and go to state 388
    DOUBLE          shift and go to state 390
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    numeric_type                   shift and go to state 38
    conditional_expression         shift and go to state 291
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    simple_type                    shift and go to state 40
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    struct_type                    shift and go to state 42
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    non_array_type                 shift and go to state 58
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 380
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    type_name                      shift and go to state 50
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    array_type                     shift and go to state 53
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    type                           shift and go to state 384
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    explicit_anonymous_function_signature shift and go to state 277
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    value_type                     shift and go to state 68
    implicit_anonymous_function_parameter shift and go to state 314
    floating_point_type            shift and go to state 70

state 237

    (128) predefined_type -> ULONG .
    (25) integral_type -> ULONG .

    MEMBERACCESS    reduce using rule 128 (predefined_type -> ULONG .)
    IDENTIFIER      reduce using rule 25 (integral_type -> ULONG .)
    LBRACKET        reduce using rule 25 (integral_type -> ULONG .)


state 238

    (217) expression_statement -> statement_expression . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 391


state 239

    (130) invocation_expression -> primary_expression . LPAREN argument_list_opt RPAREN
    (139) post_increment_expression -> primary_expression . INCREMENT
    (140) post_decrement_expression -> primary_expression . DECREMENT
    (85) unary_expression -> primary_expression .
    (113) member_access -> primary_expression . MEMBERACCESS IDENTIFIER

    LPAREN          shift and go to state 395
    INCREMENT       shift and go to state 394
    DECREMENT       shift and go to state 392
    EQUALS          reduce using rule 85 (unary_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 85 (unary_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 85 (unary_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 85 (unary_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    MODEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    OREQUAL         reduce using rule 85 (unary_expression -> primary_expression .)
    XOREQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    LAMBDADEC       reduce using rule 85 (unary_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 85 (unary_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 85 (unary_expression -> primary_expression .)
    MEMBERACCESS    shift and go to state 393


state 240

    (41) literal -> STRCONST .

    LBRACKET        reduce using rule 41 (literal -> STRCONST .)
    MEMBERACCESS    reduce using rule 41 (literal -> STRCONST .)
    LPAREN          reduce using rule 41 (literal -> STRCONST .)
    INCREMENT       reduce using rule 41 (literal -> STRCONST .)
    DECREMENT       reduce using rule 41 (literal -> STRCONST .)
    TIMES           reduce using rule 41 (literal -> STRCONST .)
    DIVIDE          reduce using rule 41 (literal -> STRCONST .)
    MOD             reduce using rule 41 (literal -> STRCONST .)
    PLUS            reduce using rule 41 (literal -> STRCONST .)
    MINUS           reduce using rule 41 (literal -> STRCONST .)
    LSHIFT          reduce using rule 41 (literal -> STRCONST .)
    RSHIFT          reduce using rule 41 (literal -> STRCONST .)
    LT              reduce using rule 41 (literal -> STRCONST .)
    GT              reduce using rule 41 (literal -> STRCONST .)
    LE              reduce using rule 41 (literal -> STRCONST .)
    GE              reduce using rule 41 (literal -> STRCONST .)
    IS              reduce using rule 41 (literal -> STRCONST .)
    AS              reduce using rule 41 (literal -> STRCONST .)
    EQ              reduce using rule 41 (literal -> STRCONST .)
    NE              reduce using rule 41 (literal -> STRCONST .)
    AND             reduce using rule 41 (literal -> STRCONST .)
    XOR             reduce using rule 41 (literal -> STRCONST .)
    OR              reduce using rule 41 (literal -> STRCONST .)
    CAND            reduce using rule 41 (literal -> STRCONST .)
    CONDOP          reduce using rule 41 (literal -> STRCONST .)
    COR             reduce using rule 41 (literal -> STRCONST .)
    COMMA           reduce using rule 41 (literal -> STRCONST .)
    RPAREN          reduce using rule 41 (literal -> STRCONST .)
    STMT_TERMINATOR reduce using rule 41 (literal -> STRCONST .)
    RBRACE          reduce using rule 41 (literal -> STRCONST .)
    COLON           reduce using rule 41 (literal -> STRCONST .)
    RBRACKET        reduce using rule 41 (literal -> STRCONST .)
    EQUALS          reduce using rule 41 (literal -> STRCONST .)
    PLUSEQUAL       reduce using rule 41 (literal -> STRCONST .)
    MINUSEQUAL      reduce using rule 41 (literal -> STRCONST .)
    TIMESEQUAL      reduce using rule 41 (literal -> STRCONST .)
    DIVEQUAL        reduce using rule 41 (literal -> STRCONST .)
    MODEQUAL        reduce using rule 41 (literal -> STRCONST .)
    ANDEQUAL        reduce using rule 41 (literal -> STRCONST .)
    OREQUAL         reduce using rule 41 (literal -> STRCONST .)
    XOREQUAL        reduce using rule 41 (literal -> STRCONST .)
    LAMBDADEC       reduce using rule 41 (literal -> STRCONST .)
    RSHIFTEQUAL     reduce using rule 41 (literal -> STRCONST .)
    LSHIFTEQUAL     reduce using rule 41 (literal -> STRCONST .)


state 241

    (219) statement_expression -> object_creation_expression .
    (105) primary_no_array_creation_expression -> object_creation_expression .

    COMMA           reduce using rule 219 (statement_expression -> object_creation_expression .)
    STMT_TERMINATOR reduce using rule 219 (statement_expression -> object_creation_expression .)
    RPAREN          reduce using rule 219 (statement_expression -> object_creation_expression .)
    LBRACKET        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LPAREN          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    INCREMENT       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    DECREMENT       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MEMBERACCESS    reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    EQUALS          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    PLUSEQUAL       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MINUSEQUAL      reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    TIMESEQUAL      reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    DIVEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MODEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    ANDEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    OREQUAL         reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    XOREQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LAMBDADEC       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RSHIFTEQUAL     reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LSHIFTEQUAL     reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)


state 242

    (184) block -> LBRACE statement_list_opt . RBRACE

    RBRACE          shift and go to state 396


state 243

    (136) this_access -> THIS .

    LBRACKET        reduce using rule 136 (this_access -> THIS .)
    MEMBERACCESS    reduce using rule 136 (this_access -> THIS .)
    LPAREN          reduce using rule 136 (this_access -> THIS .)
    INCREMENT       reduce using rule 136 (this_access -> THIS .)
    DECREMENT       reduce using rule 136 (this_access -> THIS .)
    EQUALS          reduce using rule 136 (this_access -> THIS .)
    PLUSEQUAL       reduce using rule 136 (this_access -> THIS .)
    MINUSEQUAL      reduce using rule 136 (this_access -> THIS .)
    TIMESEQUAL      reduce using rule 136 (this_access -> THIS .)
    DIVEQUAL        reduce using rule 136 (this_access -> THIS .)
    MODEQUAL        reduce using rule 136 (this_access -> THIS .)
    ANDEQUAL        reduce using rule 136 (this_access -> THIS .)
    OREQUAL         reduce using rule 136 (this_access -> THIS .)
    XOREQUAL        reduce using rule 136 (this_access -> THIS .)
    LAMBDADEC       reduce using rule 136 (this_access -> THIS .)
    RSHIFTEQUAL     reduce using rule 136 (this_access -> THIS .)
    LSHIFTEQUAL     reduce using rule 136 (this_access -> THIS .)
    TIMES           reduce using rule 136 (this_access -> THIS .)
    DIVIDE          reduce using rule 136 (this_access -> THIS .)
    MOD             reduce using rule 136 (this_access -> THIS .)
    PLUS            reduce using rule 136 (this_access -> THIS .)
    MINUS           reduce using rule 136 (this_access -> THIS .)
    LSHIFT          reduce using rule 136 (this_access -> THIS .)
    RSHIFT          reduce using rule 136 (this_access -> THIS .)
    LT              reduce using rule 136 (this_access -> THIS .)
    GT              reduce using rule 136 (this_access -> THIS .)
    LE              reduce using rule 136 (this_access -> THIS .)
    GE              reduce using rule 136 (this_access -> THIS .)
    IS              reduce using rule 136 (this_access -> THIS .)
    AS              reduce using rule 136 (this_access -> THIS .)
    EQ              reduce using rule 136 (this_access -> THIS .)
    NE              reduce using rule 136 (this_access -> THIS .)
    AND             reduce using rule 136 (this_access -> THIS .)
    XOR             reduce using rule 136 (this_access -> THIS .)
    OR              reduce using rule 136 (this_access -> THIS .)
    CAND            reduce using rule 136 (this_access -> THIS .)
    CONDOP          reduce using rule 136 (this_access -> THIS .)
    COR             reduce using rule 136 (this_access -> THIS .)
    STMT_TERMINATOR reduce using rule 136 (this_access -> THIS .)
    COMMA           reduce using rule 136 (this_access -> THIS .)
    RPAREN          reduce using rule 136 (this_access -> THIS .)
    RBRACE          reduce using rule 136 (this_access -> THIS .)
    COLON           reduce using rule 136 (this_access -> THIS .)
    RBRACKET        reduce using rule 136 (this_access -> THIS .)


state 244

    (258) do_statement -> DO . embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    literal                        shift and go to state 221
    for_statement                  shift and go to state 223
    member_access                  shift and go to state 169
    switch_statement               shift and go to state 193
    selection_statement            shift and go to state 173
    base_access                    shift and go to state 226
    expression_statement           shift and go to state 175
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    delegate_creation_expression   shift and go to state 189
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    break_statement                shift and go to state 258
    do_statement                   shift and go to state 248
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    while_statement                shift and go to state 257
    block                          shift and go to state 200
    primary_no_array_creation_expression shift and go to state 250
    this_access                    shift and go to state 251
    simple_name                    shift and go to state 203
    empty_statement                shift and go to state 204
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    return_statement               shift and go to state 213
    jump_statement                 shift and go to state 214
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 397

state 245

    (270) break_statement -> BREAK . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 398


state 246

    (223) statement_expression -> pre_increment_expression .
    (90) unary_expression -> pre_increment_expression .

    COMMA           reduce using rule 223 (statement_expression -> pre_increment_expression .)
    STMT_TERMINATOR reduce using rule 223 (statement_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 223 (statement_expression -> pre_increment_expression .)
    EQUALS          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    PLUSEQUAL       reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MINUSEQUAL      reduce using rule 90 (unary_expression -> pre_increment_expression .)
    TIMESEQUAL      reduce using rule 90 (unary_expression -> pre_increment_expression .)
    DIVEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MODEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    ANDEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    OREQUAL         reduce using rule 90 (unary_expression -> pre_increment_expression .)
    XOREQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LAMBDADEC       reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RSHIFTEQUAL     reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LSHIFTEQUAL     reduce using rule 90 (unary_expression -> pre_increment_expression .)


state 247

    (178) default_value_expression -> DEFAULT . LPAREN type RPAREN

    LPAREN          shift and go to state 399


state 248

    (255) iteration_statement -> do_statement .

    CONST           reduce using rule 255 (iteration_statement -> do_statement .)
    LBRACE          reduce using rule 255 (iteration_statement -> do_statement .)
    STMT_TERMINATOR reduce using rule 255 (iteration_statement -> do_statement .)
    IF              reduce using rule 255 (iteration_statement -> do_statement .)
    SWITCH          reduce using rule 255 (iteration_statement -> do_statement .)
    WHILE           reduce using rule 255 (iteration_statement -> do_statement .)
    DO              reduce using rule 255 (iteration_statement -> do_statement .)
    FOR             reduce using rule 255 (iteration_statement -> do_statement .)
    BREAK           reduce using rule 255 (iteration_statement -> do_statement .)
    CONTINUE        reduce using rule 255 (iteration_statement -> do_statement .)
    GOTO            reduce using rule 255 (iteration_statement -> do_statement .)
    RETURN          reduce using rule 255 (iteration_statement -> do_statement .)
    NEW             reduce using rule 255 (iteration_statement -> do_statement .)
    INCREMENT       reduce using rule 255 (iteration_statement -> do_statement .)
    DECREMENT       reduce using rule 255 (iteration_statement -> do_statement .)
    PLUS            reduce using rule 255 (iteration_statement -> do_statement .)
    MINUS           reduce using rule 255 (iteration_statement -> do_statement .)
    LNOT            reduce using rule 255 (iteration_statement -> do_statement .)
    NOT             reduce using rule 255 (iteration_statement -> do_statement .)
    OBJECT          reduce using rule 255 (iteration_statement -> do_statement .)
    STRING          reduce using rule 255 (iteration_statement -> do_statement .)
    LPAREN          reduce using rule 255 (iteration_statement -> do_statement .)
    BOOL            reduce using rule 255 (iteration_statement -> do_statement .)
    INTCONST        reduce using rule 255 (iteration_statement -> do_statement .)
    STRCONST        reduce using rule 255 (iteration_statement -> do_statement .)
    CHCONST         reduce using rule 255 (iteration_statement -> do_statement .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> do_statement .)
    THIS            reduce using rule 255 (iteration_statement -> do_statement .)
    BASE            reduce using rule 255 (iteration_statement -> do_statement .)
    TYPEOF          reduce using rule 255 (iteration_statement -> do_statement .)
    DEFAULT         reduce using rule 255 (iteration_statement -> do_statement .)
    DELEGATE        reduce using rule 255 (iteration_statement -> do_statement .)
    DECIMAL         reduce using rule 255 (iteration_statement -> do_statement .)
    BYTE            reduce using rule 255 (iteration_statement -> do_statement .)
    CHAR            reduce using rule 255 (iteration_statement -> do_statement .)
    DOUBLE          reduce using rule 255 (iteration_statement -> do_statement .)
    FLOAT           reduce using rule 255 (iteration_statement -> do_statement .)
    INT             reduce using rule 255 (iteration_statement -> do_statement .)
    LONG            reduce using rule 255 (iteration_statement -> do_statement .)
    SBYTE           reduce using rule 255 (iteration_statement -> do_statement .)
    SHORT           reduce using rule 255 (iteration_statement -> do_statement .)
    UINT            reduce using rule 255 (iteration_statement -> do_statement .)
    ULONG           reduce using rule 255 (iteration_statement -> do_statement .)
    USHORT          reduce using rule 255 (iteration_statement -> do_statement .)
    RBRACE          reduce using rule 255 (iteration_statement -> do_statement .)
    ELSE            reduce using rule 255 (iteration_statement -> do_statement .)
    CASE            reduce using rule 255 (iteration_statement -> do_statement .)


state 249

    (17) numeric_type -> DECIMAL .
    (118) predefined_type -> DECIMAL .

    IDENTIFIER      reduce using rule 17 (numeric_type -> DECIMAL .)
    LBRACKET        reduce using rule 17 (numeric_type -> DECIMAL .)
    RPAREN          reduce using rule 17 (numeric_type -> DECIMAL .)
    MEMBERACCESS    reduce using rule 118 (predefined_type -> DECIMAL .)


state 250

    (93) primary_expression -> primary_no_array_creation_expression .
    (135) element_access -> primary_no_array_creation_expression . LBRACKET argument_list RBRACKET

    MEMBERACCESS    reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LPAREN          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    INCREMENT       reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    DECREMENT       reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    EQUALS          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    PLUSEQUAL       reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    MINUSEQUAL      reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    TIMESEQUAL      reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    DIVEQUAL        reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    MODEQUAL        reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    ANDEQUAL        reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    OREQUAL         reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    XOREQUAL        reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LAMBDADEC       reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    RSHIFTEQUAL     reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LSHIFTEQUAL     reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    TIMES           reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    DIVIDE          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    MOD             reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    PLUS            reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    MINUS           reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LSHIFT          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    RSHIFT          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LT              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    GT              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LE              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    GE              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    IS              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    AS              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    EQ              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    NE              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    AND             reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    XOR             reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    OR              reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    CAND            reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    CONDOP          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    COR             reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    RPAREN          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    COMMA           reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    STMT_TERMINATOR reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    RBRACE          reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    COLON           reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    RBRACKET        reduce using rule 93 (primary_expression -> primary_no_array_creation_expression .)
    LBRACKET        shift and go to state 400


state 251

    (101) primary_no_array_creation_expression -> this_access .

    LBRACKET        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    MEMBERACCESS    reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LPAREN          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    INCREMENT       reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    DECREMENT       reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    STMT_TERMINATOR reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    EQUALS          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    PLUSEQUAL       reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    MINUSEQUAL      reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    TIMESEQUAL      reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    DIVEQUAL        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    MODEQUAL        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    ANDEQUAL        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    OREQUAL         reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    XOREQUAL        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LAMBDADEC       reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    RSHIFTEQUAL     reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LSHIFTEQUAL     reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    TIMES           reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    DIVIDE          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    MOD             reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    PLUS            reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    MINUS           reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LSHIFT          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    RSHIFT          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LT              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    GT              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    LE              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    GE              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    IS              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    AS              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    EQ              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    NE              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    AND             reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    XOR             reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    OR              reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    CAND            reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    CONDOP          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    COR             reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    COMMA           reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    RPAREN          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    RBRACE          reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    COLON           reduce using rule 101 (primary_no_array_creation_expression -> this_access .)
    RBRACKET        reduce using rule 101 (primary_no_array_creation_expression -> this_access .)


state 252

    (94) primary_expression -> array_creation_expression .

    MEMBERACCESS    reduce using rule 94 (primary_expression -> array_creation_expression .)
    LPAREN          reduce using rule 94 (primary_expression -> array_creation_expression .)
    INCREMENT       reduce using rule 94 (primary_expression -> array_creation_expression .)
    DECREMENT       reduce using rule 94 (primary_expression -> array_creation_expression .)
    EQUALS          reduce using rule 94 (primary_expression -> array_creation_expression .)
    PLUSEQUAL       reduce using rule 94 (primary_expression -> array_creation_expression .)
    MINUSEQUAL      reduce using rule 94 (primary_expression -> array_creation_expression .)
    TIMESEQUAL      reduce using rule 94 (primary_expression -> array_creation_expression .)
    DIVEQUAL        reduce using rule 94 (primary_expression -> array_creation_expression .)
    MODEQUAL        reduce using rule 94 (primary_expression -> array_creation_expression .)
    ANDEQUAL        reduce using rule 94 (primary_expression -> array_creation_expression .)
    OREQUAL         reduce using rule 94 (primary_expression -> array_creation_expression .)
    XOREQUAL        reduce using rule 94 (primary_expression -> array_creation_expression .)
    LAMBDADEC       reduce using rule 94 (primary_expression -> array_creation_expression .)
    RSHIFTEQUAL     reduce using rule 94 (primary_expression -> array_creation_expression .)
    LSHIFTEQUAL     reduce using rule 94 (primary_expression -> array_creation_expression .)
    TIMES           reduce using rule 94 (primary_expression -> array_creation_expression .)
    DIVIDE          reduce using rule 94 (primary_expression -> array_creation_expression .)
    MOD             reduce using rule 94 (primary_expression -> array_creation_expression .)
    PLUS            reduce using rule 94 (primary_expression -> array_creation_expression .)
    MINUS           reduce using rule 94 (primary_expression -> array_creation_expression .)
    LSHIFT          reduce using rule 94 (primary_expression -> array_creation_expression .)
    RSHIFT          reduce using rule 94 (primary_expression -> array_creation_expression .)
    LT              reduce using rule 94 (primary_expression -> array_creation_expression .)
    GT              reduce using rule 94 (primary_expression -> array_creation_expression .)
    LE              reduce using rule 94 (primary_expression -> array_creation_expression .)
    GE              reduce using rule 94 (primary_expression -> array_creation_expression .)
    IS              reduce using rule 94 (primary_expression -> array_creation_expression .)
    AS              reduce using rule 94 (primary_expression -> array_creation_expression .)
    EQ              reduce using rule 94 (primary_expression -> array_creation_expression .)
    NE              reduce using rule 94 (primary_expression -> array_creation_expression .)
    AND             reduce using rule 94 (primary_expression -> array_creation_expression .)
    XOR             reduce using rule 94 (primary_expression -> array_creation_expression .)
    OR              reduce using rule 94 (primary_expression -> array_creation_expression .)
    CAND            reduce using rule 94 (primary_expression -> array_creation_expression .)
    CONDOP          reduce using rule 94 (primary_expression -> array_creation_expression .)
    COR             reduce using rule 94 (primary_expression -> array_creation_expression .)
    RPAREN          reduce using rule 94 (primary_expression -> array_creation_expression .)
    COMMA           reduce using rule 94 (primary_expression -> array_creation_expression .)
    STMT_TERMINATOR reduce using rule 94 (primary_expression -> array_creation_expression .)
    RBRACE          reduce using rule 94 (primary_expression -> array_creation_expression .)
    COLON           reduce using rule 94 (primary_expression -> array_creation_expression .)
    RBRACKET        reduce using rule 94 (primary_expression -> array_creation_expression .)


state 253

    (179) anonymous_method_expression -> DELEGATE . explicit_anonymous_function_signature_opt block
    (396) explicit_anonymous_function_signature_opt -> . empty
    (397) explicit_anonymous_function_signature_opt -> . explicit_anonymous_function_signature
    (371) empty -> .
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN

    LBRACE          reduce using rule 371 (empty -> .)
    LPAREN          shift and go to state 402

    explicit_anonymous_function_signature shift and go to state 401
    empty                          shift and go to state 403
    explicit_anonymous_function_signature_opt shift and go to state 404

state 254

    (119) predefined_type -> DOUBLE .
    (28) floating_point_type -> DOUBLE .

    MEMBERACCESS    reduce using rule 119 (predefined_type -> DOUBLE .)
    IDENTIFIER      reduce using rule 28 (floating_point_type -> DOUBLE .)
    LBRACKET        reduce using rule 28 (floating_point_type -> DOUBLE .)


state 255

    (222) statement_expression -> post_decrement_expression .
    (104) primary_no_array_creation_expression -> post_decrement_expression .

    COMMA           reduce using rule 222 (statement_expression -> post_decrement_expression .)
    STMT_TERMINATOR reduce using rule 222 (statement_expression -> post_decrement_expression .)
    RPAREN          reduce using rule 222 (statement_expression -> post_decrement_expression .)
    LBRACKET        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LPAREN          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    INCREMENT       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    DECREMENT       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MEMBERACCESS    reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    EQUALS          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    PLUSEQUAL       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MINUSEQUAL      reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    TIMESEQUAL      reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    DIVEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MODEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    ANDEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    OREQUAL         reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    XOREQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LAMBDADEC       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RSHIFTEQUAL     reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LSHIFTEQUAL     reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)


state 256

    (88) unary_expression -> LNOT . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 405
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 257

    (254) iteration_statement -> while_statement .

    CONST           reduce using rule 254 (iteration_statement -> while_statement .)
    LBRACE          reduce using rule 254 (iteration_statement -> while_statement .)
    STMT_TERMINATOR reduce using rule 254 (iteration_statement -> while_statement .)
    IF              reduce using rule 254 (iteration_statement -> while_statement .)
    SWITCH          reduce using rule 254 (iteration_statement -> while_statement .)
    WHILE           reduce using rule 254 (iteration_statement -> while_statement .)
    DO              reduce using rule 254 (iteration_statement -> while_statement .)
    FOR             reduce using rule 254 (iteration_statement -> while_statement .)
    BREAK           reduce using rule 254 (iteration_statement -> while_statement .)
    CONTINUE        reduce using rule 254 (iteration_statement -> while_statement .)
    GOTO            reduce using rule 254 (iteration_statement -> while_statement .)
    RETURN          reduce using rule 254 (iteration_statement -> while_statement .)
    NEW             reduce using rule 254 (iteration_statement -> while_statement .)
    INCREMENT       reduce using rule 254 (iteration_statement -> while_statement .)
    DECREMENT       reduce using rule 254 (iteration_statement -> while_statement .)
    PLUS            reduce using rule 254 (iteration_statement -> while_statement .)
    MINUS           reduce using rule 254 (iteration_statement -> while_statement .)
    LNOT            reduce using rule 254 (iteration_statement -> while_statement .)
    NOT             reduce using rule 254 (iteration_statement -> while_statement .)
    OBJECT          reduce using rule 254 (iteration_statement -> while_statement .)
    STRING          reduce using rule 254 (iteration_statement -> while_statement .)
    LPAREN          reduce using rule 254 (iteration_statement -> while_statement .)
    BOOL            reduce using rule 254 (iteration_statement -> while_statement .)
    INTCONST        reduce using rule 254 (iteration_statement -> while_statement .)
    STRCONST        reduce using rule 254 (iteration_statement -> while_statement .)
    CHCONST         reduce using rule 254 (iteration_statement -> while_statement .)
    IDENTIFIER      reduce using rule 254 (iteration_statement -> while_statement .)
    THIS            reduce using rule 254 (iteration_statement -> while_statement .)
    BASE            reduce using rule 254 (iteration_statement -> while_statement .)
    TYPEOF          reduce using rule 254 (iteration_statement -> while_statement .)
    DEFAULT         reduce using rule 254 (iteration_statement -> while_statement .)
    DELEGATE        reduce using rule 254 (iteration_statement -> while_statement .)
    DECIMAL         reduce using rule 254 (iteration_statement -> while_statement .)
    BYTE            reduce using rule 254 (iteration_statement -> while_statement .)
    CHAR            reduce using rule 254 (iteration_statement -> while_statement .)
    DOUBLE          reduce using rule 254 (iteration_statement -> while_statement .)
    FLOAT           reduce using rule 254 (iteration_statement -> while_statement .)
    INT             reduce using rule 254 (iteration_statement -> while_statement .)
    LONG            reduce using rule 254 (iteration_statement -> while_statement .)
    SBYTE           reduce using rule 254 (iteration_statement -> while_statement .)
    SHORT           reduce using rule 254 (iteration_statement -> while_statement .)
    UINT            reduce using rule 254 (iteration_statement -> while_statement .)
    ULONG           reduce using rule 254 (iteration_statement -> while_statement .)
    USHORT          reduce using rule 254 (iteration_statement -> while_statement .)
    RBRACE          reduce using rule 254 (iteration_statement -> while_statement .)
    ELSE            reduce using rule 254 (iteration_statement -> while_statement .)
    CASE            reduce using rule 254 (iteration_statement -> while_statement .)


state 258

    (266) jump_statement -> break_statement .

    CONST           reduce using rule 266 (jump_statement -> break_statement .)
    LBRACE          reduce using rule 266 (jump_statement -> break_statement .)
    STMT_TERMINATOR reduce using rule 266 (jump_statement -> break_statement .)
    IF              reduce using rule 266 (jump_statement -> break_statement .)
    SWITCH          reduce using rule 266 (jump_statement -> break_statement .)
    WHILE           reduce using rule 266 (jump_statement -> break_statement .)
    DO              reduce using rule 266 (jump_statement -> break_statement .)
    FOR             reduce using rule 266 (jump_statement -> break_statement .)
    BREAK           reduce using rule 266 (jump_statement -> break_statement .)
    CONTINUE        reduce using rule 266 (jump_statement -> break_statement .)
    GOTO            reduce using rule 266 (jump_statement -> break_statement .)
    RETURN          reduce using rule 266 (jump_statement -> break_statement .)
    NEW             reduce using rule 266 (jump_statement -> break_statement .)
    INCREMENT       reduce using rule 266 (jump_statement -> break_statement .)
    DECREMENT       reduce using rule 266 (jump_statement -> break_statement .)
    PLUS            reduce using rule 266 (jump_statement -> break_statement .)
    MINUS           reduce using rule 266 (jump_statement -> break_statement .)
    LNOT            reduce using rule 266 (jump_statement -> break_statement .)
    NOT             reduce using rule 266 (jump_statement -> break_statement .)
    OBJECT          reduce using rule 266 (jump_statement -> break_statement .)
    STRING          reduce using rule 266 (jump_statement -> break_statement .)
    LPAREN          reduce using rule 266 (jump_statement -> break_statement .)
    BOOL            reduce using rule 266 (jump_statement -> break_statement .)
    INTCONST        reduce using rule 266 (jump_statement -> break_statement .)
    STRCONST        reduce using rule 266 (jump_statement -> break_statement .)
    CHCONST         reduce using rule 266 (jump_statement -> break_statement .)
    IDENTIFIER      reduce using rule 266 (jump_statement -> break_statement .)
    THIS            reduce using rule 266 (jump_statement -> break_statement .)
    BASE            reduce using rule 266 (jump_statement -> break_statement .)
    TYPEOF          reduce using rule 266 (jump_statement -> break_statement .)
    DEFAULT         reduce using rule 266 (jump_statement -> break_statement .)
    DELEGATE        reduce using rule 266 (jump_statement -> break_statement .)
    DECIMAL         reduce using rule 266 (jump_statement -> break_statement .)
    BYTE            reduce using rule 266 (jump_statement -> break_statement .)
    CHAR            reduce using rule 266 (jump_statement -> break_statement .)
    DOUBLE          reduce using rule 266 (jump_statement -> break_statement .)
    FLOAT           reduce using rule 266 (jump_statement -> break_statement .)
    INT             reduce using rule 266 (jump_statement -> break_statement .)
    LONG            reduce using rule 266 (jump_statement -> break_statement .)
    SBYTE           reduce using rule 266 (jump_statement -> break_statement .)
    SHORT           reduce using rule 266 (jump_statement -> break_statement .)
    UINT            reduce using rule 266 (jump_statement -> break_statement .)
    ULONG           reduce using rule 266 (jump_statement -> break_statement .)
    USHORT          reduce using rule 266 (jump_statement -> break_statement .)
    RBRACE          reduce using rule 266 (jump_statement -> break_statement .)
    ELSE            reduce using rule 266 (jump_statement -> break_statement .)
    CASE            reduce using rule 266 (jump_statement -> break_statement .)


state 259

    (141) object_creation_expression -> NEW . type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> NEW . type object_or_collection_initializer
    (276) array_creation_expression -> NEW . non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> NEW . array_type array_initializer
    (278) array_creation_expression -> NEW . rank_specifier array_initializer
    (160) delegate_creation_expression -> NEW . delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> NEW . anonymous_object_initializer
    (7) type -> . value_type
    (8) type -> . reference_type
    (36) non_array_type -> . type
    (35) array_type -> . non_array_type rank_specifiers
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET
    (45) delegate_type -> . type_name
    (162) anonymous_object_initializer -> . LBRACE member_declarator_list_opt RBRACE
    (163) anonymous_object_initializer -> . LBRACE member_declarator_list COMMA RBRACE
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (12) type_name -> . namespace_or_type_name
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    LBRACKET        shift and go to state 111
    LBRACE          shift and go to state 413
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    IDENTIFIER      shift and go to state 9
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 409
    class_type                     shift and go to state 59
    numeric_type                   shift and go to state 38
    namespace_or_type_name         shift and go to state 56
    simple_type                    shift and go to state 40
    type                           shift and go to state 411
    rank_specifier                 shift and go to state 408
    non_array_type                 shift and go to state 406
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    anonymous_object_initializer   shift and go to state 412
    type_name                      shift and go to state 407
    delegate_type                  shift and go to state 410
    value_type                     shift and go to state 68

state 260

    (321) method_header -> return_type member_name LPAREN . formal_parameter_list_opt RPAREN
    (376) formal_parameter_list_opt -> . empty
    (377) formal_parameter_list_opt -> . formal_parameter_list
    (371) empty -> .
    (325) formal_parameter_list -> . fixed_parameters
    (326) formal_parameter_list -> . fixed_parameters COMMA parameter_array
    (327) formal_parameter_list -> . parameter_array
    (328) fixed_parameters -> . fixed_parameter
    (329) fixed_parameters -> . fixed_parameters COMMA fixed_parameter
    (332) parameter_array -> . PARAMS array_type IDENTIFIER
    (330) fixed_parameter -> . type IDENTIFIER default_argument_opt
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RPAREN          reduce using rule 371 (empty -> .)
    PARAMS          shift and go to state 54
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    parameter_array                shift and go to state 36
    formal_parameter_list_opt      shift and go to state 414
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    simple_type                    shift and go to state 40
    fixed_parameters               shift and go to state 41
    class_type                     shift and go to state 59
    formal_parameter_list          shift and go to state 44
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    type                           shift and go to state 57
    empty                          shift and go to state 60
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    fixed_parameter                shift and go to state 48
    type_name                      shift and go to state 50
    value_type                     shift and go to state 68

state 261

    (319) variable_declarator -> IDENTIFIER EQUALS . variable_initializer
    (203) variable_initializer -> . expression
    (204) variable_initializer -> . array_initializer
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 416
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 415
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    array_initializer              shift and go to state 417
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    variable_initializer           shift and go to state 418
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 262

    (317) variable_declarators -> variable_declarators COMMA . variable_declarator
    (318) variable_declarator -> . IDENTIFIER
    (319) variable_declarator -> . IDENTIFIER EQUALS variable_initializer

    IDENTIFIER      shift and go to state 134

    variable_declarator            shift and go to state 419

state 263

    (315) field_declaration -> type variable_declarators STMT_TERMINATOR .

    CONST           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    STATIC          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    CLASS           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    STRUCT          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    ENUM            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    DELEGATE        reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    LPAREN          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    VOID            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    EXTERN          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    LBRACE          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    OBJECT          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    STRING          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    BOOL            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    DECIMAL         reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    SBYTE           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    BYTE            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    SHORT           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    USHORT          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    INT             reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    UINT            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    LONG            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    ULONG           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    CHAR            reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    FLOAT           reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    DOUBLE          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    RBRACE          reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)
    NOT             reduce using rule 315 (field_declaration -> type variable_declarators STMT_TERMINATOR .)


state 264

    (208) constant_declarator -> IDENTIFIER . EQUALS constant_expression

    EQUALS          shift and go to state 420


state 265

    (206) constant_declarators -> constant_declarator .

    COMMA           reduce using rule 206 (constant_declarators -> constant_declarator .)
    STMT_TERMINATOR reduce using rule 206 (constant_declarators -> constant_declarator .)


state 266

    (314) constant_declaration -> CONST type constant_declarators . STMT_TERMINATOR
    (207) constant_declarators -> constant_declarators . COMMA constant_declarator

    STMT_TERMINATOR shift and go to state 421
    COMMA           shift and go to state 422


state 267

    (366) enum_member_declaration -> IDENTIFIER .
    (367) enum_member_declaration -> IDENTIFIER . EQUALS constant_expression

    COMMA           reduce using rule 366 (enum_member_declaration -> IDENTIFIER .)
    RBRACE          reduce using rule 366 (enum_member_declaration -> IDENTIFIER .)
    EQUALS          shift and go to state 423


state 268

    (364) enum_member_declarations -> enum_member_declaration .

    COMMA           reduce using rule 364 (enum_member_declarations -> enum_member_declaration .)
    RBRACE          reduce using rule 364 (enum_member_declarations -> enum_member_declaration .)


state 269

    (363) enum_body -> LBRACE enum_member_declarations . COMMA RBRACE
    (383) enum_member_declarations_opt -> enum_member_declarations .
    (365) enum_member_declarations -> enum_member_declarations . COMMA enum_member_declaration

    COMMA           shift and go to state 424
    RBRACE          reduce using rule 383 (enum_member_declarations_opt -> enum_member_declarations .)


state 270

    (362) enum_body -> LBRACE enum_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 425


state 271

    (382) enum_member_declarations_opt -> empty .

    RBRACE          reduce using rule 382 (enum_member_declarations_opt -> empty .)


state 272

    (360) enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .

    CONST           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    IDENTIFIER      reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    EXTERN          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    STATIC          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    CLASS           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    STRUCT          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    ENUM            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    DELEGATE        reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    LPAREN          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    VOID            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    LBRACE          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    OBJECT          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    STRING          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    BOOL            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    DECIMAL         reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    SBYTE           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    BYTE            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    SHORT           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    USHORT          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    INT             reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    UINT            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    LONG            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    ULONG           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    CHAR            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    FLOAT           reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    DOUBLE          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    NOT             reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    RBRACE          reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    NAMESPACE       reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)
    $end            reduce using rule 360 (enum_declaration -> ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt .)


state 273

    (280) lambda_expression -> anonymous_function_signature . LAMBDADEC anonymous_function_body

    LAMBDADEC       shift and go to state 426


state 274

    (49) expression -> non_assignment_expression .

    STMT_TERMINATOR reduce using rule 49 (expression -> non_assignment_expression .)
    RPAREN          reduce using rule 49 (expression -> non_assignment_expression .)
    COLON           reduce using rule 49 (expression -> non_assignment_expression .)
    COMMA           reduce using rule 49 (expression -> non_assignment_expression .)
    RBRACE          reduce using rule 49 (expression -> non_assignment_expression .)
    RBRACKET        reduce using rule 49 (expression -> non_assignment_expression .)


state 275

    (115) predefined_type -> BOOL .

    MEMBERACCESS    reduce using rule 115 (predefined_type -> BOOL .)


state 276

    (75) shift_expression -> additive_expression .
    (79) additive_expression -> additive_expression . PLUS multiplicative_expression
    (80) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 75 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 75 (shift_expression -> additive_expression .)
    LT              reduce using rule 75 (shift_expression -> additive_expression .)
    GT              reduce using rule 75 (shift_expression -> additive_expression .)
    LE              reduce using rule 75 (shift_expression -> additive_expression .)
    GE              reduce using rule 75 (shift_expression -> additive_expression .)
    IS              reduce using rule 75 (shift_expression -> additive_expression .)
    AS              reduce using rule 75 (shift_expression -> additive_expression .)
    EQ              reduce using rule 75 (shift_expression -> additive_expression .)
    NE              reduce using rule 75 (shift_expression -> additive_expression .)
    AND             reduce using rule 75 (shift_expression -> additive_expression .)
    XOR             reduce using rule 75 (shift_expression -> additive_expression .)
    OR              reduce using rule 75 (shift_expression -> additive_expression .)
    CAND            reduce using rule 75 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 75 (shift_expression -> additive_expression .)
    COR             reduce using rule 75 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 75 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 75 (shift_expression -> additive_expression .)
    STMT_TERMINATOR reduce using rule 75 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 75 (shift_expression -> additive_expression .)
    COLON           reduce using rule 75 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 75 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 428
    MINUS           shift and go to state 427


state 277

    (281) anonymous_function_signature -> explicit_anonymous_function_signature .

    LAMBDADEC       reduce using rule 281 (anonymous_function_signature -> explicit_anonymous_function_signature .)


state 278

    (287) implicit_anonymous_function_parameter -> IDENTIFIER .
    (111) simple_name -> IDENTIFIER .

  ! reduce/reduce conflict for LAMBDADEC resolved using rule 111 (simple_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 111 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQUALS          reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    OREQUAL         reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOREQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    LAMBDADEC       reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    MOD             reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    LE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    IS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQ              reduce using rule 111 (simple_name -> IDENTIFIER .)
    NE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 111 (simple_name -> IDENTIFIER .)
    CAND            reduce using rule 111 (simple_name -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 111 (simple_name -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 111 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    COLON           reduce using rule 111 (simple_name -> IDENTIFIER .)

  ! LAMBDADEC       [ reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .) ]


state 279

    (117) predefined_type -> CHAR .

    MEMBERACCESS    reduce using rule 117 (predefined_type -> CHAR .)


state 280

    (126) predefined_type -> STRING .

    MEMBERACCESS    reduce using rule 126 (predefined_type -> STRING .)


state 281

    (103) primary_no_array_creation_expression -> post_increment_expression .

    LBRACKET        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MEMBERACCESS    reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LPAREN          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    INCREMENT       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    DECREMENT       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    STMT_TERMINATOR reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    EQUALS          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    PLUSEQUAL       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MINUSEQUAL      reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    TIMESEQUAL      reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    DIVEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MODEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    ANDEQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    OREQUAL         reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    XOREQUAL        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LAMBDADEC       reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RSHIFTEQUAL     reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LSHIFTEQUAL     reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    TIMES           reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    DIVIDE          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MOD             reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    PLUS            reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    MINUS           reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LSHIFT          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RSHIFT          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LT              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    GT              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    LE              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    GE              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    IS              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    AS              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    EQ              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    NE              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    AND             reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    XOR             reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    OR              reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    CAND            reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    CONDOP          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    COR             reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    COMMA           reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RPAREN          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RBRACE          reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    COLON           reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)
    RBRACKET        reduce using rule 103 (primary_no_array_creation_expression -> post_increment_expression .)


state 282

    (331) default_argument -> EQUALS expression .

    COMMA           reduce using rule 331 (default_argument -> EQUALS expression .)
    RPAREN          reduce using rule 331 (default_argument -> EQUALS expression .)


state 283

    (121) predefined_type -> INT .

    MEMBERACCESS    reduce using rule 121 (predefined_type -> INT .)


state 284

    (65) equality_expression -> relational_expression .
    (69) relational_expression -> relational_expression . LT shift_expression
    (70) relational_expression -> relational_expression . GT shift_expression
    (71) relational_expression -> relational_expression . LE shift_expression
    (72) relational_expression -> relational_expression . GE shift_expression
    (73) relational_expression -> relational_expression . IS type
    (74) relational_expression -> relational_expression . AS type

    EQ              reduce using rule 65 (equality_expression -> relational_expression .)
    NE              reduce using rule 65 (equality_expression -> relational_expression .)
    AND             reduce using rule 65 (equality_expression -> relational_expression .)
    XOR             reduce using rule 65 (equality_expression -> relational_expression .)
    OR              reduce using rule 65 (equality_expression -> relational_expression .)
    CAND            reduce using rule 65 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 65 (equality_expression -> relational_expression .)
    COR             reduce using rule 65 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 65 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 65 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 65 (equality_expression -> relational_expression .)
    STMT_TERMINATOR reduce using rule 65 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 65 (equality_expression -> relational_expression .)
    COLON           reduce using rule 65 (equality_expression -> relational_expression .)
    LT              shift and go to state 430
    GT              shift and go to state 429
    LE              shift and go to state 434
    GE              shift and go to state 433
    IS              shift and go to state 431
    AS              shift and go to state 432


state 285

    (282) anonymous_function_signature -> implicit_anonymous_function_signature .

    LAMBDADEC       reduce using rule 282 (anonymous_function_signature -> implicit_anonymous_function_signature .)


state 286

    (122) predefined_type -> LONG .

    MEMBERACCESS    reduce using rule 122 (predefined_type -> LONG .)


state 287

    (50) expression -> assignment .

    STMT_TERMINATOR reduce using rule 50 (expression -> assignment .)
    RPAREN          reduce using rule 50 (expression -> assignment .)
    COLON           reduce using rule 50 (expression -> assignment .)
    COMMA           reduce using rule 50 (expression -> assignment .)
    RBRACE          reduce using rule 50 (expression -> assignment .)
    RBRACKET        reduce using rule 50 (expression -> assignment .)


state 288

    (123) predefined_type -> OBJECT .

    MEMBERACCESS    reduce using rule 123 (predefined_type -> OBJECT .)


state 289

    (99) primary_no_array_creation_expression -> invocation_expression .

    LBRACKET        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MEMBERACCESS    reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LPAREN          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    INCREMENT       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    DECREMENT       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    STMT_TERMINATOR reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    EQUALS          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    PLUSEQUAL       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MINUSEQUAL      reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    TIMESEQUAL      reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    DIVEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MODEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    ANDEQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    OREQUAL         reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    XOREQUAL        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LAMBDADEC       reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RSHIFTEQUAL     reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LSHIFTEQUAL     reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    TIMES           reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    DIVIDE          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MOD             reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    PLUS            reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    MINUS           reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LSHIFT          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RSHIFT          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LT              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    GT              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    LE              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    GE              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    IS              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    AS              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    EQ              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    NE              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    AND             reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    XOR             reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    OR              reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    CAND            reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    CONDOP          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    COR             reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    COMMA           reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RPAREN          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RBRACE          reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    COLON           reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)
    RBRACKET        reduce using rule 99 (primary_no_array_creation_expression -> invocation_expression .)


state 290

    (125) predefined_type -> SHORT .

    MEMBERACCESS    reduce using rule 125 (predefined_type -> SHORT .)


state 291

    (51) non_assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 51 (non_assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 51 (non_assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 51 (non_assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 51 (non_assignment_expression -> conditional_expression .)
    COLON           reduce using rule 51 (non_assignment_expression -> conditional_expression .)
    STMT_TERMINATOR reduce using rule 51 (non_assignment_expression -> conditional_expression .)


state 292

    (91) unary_expression -> pre_decrement_expression .

    STMT_TERMINATOR reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    EQUALS          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    PLUSEQUAL       reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MINUSEQUAL      reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    TIMESEQUAL      reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    DIVEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MODEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    ANDEQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    OREQUAL         reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    XOREQUAL        reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LAMBDADEC       reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RSHIFTEQUAL     reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LSHIFTEQUAL     reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    TIMES           reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    DIVIDE          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MOD             reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    PLUS            reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    MINUS           reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LSHIFT          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RSHIFT          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LT              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    GT              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    LE              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    GE              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    IS              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    AS              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    EQ              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    NE              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    AND             reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    XOR             reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    OR              reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    CAND            reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    CONDOP          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    COR             reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    COMMA           reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RBRACE          reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    COLON           reduce using rule 91 (unary_expression -> pre_decrement_expression .)
    RBRACKET        reduce using rule 91 (unary_expression -> pre_decrement_expression .)


state 293

    (116) predefined_type -> BYTE .

    MEMBERACCESS    reduce using rule 116 (predefined_type -> BYTE .)


state 294

    (118) predefined_type -> DECIMAL .

    MEMBERACCESS    reduce using rule 118 (predefined_type -> DECIMAL .)


state 295

    (129) predefined_type -> USHORT .

    MEMBERACCESS    reduce using rule 129 (predefined_type -> USHORT .)


state 296

    (52) non_assignment_expression -> lambda_expression .

    RPAREN          reduce using rule 52 (non_assignment_expression -> lambda_expression .)
    RBRACE          reduce using rule 52 (non_assignment_expression -> lambda_expression .)
    COMMA           reduce using rule 52 (non_assignment_expression -> lambda_expression .)
    RBRACKET        reduce using rule 52 (non_assignment_expression -> lambda_expression .)
    COLON           reduce using rule 52 (non_assignment_expression -> lambda_expression .)
    STMT_TERMINATOR reduce using rule 52 (non_assignment_expression -> lambda_expression .)


state 297

    (127) predefined_type -> UINT .

    MEMBERACCESS    reduce using rule 127 (predefined_type -> UINT .)


state 298

    (78) additive_expression -> multiplicative_expression .
    (82) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (83) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (84) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 78 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 78 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 78 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 78 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    IS              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    AS              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 78 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 78 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 78 (additive_expression -> multiplicative_expression .)
    CAND            reduce using rule 78 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 78 (additive_expression -> multiplicative_expression .)
    COR             reduce using rule 78 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 78 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 78 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 78 (additive_expression -> multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 78 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 78 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 78 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 436
    DIVIDE          shift and go to state 435
    MOD             shift and go to state 437


state 299

    (61) exclusive_or_expression -> and_expression .
    (64) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 61 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 61 (exclusive_or_expression -> and_expression .)
    CAND            reduce using rule 61 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 61 (exclusive_or_expression -> and_expression .)
    COR             reduce using rule 61 (exclusive_or_expression -> and_expression .)
    STMT_TERMINATOR reduce using rule 61 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 61 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 61 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 61 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 61 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 61 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 438


state 300

    (55) conditional_or_expression -> conditional_and_expression .
    (58) conditional_and_expression -> conditional_and_expression . CAND inclusive_or_expression

    CONDOP          reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    COR             reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    RBRACE          reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    COLON           reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    STMT_TERMINATOR reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    RBRACKET        reduce using rule 55 (conditional_or_expression -> conditional_and_expression .)
    CAND            shift and go to state 439


state 301

    (225) assignment -> unary_expression . assignment_operator expression
    (81) multiplicative_expression -> unary_expression .
    (226) assignment_operator -> . EQUALS
    (227) assignment_operator -> . PLUSEQUAL
    (228) assignment_operator -> . MINUSEQUAL
    (229) assignment_operator -> . TIMESEQUAL
    (230) assignment_operator -> . DIVEQUAL
    (231) assignment_operator -> . MODEQUAL
    (232) assignment_operator -> . ANDEQUAL
    (233) assignment_operator -> . OREQUAL
    (234) assignment_operator -> . XOREQUAL
    (235) assignment_operator -> . LAMBDADEC
    (236) assignment_operator -> . RSHIFTEQUAL
    (237) assignment_operator -> . LSHIFTEQUAL

    TIMES           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 81 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    IS              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    AS              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    CAND            reduce using rule 81 (multiplicative_expression -> unary_expression .)
    CONDOP          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COR             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    STMT_TERMINATOR reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 81 (multiplicative_expression -> unary_expression .)
    EQUALS          shift and go to state 362
    PLUSEQUAL       shift and go to state 365
    MINUSEQUAL      shift and go to state 364
    TIMESEQUAL      shift and go to state 358
    DIVEQUAL        shift and go to state 369
    MODEQUAL        shift and go to state 361
    ANDEQUAL        shift and go to state 367
    OREQUAL         shift and go to state 360
    XOREQUAL        shift and go to state 368
    LAMBDADEC       shift and go to state 370
    RSHIFTEQUAL     shift and go to state 366
    LSHIFTEQUAL     shift and go to state 359

    assignment_operator            shift and go to state 363

state 302

    (120) predefined_type -> FLOAT .

    MEMBERACCESS    reduce using rule 120 (predefined_type -> FLOAT .)


state 303

    (57) conditional_and_expression -> inclusive_or_expression .
    (60) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    CAND            reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    COR             reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 57 (conditional_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 440


state 304

    (279) cast_expression -> LPAREN . type RPAREN unary_expression
    (180) explicit_anonymous_function_signature -> LPAREN . explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> LPAREN . implicit_anonymous_function_parameter_list_opt RPAREN
    (112) parenthesized_expression -> LPAREN . expression RPAREN
    (7) type -> . value_type
    (8) type -> . reference_type
    (404) explicit_anonymous_function_parameter_list_opt -> . empty
    (405) explicit_anonymous_function_parameter_list_opt -> . explicit_anonymous_function_parameter_list
    (372) implicit_anonymous_function_parameter_list_opt -> . empty
    (373) implicit_anonymous_function_parameter_list_opt -> . implicit_anonymous_function_parameter_list
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (371) empty -> .
    (181) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter
    (182) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter
    (285) implicit_anonymous_function_parameter_list -> . implicit_anonymous_function_parameter
    (286) implicit_anonymous_function_parameter_list -> . implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (183) explicit_anonymous_function_parameter -> . type IDENTIFIER
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RPAREN          reduce using rule 371 (empty -> .)
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    IDENTIFIER      shift and go to state 442
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    BOOL            shift and go to state 168
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    DECIMAL         shift and go to state 249
    NEW             shift and go to state 317
    SBYTE           shift and go to state 379
    BYTE            shift and go to state 385
    SHORT           shift and go to state 386
    USHORT          shift and go to state 382
    INT             shift and go to state 381
    UINT            shift and go to state 387
    LONG            shift and go to state 383
    ULONG           shift and go to state 389
    CHAR            shift and go to state 378
    FLOAT           shift and go to state 388
    DOUBLE          shift and go to state 390
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253

    explicit_anonymous_function_parameter shift and go to state 441
    anonymous_object_creation_expression shift and go to state 220
    conditional_expression         shift and go to state 291
    non_assignment_expression      shift and go to state 274
    empty                          shift and go to state 444
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    implicit_anonymous_function_parameter shift and go to state 448
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    simple_type                    shift and go to state 40
    anonymous_function_signature   shift and go to state 273
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    struct_type                    shift and go to state 42
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    non_array_type                 shift and go to state 58
    explicit_anonymous_function_parameter_list shift and go to state 443
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 380
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    numeric_type                   shift and go to state 38
    type_name                      shift and go to state 50
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    array_type                     shift and go to state 53
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    exclusive_or_expression        shift and go to state 312
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    type                           shift and go to state 445
    explicit_anonymous_function_parameter_list_opt shift and go to state 446
    implicit_anonymous_function_parameter_list shift and go to state 447
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    explicit_anonymous_function_signature shift and go to state 277
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    value_type                     shift and go to state 68
    implicit_anonymous_function_parameter_list_opt shift and go to state 449
    floating_point_type            shift and go to state 70

state 305

    (128) predefined_type -> ULONG .

    MEMBERACCESS    reduce using rule 128 (predefined_type -> ULONG .)


state 306

    (63) and_expression -> equality_expression .
    (66) equality_expression -> equality_expression . EQ relational_expression
    (67) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 63 (and_expression -> equality_expression .)
    XOR             reduce using rule 63 (and_expression -> equality_expression .)
    OR              reduce using rule 63 (and_expression -> equality_expression .)
    CAND            reduce using rule 63 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 63 (and_expression -> equality_expression .)
    COR             reduce using rule 63 (and_expression -> equality_expression .)
    COMMA           reduce using rule 63 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 63 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 63 (and_expression -> equality_expression .)
    STMT_TERMINATOR reduce using rule 63 (and_expression -> equality_expression .)
    COLON           reduce using rule 63 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 63 (and_expression -> equality_expression .)
    EQ              shift and go to state 451
    NE              shift and go to state 450


state 307

    (85) unary_expression -> primary_expression .
    (113) member_access -> primary_expression . MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> primary_expression . LPAREN argument_list_opt RPAREN
    (139) post_increment_expression -> primary_expression . INCREMENT
    (140) post_decrement_expression -> primary_expression . DECREMENT

    STMT_TERMINATOR reduce using rule 85 (unary_expression -> primary_expression .)
    EQUALS          reduce using rule 85 (unary_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 85 (unary_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 85 (unary_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 85 (unary_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    MODEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    OREQUAL         reduce using rule 85 (unary_expression -> primary_expression .)
    XOREQUAL        reduce using rule 85 (unary_expression -> primary_expression .)
    LAMBDADEC       reduce using rule 85 (unary_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 85 (unary_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 85 (unary_expression -> primary_expression .)
    TIMES           reduce using rule 85 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 85 (unary_expression -> primary_expression .)
    MOD             reduce using rule 85 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 85 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 85 (unary_expression -> primary_expression .)
    LSHIFT          reduce using rule 85 (unary_expression -> primary_expression .)
    RSHIFT          reduce using rule 85 (unary_expression -> primary_expression .)
    LT              reduce using rule 85 (unary_expression -> primary_expression .)
    GT              reduce using rule 85 (unary_expression -> primary_expression .)
    LE              reduce using rule 85 (unary_expression -> primary_expression .)
    GE              reduce using rule 85 (unary_expression -> primary_expression .)
    IS              reduce using rule 85 (unary_expression -> primary_expression .)
    AS              reduce using rule 85 (unary_expression -> primary_expression .)
    EQ              reduce using rule 85 (unary_expression -> primary_expression .)
    NE              reduce using rule 85 (unary_expression -> primary_expression .)
    AND             reduce using rule 85 (unary_expression -> primary_expression .)
    XOR             reduce using rule 85 (unary_expression -> primary_expression .)
    OR              reduce using rule 85 (unary_expression -> primary_expression .)
    CAND            reduce using rule 85 (unary_expression -> primary_expression .)
    CONDOP          reduce using rule 85 (unary_expression -> primary_expression .)
    COR             reduce using rule 85 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 85 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 85 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 85 (unary_expression -> primary_expression .)
    COLON           reduce using rule 85 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 85 (unary_expression -> primary_expression .)
    MEMBERACCESS    shift and go to state 393
    LPAREN          shift and go to state 395
    INCREMENT       shift and go to state 394
    DECREMENT       shift and go to state 392


state 308

    (105) primary_no_array_creation_expression -> object_creation_expression .

    LBRACKET        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MEMBERACCESS    reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LPAREN          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    INCREMENT       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    DECREMENT       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    STMT_TERMINATOR reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    EQUALS          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    PLUSEQUAL       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MINUSEQUAL      reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    TIMESEQUAL      reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    DIVEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MODEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    ANDEQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    OREQUAL         reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    XOREQUAL        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LAMBDADEC       reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RSHIFTEQUAL     reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LSHIFTEQUAL     reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    TIMES           reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    DIVIDE          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MOD             reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    PLUS            reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    MINUS           reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LSHIFT          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RSHIFT          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LT              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    GT              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    LE              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    GE              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    IS              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    AS              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    EQ              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    NE              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    AND             reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    XOR             reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    OR              reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    CAND            reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    CONDOP          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    COR             reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    COMMA           reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RPAREN          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RBRACE          reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    COLON           reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)
    RBRACKET        reduce using rule 105 (primary_no_array_creation_expression -> object_creation_expression .)


state 309

    (68) relational_expression -> shift_expression .
    (76) shift_expression -> shift_expression . LSHIFT additive_expression
    (77) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 68 (relational_expression -> shift_expression .)
    GT              reduce using rule 68 (relational_expression -> shift_expression .)
    LE              reduce using rule 68 (relational_expression -> shift_expression .)
    GE              reduce using rule 68 (relational_expression -> shift_expression .)
    IS              reduce using rule 68 (relational_expression -> shift_expression .)
    AS              reduce using rule 68 (relational_expression -> shift_expression .)
    EQ              reduce using rule 68 (relational_expression -> shift_expression .)
    NE              reduce using rule 68 (relational_expression -> shift_expression .)
    AND             reduce using rule 68 (relational_expression -> shift_expression .)
    XOR             reduce using rule 68 (relational_expression -> shift_expression .)
    OR              reduce using rule 68 (relational_expression -> shift_expression .)
    CAND            reduce using rule 68 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 68 (relational_expression -> shift_expression .)
    COR             reduce using rule 68 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 68 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 68 (relational_expression -> shift_expression .)
    STMT_TERMINATOR reduce using rule 68 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 68 (relational_expression -> shift_expression .)
    COLON           reduce using rule 68 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 68 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 452
    RSHIFT          shift and go to state 453


state 310

    (90) unary_expression -> pre_increment_expression .

    STMT_TERMINATOR reduce using rule 90 (unary_expression -> pre_increment_expression .)
    EQUALS          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    PLUSEQUAL       reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MINUSEQUAL      reduce using rule 90 (unary_expression -> pre_increment_expression .)
    TIMESEQUAL      reduce using rule 90 (unary_expression -> pre_increment_expression .)
    DIVEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MODEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    ANDEQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    OREQUAL         reduce using rule 90 (unary_expression -> pre_increment_expression .)
    XOREQUAL        reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LAMBDADEC       reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RSHIFTEQUAL     reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LSHIFTEQUAL     reduce using rule 90 (unary_expression -> pre_increment_expression .)
    TIMES           reduce using rule 90 (unary_expression -> pre_increment_expression .)
    DIVIDE          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MOD             reduce using rule 90 (unary_expression -> pre_increment_expression .)
    PLUS            reduce using rule 90 (unary_expression -> pre_increment_expression .)
    MINUS           reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LSHIFT          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RSHIFT          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LT              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    GT              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    LE              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    GE              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    IS              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    AS              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    EQ              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    NE              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    AND             reduce using rule 90 (unary_expression -> pre_increment_expression .)
    XOR             reduce using rule 90 (unary_expression -> pre_increment_expression .)
    OR              reduce using rule 90 (unary_expression -> pre_increment_expression .)
    CAND            reduce using rule 90 (unary_expression -> pre_increment_expression .)
    CONDOP          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    COR             reduce using rule 90 (unary_expression -> pre_increment_expression .)
    COMMA           reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RBRACE          reduce using rule 90 (unary_expression -> pre_increment_expression .)
    COLON           reduce using rule 90 (unary_expression -> pre_increment_expression .)
    RBRACKET        reduce using rule 90 (unary_expression -> pre_increment_expression .)


state 311

    (124) predefined_type -> SBYTE .

    MEMBERACCESS    reduce using rule 124 (predefined_type -> SBYTE .)


state 312

    (59) inclusive_or_expression -> exclusive_or_expression .
    (62) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    CAND            reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    COR             reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 59 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 454


state 313

    (53) conditional_expression -> conditional_or_expression .
    (54) conditional_expression -> conditional_or_expression . CONDOP expression COLON expression
    (56) conditional_or_expression -> conditional_or_expression . COR conditional_and_expression

    RBRACKET        reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    COMMA           reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    RBRACE          reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    STMT_TERMINATOR reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    COLON           reduce using rule 53 (conditional_expression -> conditional_or_expression .)
    CONDOP          shift and go to state 456
    COR             shift and go to state 455


state 314

    (284) implicit_anonymous_function_signature -> implicit_anonymous_function_parameter .

    LAMBDADEC       reduce using rule 284 (implicit_anonymous_function_signature -> implicit_anonymous_function_parameter .)


state 315

    (119) predefined_type -> DOUBLE .

    MEMBERACCESS    reduce using rule 119 (predefined_type -> DOUBLE .)


state 316

    (104) primary_no_array_creation_expression -> post_decrement_expression .

    LBRACKET        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MEMBERACCESS    reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LPAREN          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    INCREMENT       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    DECREMENT       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    STMT_TERMINATOR reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    EQUALS          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    PLUSEQUAL       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MINUSEQUAL      reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    TIMESEQUAL      reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    DIVEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MODEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    ANDEQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    OREQUAL         reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    XOREQUAL        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LAMBDADEC       reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RSHIFTEQUAL     reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LSHIFTEQUAL     reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    TIMES           reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    DIVIDE          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MOD             reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    PLUS            reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    MINUS           reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LSHIFT          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RSHIFT          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LT              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    GT              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    LE              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    GE              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    IS              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    AS              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    EQ              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    NE              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    AND             reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    XOR             reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    OR              reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    CAND            reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    CONDOP          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    COR             reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    COMMA           reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RPAREN          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RBRACE          reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    COLON           reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)
    RBRACKET        reduce using rule 104 (primary_no_array_creation_expression -> post_decrement_expression .)


state 317

    (276) array_creation_expression -> NEW . non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> NEW . array_type array_initializer
    (278) array_creation_expression -> NEW . rank_specifier array_initializer
    (141) object_creation_expression -> NEW . type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> NEW . type object_or_collection_initializer
    (160) delegate_creation_expression -> NEW . delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> NEW . anonymous_object_initializer
    (36) non_array_type -> . type
    (35) array_type -> . non_array_type rank_specifiers
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET
    (7) type -> . value_type
    (8) type -> . reference_type
    (45) delegate_type -> . type_name
    (162) anonymous_object_initializer -> . LBRACE member_declarator_list_opt RBRACE
    (163) anonymous_object_initializer -> . LBRACE member_declarator_list COMMA RBRACE
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (12) type_name -> . namespace_or_type_name
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    LBRACKET        shift and go to state 111
    LBRACE          shift and go to state 413
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    IDENTIFIER      shift and go to state 9
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 409
    class_type                     shift and go to state 59
    numeric_type                   shift and go to state 38
    namespace_or_type_name         shift and go to state 56
    simple_type                    shift and go to state 40
    type                           shift and go to state 411
    rank_specifier                 shift and go to state 408
    non_array_type                 shift and go to state 406
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    anonymous_object_initializer   shift and go to state 412
    type_name                      shift and go to state 407
    delegate_type                  shift and go to state 410
    value_type                     shift and go to state 68

state 318

    (44) dim_separators -> dim_separators COMMA .

    COMMA           reduce using rule 44 (dim_separators -> dim_separators COMMA .)
    RBRACKET        reduce using rule 44 (dim_separators -> dim_separators COMMA .)


state 319

    (39) rank_specifier -> LBRACKET dim_separators_opt RBRACKET .

    LBRACE          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LBRACKET        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LPAREN          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    INCREMENT       reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DECREMENT       reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    MEMBERACCESS    reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    EQUALS          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    PLUSEQUAL       reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    MINUSEQUAL      reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    TIMESEQUAL      reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DIVEQUAL        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    MODEQUAL        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    ANDEQUAL        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    OREQUAL         reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    XOREQUAL        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LAMBDADEC       reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    RSHIFTEQUAL     reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LSHIFTEQUAL     reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    TIMES           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DIVIDE          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    MOD             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    PLUS            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    MINUS           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LSHIFT          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    RSHIFT          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LT              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    GT              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LE              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    GE              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    IS              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    AS              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    EQ              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    NE              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    AND             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    XOR             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    OR              reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    CAND            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    CONDOP          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    COR             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    COMMA           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    RPAREN          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    STMT_TERMINATOR reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    RBRACE          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    COLON           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    RBRACKET        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    IDENTIFIER      reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    NAMESPACE       reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    CLASS           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    STRUCT          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    ENUM            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DELEGATE        reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    $end            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    CONST           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    STATIC          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    VOID            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    EXTERN          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    OBJECT          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    STRING          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    BOOL            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DECIMAL         reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    SBYTE           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    BYTE            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    SHORT           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    USHORT          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    INT             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    UINT            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    LONG            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    ULONG           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    CHAR            reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    FLOAT           reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    DOUBLE          reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)
    NOT             reduce using rule 39 (rank_specifier -> LBRACKET dim_separators_opt RBRACKET .)


state 320

    (302) class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .

    NAMESPACE       reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    CLASS           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    STRUCT          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    ENUM            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    DELEGATE        reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    IDENTIFIER      reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    LPAREN          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    LBRACE          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    $end            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    RBRACE          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    CONST           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    STATIC          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    VOID            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    EXTERN          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    OBJECT          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    STRING          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    BOOL            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    DECIMAL         reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    SBYTE           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    BYTE            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    SHORT           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    USHORT          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    INT             reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    UINT            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    LONG            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    ULONG           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    CHAR            reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    FLOAT           reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    DOUBLE          reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)
    NOT             reduce using rule 302 (class_declaration -> CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt .)


state 321

    (311) class_member_declaration -> destructor_declaration .

    CONST           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    IDENTIFIER      reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    EXTERN          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    STATIC          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    CLASS           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    STRUCT          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    ENUM            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    DELEGATE        reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    LPAREN          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    VOID            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    LBRACE          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    OBJECT          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    STRING          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    BOOL            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    DECIMAL         reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    SBYTE           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    BYTE            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    SHORT           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    USHORT          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    INT             reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    UINT            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    LONG            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    ULONG           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    CHAR            reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    FLOAT           reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    DOUBLE          reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    NOT             reduce using rule 311 (class_member_declaration -> destructor_declaration .)
    RBRACE          reduce using rule 311 (class_member_declaration -> destructor_declaration .)


state 322

    (310) class_member_declaration -> constructor_declaration .

    CONST           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    IDENTIFIER      reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    EXTERN          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    CLASS           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    STRUCT          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    ENUM            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    DELEGATE        reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    LPAREN          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    VOID            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    LBRACE          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    OBJECT          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    STRING          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    BOOL            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    DECIMAL         reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    SBYTE           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    BYTE            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    SHORT           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    USHORT          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    INT             reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    UINT            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    LONG            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    ULONG           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    CHAR            reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    FLOAT           reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    DOUBLE          reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    NOT             reduce using rule 310 (class_member_declaration -> constructor_declaration .)
    RBRACE          reduce using rule 310 (class_member_declaration -> constructor_declaration .)


state 323

    (309) class_member_declaration -> method_declaration .

    CONST           reduce using rule 309 (class_member_declaration -> method_declaration .)
    IDENTIFIER      reduce using rule 309 (class_member_declaration -> method_declaration .)
    EXTERN          reduce using rule 309 (class_member_declaration -> method_declaration .)
    STATIC          reduce using rule 309 (class_member_declaration -> method_declaration .)
    CLASS           reduce using rule 309 (class_member_declaration -> method_declaration .)
    STRUCT          reduce using rule 309 (class_member_declaration -> method_declaration .)
    ENUM            reduce using rule 309 (class_member_declaration -> method_declaration .)
    DELEGATE        reduce using rule 309 (class_member_declaration -> method_declaration .)
    LPAREN          reduce using rule 309 (class_member_declaration -> method_declaration .)
    VOID            reduce using rule 309 (class_member_declaration -> method_declaration .)
    LBRACE          reduce using rule 309 (class_member_declaration -> method_declaration .)
    OBJECT          reduce using rule 309 (class_member_declaration -> method_declaration .)
    STRING          reduce using rule 309 (class_member_declaration -> method_declaration .)
    BOOL            reduce using rule 309 (class_member_declaration -> method_declaration .)
    DECIMAL         reduce using rule 309 (class_member_declaration -> method_declaration .)
    SBYTE           reduce using rule 309 (class_member_declaration -> method_declaration .)
    BYTE            reduce using rule 309 (class_member_declaration -> method_declaration .)
    SHORT           reduce using rule 309 (class_member_declaration -> method_declaration .)
    USHORT          reduce using rule 309 (class_member_declaration -> method_declaration .)
    INT             reduce using rule 309 (class_member_declaration -> method_declaration .)
    UINT            reduce using rule 309 (class_member_declaration -> method_declaration .)
    LONG            reduce using rule 309 (class_member_declaration -> method_declaration .)
    ULONG           reduce using rule 309 (class_member_declaration -> method_declaration .)
    CHAR            reduce using rule 309 (class_member_declaration -> method_declaration .)
    FLOAT           reduce using rule 309 (class_member_declaration -> method_declaration .)
    DOUBLE          reduce using rule 309 (class_member_declaration -> method_declaration .)
    NOT             reduce using rule 309 (class_member_declaration -> method_declaration .)
    RBRACE          reduce using rule 309 (class_member_declaration -> method_declaration .)


state 324

    (430) class_member_declarations_opt -> empty .
    (432) extern_opt -> empty .

    RBRACE          reduce using rule 430 (class_member_declarations_opt -> empty .)
    NOT             reduce using rule 432 (extern_opt -> empty .)
    STATIC          reduce using rule 432 (extern_opt -> empty .)


state 325

    (431) class_member_declarations_opt -> class_member_declarations .
    (306) class_member_declarations -> class_member_declarations . class_member_declaration
    (307) class_member_declaration -> . constant_declaration
    (308) class_member_declaration -> . field_declaration
    (309) class_member_declaration -> . method_declaration
    (310) class_member_declaration -> . constructor_declaration
    (311) class_member_declaration -> . destructor_declaration
    (312) class_member_declaration -> . static_constructor_declaration
    (313) class_member_declaration -> . type_declaration
    (314) constant_declaration -> . CONST type constant_declarators STMT_TERMINATOR
    (315) field_declaration -> . type variable_declarators STMT_TERMINATOR
    (320) method_declaration -> . method_header method_body
    (335) constructor_declaration -> . constructor_declarator constructor_body
    (341) destructor_declaration -> . extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body
    (344) static_constructor_declaration -> . static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body
    (298) type_declaration -> . class_declaration
    (299) type_declaration -> . struct_declaration
    (300) type_declaration -> . enum_declaration
    (301) type_declaration -> . delegate_declaration
    (7) type -> . value_type
    (8) type -> . reference_type
    (321) method_header -> . return_type member_name LPAREN formal_parameter_list_opt RPAREN
    (336) constructor_declarator -> . IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt
    (432) extern_opt -> . empty
    (433) extern_opt -> . EXTERN
    (345) static_constructor_modifiers -> . extern_opt STATIC
    (346) static_constructor_modifiers -> . STATIC extern_opt
    (302) class_declaration -> . CLASS IDENTIFIER class_base_opt class_body smt_terminator_opt
    (349) struct_declaration -> . STRUCT IDENTIFIER
    (350) struct_declaration -> . struct_body smt_terminator_opt
    (360) enum_declaration -> . ENUM IDENTIFIER enum_base_opt enum_body smt_terminator_opt
    (368) delegate_declaration -> . DELEGATE return_type
    (369) delegate_declaration -> . IDENTIFIER
    (370) delegate_declaration -> . LPAREN formal_parameter_list_opt RPAREN STMT_TERMINATOR
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (322) return_type -> . type
    (323) return_type -> . VOID
    (371) empty -> .
    (351) struct_body -> . LBRACE struct_member_declarations_opt RBRACE
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          reduce using rule 431 (class_member_declarations_opt -> class_member_declarations .)
    CONST           shift and go to state 93
    IDENTIFIER      shift and go to state 80
    EXTERN          shift and go to state 84
    STATIC          shift and go to state 79
    CLASS           shift and go to state 21
    STRUCT          shift and go to state 13
    ENUM            shift and go to state 15
    DELEGATE        shift and go to state 27
    LPAREN          shift and go to state 16
    VOID            shift and go to state 74
    NOT             reduce using rule 371 (empty -> .)
    LBRACE          shift and go to state 28
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

  ! STATIC          [ reduce using rule 371 (empty -> .) ]

    static_constructor_modifiers   shift and go to state 77
    destructor_declaration         shift and go to state 321
    constructor_declaration        shift and go to state 322
    simple_type                    shift and go to state 40
    method_declaration             shift and go to state 323
    integral_type                  shift and go to state 62
    delegate_declaration           shift and go to state 22
    enum_declaration               shift and go to state 18
    constructor_declarator         shift and go to state 82
    empty                          shift and go to state 122
    non_array_type                 shift and go to state 58
    struct_type                    shift and go to state 42
    floating_point_type            shift and go to state 70
    numeric_type                   shift and go to state 38
    class_member_declaration       shift and go to state 457
    type_name                      shift and go to state 50
    delegate_type                  shift and go to state 51
    field_declaration              shift and go to state 327
    method_header                  shift and go to state 85
    array_type                     shift and go to state 53
    constant_declaration           shift and go to state 328
    type_declaration               shift and go to state 329
    return_type                    shift and go to state 89
    class_declaration              shift and go to state 17
    namespace_or_type_name         shift and go to state 56
    struct_declaration             shift and go to state 19
    type                           shift and go to state 91
    class_type                     shift and go to state 59
    reference_type                 shift and go to state 61
    static_constructor_declaration shift and go to state 330
    extern_opt                     shift and go to state 331
    struct_body                    shift and go to state 29
    value_type                     shift and go to state 68

state 326

    (305) class_member_declarations -> class_member_declaration .

    CONST           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    IDENTIFIER      reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    EXTERN          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    STATIC          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    CLASS           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    STRUCT          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    ENUM            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    DELEGATE        reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    LPAREN          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    VOID            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    LBRACE          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    OBJECT          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    STRING          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    BOOL            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    DECIMAL         reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    SBYTE           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    BYTE            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    SHORT           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    USHORT          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    INT             reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    UINT            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    LONG            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    ULONG           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    CHAR            reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    FLOAT           reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    DOUBLE          reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    NOT             reduce using rule 305 (class_member_declarations -> class_member_declaration .)
    RBRACE          reduce using rule 305 (class_member_declarations -> class_member_declaration .)


state 327

    (308) class_member_declaration -> field_declaration .

    CONST           reduce using rule 308 (class_member_declaration -> field_declaration .)
    IDENTIFIER      reduce using rule 308 (class_member_declaration -> field_declaration .)
    EXTERN          reduce using rule 308 (class_member_declaration -> field_declaration .)
    STATIC          reduce using rule 308 (class_member_declaration -> field_declaration .)
    CLASS           reduce using rule 308 (class_member_declaration -> field_declaration .)
    STRUCT          reduce using rule 308 (class_member_declaration -> field_declaration .)
    ENUM            reduce using rule 308 (class_member_declaration -> field_declaration .)
    DELEGATE        reduce using rule 308 (class_member_declaration -> field_declaration .)
    LPAREN          reduce using rule 308 (class_member_declaration -> field_declaration .)
    VOID            reduce using rule 308 (class_member_declaration -> field_declaration .)
    LBRACE          reduce using rule 308 (class_member_declaration -> field_declaration .)
    OBJECT          reduce using rule 308 (class_member_declaration -> field_declaration .)
    STRING          reduce using rule 308 (class_member_declaration -> field_declaration .)
    BOOL            reduce using rule 308 (class_member_declaration -> field_declaration .)
    DECIMAL         reduce using rule 308 (class_member_declaration -> field_declaration .)
    SBYTE           reduce using rule 308 (class_member_declaration -> field_declaration .)
    BYTE            reduce using rule 308 (class_member_declaration -> field_declaration .)
    SHORT           reduce using rule 308 (class_member_declaration -> field_declaration .)
    USHORT          reduce using rule 308 (class_member_declaration -> field_declaration .)
    INT             reduce using rule 308 (class_member_declaration -> field_declaration .)
    UINT            reduce using rule 308 (class_member_declaration -> field_declaration .)
    LONG            reduce using rule 308 (class_member_declaration -> field_declaration .)
    ULONG           reduce using rule 308 (class_member_declaration -> field_declaration .)
    CHAR            reduce using rule 308 (class_member_declaration -> field_declaration .)
    FLOAT           reduce using rule 308 (class_member_declaration -> field_declaration .)
    DOUBLE          reduce using rule 308 (class_member_declaration -> field_declaration .)
    NOT             reduce using rule 308 (class_member_declaration -> field_declaration .)
    RBRACE          reduce using rule 308 (class_member_declaration -> field_declaration .)


state 328

    (307) class_member_declaration -> constant_declaration .

    CONST           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    IDENTIFIER      reduce using rule 307 (class_member_declaration -> constant_declaration .)
    EXTERN          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    STATIC          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    CLASS           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    STRUCT          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    ENUM            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    DELEGATE        reduce using rule 307 (class_member_declaration -> constant_declaration .)
    LPAREN          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    VOID            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    LBRACE          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    OBJECT          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    STRING          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    BOOL            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    DECIMAL         reduce using rule 307 (class_member_declaration -> constant_declaration .)
    SBYTE           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    BYTE            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    SHORT           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    USHORT          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    INT             reduce using rule 307 (class_member_declaration -> constant_declaration .)
    UINT            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    LONG            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    ULONG           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    CHAR            reduce using rule 307 (class_member_declaration -> constant_declaration .)
    FLOAT           reduce using rule 307 (class_member_declaration -> constant_declaration .)
    DOUBLE          reduce using rule 307 (class_member_declaration -> constant_declaration .)
    NOT             reduce using rule 307 (class_member_declaration -> constant_declaration .)
    RBRACE          reduce using rule 307 (class_member_declaration -> constant_declaration .)


state 329

    (313) class_member_declaration -> type_declaration .

    CONST           reduce using rule 313 (class_member_declaration -> type_declaration .)
    IDENTIFIER      reduce using rule 313 (class_member_declaration -> type_declaration .)
    EXTERN          reduce using rule 313 (class_member_declaration -> type_declaration .)
    STATIC          reduce using rule 313 (class_member_declaration -> type_declaration .)
    CLASS           reduce using rule 313 (class_member_declaration -> type_declaration .)
    STRUCT          reduce using rule 313 (class_member_declaration -> type_declaration .)
    ENUM            reduce using rule 313 (class_member_declaration -> type_declaration .)
    DELEGATE        reduce using rule 313 (class_member_declaration -> type_declaration .)
    LPAREN          reduce using rule 313 (class_member_declaration -> type_declaration .)
    VOID            reduce using rule 313 (class_member_declaration -> type_declaration .)
    LBRACE          reduce using rule 313 (class_member_declaration -> type_declaration .)
    OBJECT          reduce using rule 313 (class_member_declaration -> type_declaration .)
    STRING          reduce using rule 313 (class_member_declaration -> type_declaration .)
    BOOL            reduce using rule 313 (class_member_declaration -> type_declaration .)
    DECIMAL         reduce using rule 313 (class_member_declaration -> type_declaration .)
    SBYTE           reduce using rule 313 (class_member_declaration -> type_declaration .)
    BYTE            reduce using rule 313 (class_member_declaration -> type_declaration .)
    SHORT           reduce using rule 313 (class_member_declaration -> type_declaration .)
    USHORT          reduce using rule 313 (class_member_declaration -> type_declaration .)
    INT             reduce using rule 313 (class_member_declaration -> type_declaration .)
    UINT            reduce using rule 313 (class_member_declaration -> type_declaration .)
    LONG            reduce using rule 313 (class_member_declaration -> type_declaration .)
    ULONG           reduce using rule 313 (class_member_declaration -> type_declaration .)
    CHAR            reduce using rule 313 (class_member_declaration -> type_declaration .)
    FLOAT           reduce using rule 313 (class_member_declaration -> type_declaration .)
    DOUBLE          reduce using rule 313 (class_member_declaration -> type_declaration .)
    NOT             reduce using rule 313 (class_member_declaration -> type_declaration .)
    RBRACE          reduce using rule 313 (class_member_declaration -> type_declaration .)


state 330

    (312) class_member_declaration -> static_constructor_declaration .

    CONST           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    IDENTIFIER      reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    EXTERN          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    STATIC          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    CLASS           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    STRUCT          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    ENUM            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    DELEGATE        reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    LPAREN          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    VOID            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    LBRACE          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    OBJECT          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    STRING          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    BOOL            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    DECIMAL         reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    SBYTE           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    BYTE            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    SHORT           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    USHORT          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    INT             reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    UINT            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    LONG            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    ULONG           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    CHAR            reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    FLOAT           reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    DOUBLE          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    NOT             reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)
    RBRACE          reduce using rule 312 (class_member_declaration -> static_constructor_declaration .)


state 331

    (341) destructor_declaration -> extern_opt . NOT IDENTIFIER LPAREN RPAREN destructor_body
    (345) static_constructor_modifiers -> extern_opt . STATIC

    NOT             shift and go to state 458
    STATIC          shift and go to state 139


state 332

    (304) class_body -> LBRACE class_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 459


state 333

    (297) namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 460


state 334

    (344) static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN . static_constructor_body
    (347) static_constructor_body -> . block
    (348) static_constructor_body -> . STMT_TERMINATOR
    (184) block -> . LBRACE statement_list_opt RBRACE

    STMT_TERMINATOR shift and go to state 461
    LBRACE          shift and go to state 126

    static_constructor_body        shift and go to state 463
    block                          shift and go to state 462

state 335

    (336) constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN . constructor_initializer_opt
    (422) constructor_initializer_opt -> . empty
    (423) constructor_initializer_opt -> . constructor_initializer
    (371) empty -> .
    (337) constructor_initializer -> . COLON BASE LPAREN argument_list_opt RPAREN
    (338) constructor_initializer -> . COLON THIS LPAREN argument_list_opt RPAREN

    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    LBRACE          reduce using rule 371 (empty -> .)
    COLON           shift and go to state 467

    constructor_initializer        shift and go to state 464
    constructor_initializer_opt    shift and go to state 465
    empty                          shift and go to state 466

state 336

    (259) for_statement -> FOR LPAREN . for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (384) for_initializer_opt -> . empty
    (385) for_initializer_opt -> . for_initializer
    (371) empty -> .
    (260) for_initializer -> . local_variable_declaration
    (261) for_initializer -> . statement_expression_list
    (191) local_variable_declaration -> . local_variable_type local_variable_declarators
    (262) statement_expression_list -> . statement_expression
    (263) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (192) local_variable_type -> . type
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (7) type -> . value_type
    (8) type -> . reference_type
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    LPAREN          shift and go to state 236
    BOOL            shift and go to state 168
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 171
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    DECIMAL         shift and go to state 249
    BYTE            shift and go to state 211
    CHAR            shift and go to state 166
    DOUBLE          shift and go to state 254
    FLOAT           shift and go to state 230
    INT             shift and go to state 190
    LONG            shift and go to state 196
    SBYTE           shift and go to state 181
    SHORT           shift and go to state 207
    UINT            shift and go to state 225
    ULONG           shift and go to state 237
    USHORT          shift and go to state 187

    anonymous_object_creation_expression shift and go to state 220
    statement_expression_list      shift and go to state 471
    empty                          shift and go to state 468
    member_access                  shift and go to state 169
    simple_type                    shift and go to state 40
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    numeric_type                   shift and go to state 38
    struct_type                    shift and go to state 42
    unary_expression               shift and go to state 229
    non_array_type                 shift and go to state 58
    post_increment_expression      shift and go to state 182
    local_variable_type            shift and go to state 231
    local_variable_declaration     shift and go to state 472
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    for_initializer_opt            shift and go to state 469
    type_name                      shift and go to state 50
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    array_type                     shift and go to state 53
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    type                           shift and go to state 199
    for_initializer                shift and go to state 470
    primary_no_array_creation_expression shift and go to state 250
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    statement_expression           shift and go to state 473
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    floating_point_type            shift and go to state 70
    post_decrement_expression      shift and go to state 255
    this_access                    shift and go to state 251
    value_type                     shift and go to state 68

state 337

    (186) statement_list -> statement_list statement .

    CONST           reduce using rule 186 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 186 (statement_list -> statement_list statement .)
    STMT_TERMINATOR reduce using rule 186 (statement_list -> statement_list statement .)
    IF              reduce using rule 186 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 186 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 186 (statement_list -> statement_list statement .)
    DO              reduce using rule 186 (statement_list -> statement_list statement .)
    FOR             reduce using rule 186 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 186 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 186 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 186 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 186 (statement_list -> statement_list statement .)
    NEW             reduce using rule 186 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 186 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 186 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 186 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 186 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 186 (statement_list -> statement_list statement .)
    NOT             reduce using rule 186 (statement_list -> statement_list statement .)
    OBJECT          reduce using rule 186 (statement_list -> statement_list statement .)
    STRING          reduce using rule 186 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 186 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 186 (statement_list -> statement_list statement .)
    INTCONST        reduce using rule 186 (statement_list -> statement_list statement .)
    STRCONST        reduce using rule 186 (statement_list -> statement_list statement .)
    CHCONST         reduce using rule 186 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 186 (statement_list -> statement_list statement .)
    THIS            reduce using rule 186 (statement_list -> statement_list statement .)
    BASE            reduce using rule 186 (statement_list -> statement_list statement .)
    TYPEOF          reduce using rule 186 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 186 (statement_list -> statement_list statement .)
    DELEGATE        reduce using rule 186 (statement_list -> statement_list statement .)
    DECIMAL         reduce using rule 186 (statement_list -> statement_list statement .)
    BYTE            reduce using rule 186 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 186 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 186 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 186 (statement_list -> statement_list statement .)
    INT             reduce using rule 186 (statement_list -> statement_list statement .)
    LONG            reduce using rule 186 (statement_list -> statement_list statement .)
    SBYTE           reduce using rule 186 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 186 (statement_list -> statement_list statement .)
    UINT            reduce using rule 186 (statement_list -> statement_list statement .)
    ULONG           reduce using rule 186 (statement_list -> statement_list statement .)
    USHORT          reduce using rule 186 (statement_list -> statement_list statement .)
    CASE            reduce using rule 186 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 186 (statement_list -> statement_list statement .)


state 338

    (189) declaration_statement -> local_variable_declaration STMT_TERMINATOR .

    CONST           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LBRACE          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    IF              reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    SWITCH          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    WHILE           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DO              reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    FOR             reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    BREAK           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CONTINUE        reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    GOTO            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    RETURN          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    NEW             reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INCREMENT       reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DECREMENT       reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    PLUS            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    MINUS           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LNOT            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    NOT             reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    OBJECT          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    STRING          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LPAREN          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    BOOL            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INTCONST        reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    STRCONST        reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CHCONST         reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    THIS            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    BASE            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    TYPEOF          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DEFAULT         reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DELEGATE        reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DECIMAL         reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    BYTE            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CHAR            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    DOUBLE          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    FLOAT           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    INT             reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    LONG            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    SBYTE           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    SHORT           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    UINT            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    ULONG           reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    USHORT          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    RBRACE          reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)
    CASE            reduce using rule 189 (declaration_statement -> local_variable_declaration STMT_TERMINATOR .)


state 339

    (138) base_access -> BASE LBRACKET . argument_list RBRACKET
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (371) empty -> .
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list                  shift and go to state 474
    argument_name                  shift and go to state 475
    empty                          shift and go to state 476
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 340

    (137) base_access -> BASE MEMBERACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 480


state 341

    (257) while_statement -> WHILE LPAREN . boolean_expression RPAREN embedded_statement
    (244) boolean_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 481
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    boolean_expression             shift and go to state 482
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 342

    (190) declaration_statement -> local_constant_declaration STMT_TERMINATOR .

    CONST           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    LBRACE          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    IF              reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    SWITCH          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    WHILE           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DO              reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    FOR             reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    BREAK           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    CONTINUE        reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    GOTO            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    RETURN          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    NEW             reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    INCREMENT       reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DECREMENT       reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    PLUS            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    MINUS           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    LNOT            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    NOT             reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    OBJECT          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    STRING          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    LPAREN          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    BOOL            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    INTCONST        reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    STRCONST        reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    CHCONST         reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    THIS            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    BASE            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    TYPEOF          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DEFAULT         reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DELEGATE        reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DECIMAL         reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    BYTE            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    CHAR            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    DOUBLE          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    FLOAT           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    INT             reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    LONG            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    SBYTE           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    SHORT           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    UINT            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    ULONG           reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    USHORT          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    RBRACE          reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)
    CASE            reduce using rule 190 (declaration_statement -> local_constant_declaration STMT_TERMINATOR .)


state 343

    (271) continue_statement -> CONTINUE STMT_TERMINATOR .

    CONST           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    LBRACE          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    IF              reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    SWITCH          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    WHILE           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DO              reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    FOR             reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    BREAK           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    CONTINUE        reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    GOTO            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    RETURN          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    NEW             reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    INCREMENT       reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DECREMENT       reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    PLUS            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    MINUS           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    LNOT            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    NOT             reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    OBJECT          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    STRING          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    LPAREN          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    BOOL            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    INTCONST        reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    STRCONST        reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    CHCONST         reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    THIS            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    BASE            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    TYPEOF          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DEFAULT         reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DELEGATE        reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DECIMAL         reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    BYTE            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    CHAR            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    DOUBLE          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    FLOAT           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    INT             reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    LONG            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    SBYTE           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    SHORT           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    UINT            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    ULONG           reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    USHORT          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    RBRACE          reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    ELSE            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)
    CASE            reduce using rule 271 (continue_statement -> CONTINUE STMT_TERMINATOR .)


state 344

    (205) local_constant_declaration -> CONST type . constant_declarators
    (36) non_array_type -> type .
    (206) constant_declarators -> . constant_declarator
    (207) constant_declarators -> . constant_declarators COMMA constant_declarator
    (208) constant_declarator -> . IDENTIFIER EQUALS constant_expression

    LBRACKET        reduce using rule 36 (non_array_type -> type .)
    IDENTIFIER      shift and go to state 264

    constant_declarators           shift and go to state 483
    constant_declarator            shift and go to state 265

state 345

    (111) simple_name -> IDENTIFIER .

    LBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 111 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    MOD             reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    LE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    IS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQ              reduce using rule 111 (simple_name -> IDENTIFIER .)
    NE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 111 (simple_name -> IDENTIFIER .)
    CAND            reduce using rule 111 (simple_name -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 111 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COLON           reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQUALS          reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    OREQUAL         reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOREQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    LAMBDADEC       reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)


state 346

    (238) pre_increment_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    TIMESEQUAL      reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    DIVEQUAL        reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    MODEQUAL        reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    ANDEQUAL        reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    OREQUAL         reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    XOREQUAL        reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    LAMBDADEC       reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    TIMES           reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    IS              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    AS              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    XOR             reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    CAND            reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    CONDOP          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    COR             reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    STMT_TERMINATOR reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 238 (pre_increment_expression -> INCREMENT unary_expression .)


state 347

    (169) typeof_expression -> TYPEOF LPAREN . type RPAREN
    (170) typeof_expression -> TYPEOF LPAREN . unbound_type_name RPAREN
    (171) typeof_expression -> TYPEOF LPAREN . VOID RPAREN
    (7) type -> . value_type
    (8) type -> . reference_type
    (172) unbound_type_name -> . IDENTIFIER generic_dimension_specifier_opt
    (173) unbound_type_name -> . IDENTIFIER DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt
    (174) unbound_type_name -> . unbound_type_name MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    VOID            shift and go to state 484
    IDENTIFIER      shift and go to state 486
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 485
    floating_point_type            shift and go to state 70
    unbound_type_name              shift and go to state 487
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 348

    (114) member_access -> predefined_type MEMBERACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 488


state 349

    (414) expression_opt -> empty .

    STMT_TERMINATOR reduce using rule 414 (expression_opt -> empty .)


state 350

    (415) expression_opt -> expression .

    STMT_TERMINATOR reduce using rule 415 (expression_opt -> expression .)


state 351

    (275) return_statement -> RETURN expression_opt . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 489


state 352

    (245) switch_statement -> SWITCH LPAREN . expression RPAREN switch_block
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 490
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 353

    (242) if_statement -> IF LPAREN . boolean_expression RPAREN embedded_statement
    (243) if_statement -> IF LPAREN . boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (244) boolean_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 481
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    boolean_expression             shift and go to state 491
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 354

    (239) pre_decrement_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    TIMESEQUAL      reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    DIVEQUAL        reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    MODEQUAL        reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    ANDEQUAL        reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    OREQUAL         reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    XOREQUAL        reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    LAMBDADEC       reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    TIMES           reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    IS              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    AS              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    XOR             reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    CAND            reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    CONDOP          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    COR             reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    STMT_TERMINATOR reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 239 (pre_decrement_expression -> DECREMENT unary_expression .)


state 355

    (87) unary_expression -> MINUS unary_expression .

    EQUALS          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    PLUSEQUAL       reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    MINUSEQUAL      reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    TIMESEQUAL      reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    DIVEQUAL        reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    MODEQUAL        reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    ANDEQUAL        reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    OREQUAL         reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    XOREQUAL        reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    LAMBDADEC       reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    STMT_TERMINATOR reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    TIMES           reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    IS              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    AS              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    CAND            reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    CONDOP          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    COR             reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 87 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 87 (unary_expression -> MINUS unary_expression .)


state 356

    (89) unary_expression -> NOT unary_expression .

    EQUALS          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    PLUSEQUAL       reduce using rule 89 (unary_expression -> NOT unary_expression .)
    MINUSEQUAL      reduce using rule 89 (unary_expression -> NOT unary_expression .)
    TIMESEQUAL      reduce using rule 89 (unary_expression -> NOT unary_expression .)
    DIVEQUAL        reduce using rule 89 (unary_expression -> NOT unary_expression .)
    MODEQUAL        reduce using rule 89 (unary_expression -> NOT unary_expression .)
    ANDEQUAL        reduce using rule 89 (unary_expression -> NOT unary_expression .)
    OREQUAL         reduce using rule 89 (unary_expression -> NOT unary_expression .)
    XOREQUAL        reduce using rule 89 (unary_expression -> NOT unary_expression .)
    LAMBDADEC       reduce using rule 89 (unary_expression -> NOT unary_expression .)
    RSHIFTEQUAL     reduce using rule 89 (unary_expression -> NOT unary_expression .)
    LSHIFTEQUAL     reduce using rule 89 (unary_expression -> NOT unary_expression .)
    STMT_TERMINATOR reduce using rule 89 (unary_expression -> NOT unary_expression .)
    TIMES           reduce using rule 89 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 89 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 89 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 89 (unary_expression -> NOT unary_expression .)
    LSHIFT          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    RSHIFT          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    LT              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    GT              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    LE              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    GE              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    IS              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    AS              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    EQ              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    NE              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 89 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 89 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 89 (unary_expression -> NOT unary_expression .)
    CAND            reduce using rule 89 (unary_expression -> NOT unary_expression .)
    CONDOP          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    COR             reduce using rule 89 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 89 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    RBRACE          reduce using rule 89 (unary_expression -> NOT unary_expression .)
    COLON           reduce using rule 89 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 89 (unary_expression -> NOT unary_expression .)


state 357

    (86) unary_expression -> PLUS unary_expression .

    EQUALS          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    PLUSEQUAL       reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    MINUSEQUAL      reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    TIMESEQUAL      reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    DIVEQUAL        reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    MODEQUAL        reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    ANDEQUAL        reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    OREQUAL         reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    XOREQUAL        reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    LAMBDADEC       reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    STMT_TERMINATOR reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    TIMES           reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    LT              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    GT              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    LE              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    GE              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    IS              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    AS              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    EQ              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    NE              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    CAND            reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    CONDOP          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    COR             reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    COLON           reduce using rule 86 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 86 (unary_expression -> PLUS unary_expression .)


state 358

    (229) assignment_operator -> TIMESEQUAL .

    PLUS            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    INCREMENT       reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    DECREMENT       reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    NEW             reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    IDENTIFIER      reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    INTCONST        reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    STRCONST        reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    CHCONST         reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    THIS            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    BASE            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    TYPEOF          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    DEFAULT         reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    DELEGATE        reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    BOOL            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    BYTE            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    CHAR            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    DECIMAL         reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    DOUBLE          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    FLOAT           reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    INT             reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    LONG            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    OBJECT          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    SBYTE           reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    SHORT           reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    STRING          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    UINT            reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    ULONG           reduce using rule 229 (assignment_operator -> TIMESEQUAL .)
    USHORT          reduce using rule 229 (assignment_operator -> TIMESEQUAL .)


state 359

    (237) assignment_operator -> LSHIFTEQUAL .

    PLUS            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    INCREMENT       reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    DECREMENT       reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    INTCONST        reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    STRCONST        reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    CHCONST         reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    THIS            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    BASE            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    TYPEOF          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    DEFAULT         reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    DELEGATE        reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    BOOL            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    BYTE            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    CHAR            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    DECIMAL         reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    DOUBLE          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT           reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    INT             reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    LONG            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    OBJECT          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    SBYTE           reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    SHORT           reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    STRING          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    UINT            reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    ULONG           reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)
    USHORT          reduce using rule 237 (assignment_operator -> LSHIFTEQUAL .)


state 360

    (233) assignment_operator -> OREQUAL .

    PLUS            reduce using rule 233 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 233 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 233 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 233 (assignment_operator -> OREQUAL .)
    INCREMENT       reduce using rule 233 (assignment_operator -> OREQUAL .)
    DECREMENT       reduce using rule 233 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 233 (assignment_operator -> OREQUAL .)
    NEW             reduce using rule 233 (assignment_operator -> OREQUAL .)
    IDENTIFIER      reduce using rule 233 (assignment_operator -> OREQUAL .)
    INTCONST        reduce using rule 233 (assignment_operator -> OREQUAL .)
    STRCONST        reduce using rule 233 (assignment_operator -> OREQUAL .)
    CHCONST         reduce using rule 233 (assignment_operator -> OREQUAL .)
    THIS            reduce using rule 233 (assignment_operator -> OREQUAL .)
    BASE            reduce using rule 233 (assignment_operator -> OREQUAL .)
    TYPEOF          reduce using rule 233 (assignment_operator -> OREQUAL .)
    DEFAULT         reduce using rule 233 (assignment_operator -> OREQUAL .)
    DELEGATE        reduce using rule 233 (assignment_operator -> OREQUAL .)
    BOOL            reduce using rule 233 (assignment_operator -> OREQUAL .)
    BYTE            reduce using rule 233 (assignment_operator -> OREQUAL .)
    CHAR            reduce using rule 233 (assignment_operator -> OREQUAL .)
    DECIMAL         reduce using rule 233 (assignment_operator -> OREQUAL .)
    DOUBLE          reduce using rule 233 (assignment_operator -> OREQUAL .)
    FLOAT           reduce using rule 233 (assignment_operator -> OREQUAL .)
    INT             reduce using rule 233 (assignment_operator -> OREQUAL .)
    LONG            reduce using rule 233 (assignment_operator -> OREQUAL .)
    OBJECT          reduce using rule 233 (assignment_operator -> OREQUAL .)
    SBYTE           reduce using rule 233 (assignment_operator -> OREQUAL .)
    SHORT           reduce using rule 233 (assignment_operator -> OREQUAL .)
    STRING          reduce using rule 233 (assignment_operator -> OREQUAL .)
    UINT            reduce using rule 233 (assignment_operator -> OREQUAL .)
    ULONG           reduce using rule 233 (assignment_operator -> OREQUAL .)
    USHORT          reduce using rule 233 (assignment_operator -> OREQUAL .)


state 361

    (231) assignment_operator -> MODEQUAL .

    PLUS            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 231 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 231 (assignment_operator -> MODEQUAL .)
    INCREMENT       reduce using rule 231 (assignment_operator -> MODEQUAL .)
    DECREMENT       reduce using rule 231 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 231 (assignment_operator -> MODEQUAL .)
    NEW             reduce using rule 231 (assignment_operator -> MODEQUAL .)
    IDENTIFIER      reduce using rule 231 (assignment_operator -> MODEQUAL .)
    INTCONST        reduce using rule 231 (assignment_operator -> MODEQUAL .)
    STRCONST        reduce using rule 231 (assignment_operator -> MODEQUAL .)
    CHCONST         reduce using rule 231 (assignment_operator -> MODEQUAL .)
    THIS            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    BASE            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    TYPEOF          reduce using rule 231 (assignment_operator -> MODEQUAL .)
    DEFAULT         reduce using rule 231 (assignment_operator -> MODEQUAL .)
    DELEGATE        reduce using rule 231 (assignment_operator -> MODEQUAL .)
    BOOL            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    BYTE            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    CHAR            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    DECIMAL         reduce using rule 231 (assignment_operator -> MODEQUAL .)
    DOUBLE          reduce using rule 231 (assignment_operator -> MODEQUAL .)
    FLOAT           reduce using rule 231 (assignment_operator -> MODEQUAL .)
    INT             reduce using rule 231 (assignment_operator -> MODEQUAL .)
    LONG            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    OBJECT          reduce using rule 231 (assignment_operator -> MODEQUAL .)
    SBYTE           reduce using rule 231 (assignment_operator -> MODEQUAL .)
    SHORT           reduce using rule 231 (assignment_operator -> MODEQUAL .)
    STRING          reduce using rule 231 (assignment_operator -> MODEQUAL .)
    UINT            reduce using rule 231 (assignment_operator -> MODEQUAL .)
    ULONG           reduce using rule 231 (assignment_operator -> MODEQUAL .)
    USHORT          reduce using rule 231 (assignment_operator -> MODEQUAL .)


state 362

    (226) assignment_operator -> EQUALS .

    PLUS            reduce using rule 226 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 226 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 226 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 226 (assignment_operator -> EQUALS .)
    INCREMENT       reduce using rule 226 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 226 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 226 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 226 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 226 (assignment_operator -> EQUALS .)
    INTCONST        reduce using rule 226 (assignment_operator -> EQUALS .)
    STRCONST        reduce using rule 226 (assignment_operator -> EQUALS .)
    CHCONST         reduce using rule 226 (assignment_operator -> EQUALS .)
    THIS            reduce using rule 226 (assignment_operator -> EQUALS .)
    BASE            reduce using rule 226 (assignment_operator -> EQUALS .)
    TYPEOF          reduce using rule 226 (assignment_operator -> EQUALS .)
    DEFAULT         reduce using rule 226 (assignment_operator -> EQUALS .)
    DELEGATE        reduce using rule 226 (assignment_operator -> EQUALS .)
    BOOL            reduce using rule 226 (assignment_operator -> EQUALS .)
    BYTE            reduce using rule 226 (assignment_operator -> EQUALS .)
    CHAR            reduce using rule 226 (assignment_operator -> EQUALS .)
    DECIMAL         reduce using rule 226 (assignment_operator -> EQUALS .)
    DOUBLE          reduce using rule 226 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 226 (assignment_operator -> EQUALS .)
    INT             reduce using rule 226 (assignment_operator -> EQUALS .)
    LONG            reduce using rule 226 (assignment_operator -> EQUALS .)
    OBJECT          reduce using rule 226 (assignment_operator -> EQUALS .)
    SBYTE           reduce using rule 226 (assignment_operator -> EQUALS .)
    SHORT           reduce using rule 226 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 226 (assignment_operator -> EQUALS .)
    UINT            reduce using rule 226 (assignment_operator -> EQUALS .)
    ULONG           reduce using rule 226 (assignment_operator -> EQUALS .)
    USHORT          reduce using rule 226 (assignment_operator -> EQUALS .)


state 363

    (225) assignment -> unary_expression assignment_operator . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 492
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 364

    (228) assignment_operator -> MINUSEQUAL .

    PLUS            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    INCREMENT       reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    DECREMENT       reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    NEW             reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    IDENTIFIER      reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    INTCONST        reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    STRCONST        reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    CHCONST         reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    THIS            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    BASE            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    TYPEOF          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    DEFAULT         reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    DELEGATE        reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    BOOL            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    BYTE            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    CHAR            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    DECIMAL         reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    DOUBLE          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    FLOAT           reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    INT             reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    LONG            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    OBJECT          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    SBYTE           reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    SHORT           reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    STRING          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    UINT            reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    ULONG           reduce using rule 228 (assignment_operator -> MINUSEQUAL .)
    USHORT          reduce using rule 228 (assignment_operator -> MINUSEQUAL .)


state 365

    (227) assignment_operator -> PLUSEQUAL .

    PLUS            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    INCREMENT       reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    DECREMENT       reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    NEW             reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    IDENTIFIER      reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    INTCONST        reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    STRCONST        reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    CHCONST         reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    THIS            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    BASE            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    TYPEOF          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    DEFAULT         reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    DELEGATE        reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    BOOL            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    BYTE            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    CHAR            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    DECIMAL         reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    DOUBLE          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    FLOAT           reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    INT             reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    LONG            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    OBJECT          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    SBYTE           reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    SHORT           reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    STRING          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    UINT            reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    ULONG           reduce using rule 227 (assignment_operator -> PLUSEQUAL .)
    USHORT          reduce using rule 227 (assignment_operator -> PLUSEQUAL .)


state 366

    (236) assignment_operator -> RSHIFTEQUAL .

    PLUS            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    INCREMENT       reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    DECREMENT       reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    INTCONST        reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    STRCONST        reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    CHCONST         reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    THIS            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    BASE            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    TYPEOF          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    DEFAULT         reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    DELEGATE        reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    BOOL            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    BYTE            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    CHAR            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    DECIMAL         reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    DOUBLE          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT           reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    INT             reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    LONG            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    OBJECT          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    SBYTE           reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    SHORT           reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    STRING          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    UINT            reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    ULONG           reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)
    USHORT          reduce using rule 236 (assignment_operator -> RSHIFTEQUAL .)


state 367

    (232) assignment_operator -> ANDEQUAL .

    PLUS            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    INCREMENT       reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    DECREMENT       reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    NEW             reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    IDENTIFIER      reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    INTCONST        reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    STRCONST        reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    CHCONST         reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    THIS            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    BASE            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    TYPEOF          reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    DEFAULT         reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    DELEGATE        reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    BOOL            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    BYTE            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    CHAR            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    DECIMAL         reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    DOUBLE          reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    FLOAT           reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    INT             reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    LONG            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    OBJECT          reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    SBYTE           reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    SHORT           reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    STRING          reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    UINT            reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    ULONG           reduce using rule 232 (assignment_operator -> ANDEQUAL .)
    USHORT          reduce using rule 232 (assignment_operator -> ANDEQUAL .)


state 368

    (234) assignment_operator -> XOREQUAL .

    PLUS            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 234 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 234 (assignment_operator -> XOREQUAL .)
    INCREMENT       reduce using rule 234 (assignment_operator -> XOREQUAL .)
    DECREMENT       reduce using rule 234 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 234 (assignment_operator -> XOREQUAL .)
    NEW             reduce using rule 234 (assignment_operator -> XOREQUAL .)
    IDENTIFIER      reduce using rule 234 (assignment_operator -> XOREQUAL .)
    INTCONST        reduce using rule 234 (assignment_operator -> XOREQUAL .)
    STRCONST        reduce using rule 234 (assignment_operator -> XOREQUAL .)
    CHCONST         reduce using rule 234 (assignment_operator -> XOREQUAL .)
    THIS            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    BASE            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    TYPEOF          reduce using rule 234 (assignment_operator -> XOREQUAL .)
    DEFAULT         reduce using rule 234 (assignment_operator -> XOREQUAL .)
    DELEGATE        reduce using rule 234 (assignment_operator -> XOREQUAL .)
    BOOL            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    BYTE            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    CHAR            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    DECIMAL         reduce using rule 234 (assignment_operator -> XOREQUAL .)
    DOUBLE          reduce using rule 234 (assignment_operator -> XOREQUAL .)
    FLOAT           reduce using rule 234 (assignment_operator -> XOREQUAL .)
    INT             reduce using rule 234 (assignment_operator -> XOREQUAL .)
    LONG            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    OBJECT          reduce using rule 234 (assignment_operator -> XOREQUAL .)
    SBYTE           reduce using rule 234 (assignment_operator -> XOREQUAL .)
    SHORT           reduce using rule 234 (assignment_operator -> XOREQUAL .)
    STRING          reduce using rule 234 (assignment_operator -> XOREQUAL .)
    UINT            reduce using rule 234 (assignment_operator -> XOREQUAL .)
    ULONG           reduce using rule 234 (assignment_operator -> XOREQUAL .)
    USHORT          reduce using rule 234 (assignment_operator -> XOREQUAL .)


state 369

    (230) assignment_operator -> DIVEQUAL .

    PLUS            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    INCREMENT       reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    DECREMENT       reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    NEW             reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    IDENTIFIER      reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    INTCONST        reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    STRCONST        reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    CHCONST         reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    THIS            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    BASE            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    TYPEOF          reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    DEFAULT         reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    DELEGATE        reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    BOOL            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    BYTE            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    CHAR            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    DECIMAL         reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    DOUBLE          reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    FLOAT           reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    INT             reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    LONG            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    OBJECT          reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    SBYTE           reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    SHORT           reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    STRING          reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    UINT            reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    ULONG           reduce using rule 230 (assignment_operator -> DIVEQUAL .)
    USHORT          reduce using rule 230 (assignment_operator -> DIVEQUAL .)


state 370

    (235) assignment_operator -> LAMBDADEC .

    PLUS            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    MINUS           reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    LNOT            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    NOT             reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    INCREMENT       reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    DECREMENT       reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    LPAREN          reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    NEW             reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    IDENTIFIER      reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    INTCONST        reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    STRCONST        reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    CHCONST         reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    THIS            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    BASE            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    TYPEOF          reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    DEFAULT         reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    DELEGATE        reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    BOOL            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    BYTE            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    CHAR            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    DECIMAL         reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    DOUBLE          reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    FLOAT           reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    INT             reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    LONG            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    OBJECT          reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    SBYTE           reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    SHORT           reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    STRING          reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    UINT            reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    ULONG           reduce using rule 235 (assignment_operator -> LAMBDADEC .)
    USHORT          reduce using rule 235 (assignment_operator -> LAMBDADEC .)


state 371

    (195) local_variable_declarator -> IDENTIFIER .
    (196) local_variable_declarator -> IDENTIFIER . EQUALS local_variable_initializer

    COMMA           reduce using rule 195 (local_variable_declarator -> IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 195 (local_variable_declarator -> IDENTIFIER .)
    EQUALS          shift and go to state 493


state 372

    (193) local_variable_declarators -> local_variable_declarator .

    COMMA           reduce using rule 193 (local_variable_declarators -> local_variable_declarator .)
    STMT_TERMINATOR reduce using rule 193 (local_variable_declarators -> local_variable_declarator .)


state 373

    (191) local_variable_declaration -> local_variable_type local_variable_declarators .
    (194) local_variable_declarators -> local_variable_declarators . COMMA local_variable_declarator

    STMT_TERMINATOR reduce using rule 191 (local_variable_declaration -> local_variable_type local_variable_declarators .)
    COMMA           shift and go to state 494


state 374

    (274) goto_statement -> GOTO DEFAULT . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 495


state 375

    (272) goto_statement -> GOTO IDENTIFIER . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 496


state 376

    (273) goto_statement -> GOTO CASE . constant_expression STMT_TERMINATOR
    (209) constant_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 497
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    constant_expression            shift and go to state 498
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 377

    (5) namespace_or_type_name -> IDENTIFIER .
    (287) implicit_anonymous_function_parameter -> IDENTIFIER .
    (111) simple_name -> IDENTIFIER .

  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MEMBERACCESS resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LAMBDADEC resolved using rule 111 (simple_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQUALS          reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    OREQUAL         reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOREQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    LAMBDADEC       reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    MOD             reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    LE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    IS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQ              reduce using rule 111 (simple_name -> IDENTIFIER .)
    NE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 111 (simple_name -> IDENTIFIER .)
    CAND            reduce using rule 111 (simple_name -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COR             reduce using rule 111 (simple_name -> IDENTIFIER .)

  ! LAMBDADEC       [ reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]
  ! MEMBERACCESS    [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]


state 378

    (26) integral_type -> CHAR .
    (117) predefined_type -> CHAR .

    RPAREN          reduce using rule 26 (integral_type -> CHAR .)
    IDENTIFIER      reduce using rule 26 (integral_type -> CHAR .)
    LBRACKET        reduce using rule 26 (integral_type -> CHAR .)
    MEMBERACCESS    reduce using rule 117 (predefined_type -> CHAR .)


state 379

    (18) integral_type -> SBYTE .
    (124) predefined_type -> SBYTE .

    RPAREN          reduce using rule 18 (integral_type -> SBYTE .)
    IDENTIFIER      reduce using rule 18 (integral_type -> SBYTE .)
    LBRACKET        reduce using rule 18 (integral_type -> SBYTE .)
    MEMBERACCESS    reduce using rule 124 (predefined_type -> SBYTE .)


state 380

    (112) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 499


state 381

    (22) integral_type -> INT .
    (121) predefined_type -> INT .

    RPAREN          reduce using rule 22 (integral_type -> INT .)
    IDENTIFIER      reduce using rule 22 (integral_type -> INT .)
    LBRACKET        reduce using rule 22 (integral_type -> INT .)
    MEMBERACCESS    reduce using rule 121 (predefined_type -> INT .)


state 382

    (21) integral_type -> USHORT .
    (129) predefined_type -> USHORT .

    RPAREN          reduce using rule 21 (integral_type -> USHORT .)
    IDENTIFIER      reduce using rule 21 (integral_type -> USHORT .)
    LBRACKET        reduce using rule 21 (integral_type -> USHORT .)
    MEMBERACCESS    reduce using rule 129 (predefined_type -> USHORT .)


state 383

    (24) integral_type -> LONG .
    (122) predefined_type -> LONG .

    RPAREN          reduce using rule 24 (integral_type -> LONG .)
    IDENTIFIER      reduce using rule 24 (integral_type -> LONG .)
    LBRACKET        reduce using rule 24 (integral_type -> LONG .)
    MEMBERACCESS    reduce using rule 122 (predefined_type -> LONG .)


state 384

    (279) cast_expression -> LPAREN type . RPAREN unary_expression
    (36) non_array_type -> type .

    RPAREN          shift and go to state 500
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 385

    (19) integral_type -> BYTE .
    (116) predefined_type -> BYTE .

    RPAREN          reduce using rule 19 (integral_type -> BYTE .)
    IDENTIFIER      reduce using rule 19 (integral_type -> BYTE .)
    LBRACKET        reduce using rule 19 (integral_type -> BYTE .)
    MEMBERACCESS    reduce using rule 116 (predefined_type -> BYTE .)


state 386

    (20) integral_type -> SHORT .
    (125) predefined_type -> SHORT .

    RPAREN          reduce using rule 20 (integral_type -> SHORT .)
    IDENTIFIER      reduce using rule 20 (integral_type -> SHORT .)
    LBRACKET        reduce using rule 20 (integral_type -> SHORT .)
    MEMBERACCESS    reduce using rule 125 (predefined_type -> SHORT .)


state 387

    (23) integral_type -> UINT .
    (127) predefined_type -> UINT .

    RPAREN          reduce using rule 23 (integral_type -> UINT .)
    IDENTIFIER      reduce using rule 23 (integral_type -> UINT .)
    LBRACKET        reduce using rule 23 (integral_type -> UINT .)
    MEMBERACCESS    reduce using rule 127 (predefined_type -> UINT .)


state 388

    (27) floating_point_type -> FLOAT .
    (120) predefined_type -> FLOAT .

    RPAREN          reduce using rule 27 (floating_point_type -> FLOAT .)
    LBRACKET        reduce using rule 27 (floating_point_type -> FLOAT .)
    IDENTIFIER      reduce using rule 27 (floating_point_type -> FLOAT .)
    MEMBERACCESS    reduce using rule 120 (predefined_type -> FLOAT .)


state 389

    (25) integral_type -> ULONG .
    (128) predefined_type -> ULONG .

    RPAREN          reduce using rule 25 (integral_type -> ULONG .)
    IDENTIFIER      reduce using rule 25 (integral_type -> ULONG .)
    LBRACKET        reduce using rule 25 (integral_type -> ULONG .)
    MEMBERACCESS    reduce using rule 128 (predefined_type -> ULONG .)


state 390

    (28) floating_point_type -> DOUBLE .
    (119) predefined_type -> DOUBLE .

    RPAREN          reduce using rule 28 (floating_point_type -> DOUBLE .)
    LBRACKET        reduce using rule 28 (floating_point_type -> DOUBLE .)
    IDENTIFIER      reduce using rule 28 (floating_point_type -> DOUBLE .)
    MEMBERACCESS    reduce using rule 119 (predefined_type -> DOUBLE .)


state 391

    (217) expression_statement -> statement_expression STMT_TERMINATOR .

    CONST           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LBRACE          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    IF              reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    SWITCH          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    WHILE           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DO              reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    FOR             reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    BREAK           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CONTINUE        reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    GOTO            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    RETURN          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    NEW             reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INCREMENT       reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DECREMENT       reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    PLUS            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    MINUS           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LNOT            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    NOT             reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    OBJECT          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    STRING          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LPAREN          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    BOOL            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INTCONST        reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    STRCONST        reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CHCONST         reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    THIS            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    BASE            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    TYPEOF          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DEFAULT         reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DELEGATE        reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DECIMAL         reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    BYTE            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CHAR            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    DOUBLE          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    FLOAT           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    INT             reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    LONG            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    SBYTE           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    SHORT           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    UINT            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    ULONG           reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    USHORT          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    CASE            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    RBRACE          reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)
    ELSE            reduce using rule 217 (expression_statement -> statement_expression STMT_TERMINATOR .)


state 392

    (140) post_decrement_expression -> primary_expression DECREMENT .

    LBRACKET        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    MEMBERACCESS    reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LPAREN          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    INCREMENT       reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    DECREMENT       reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    EQUALS          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    PLUSEQUAL       reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    MINUSEQUAL      reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    TIMESEQUAL      reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    DIVEQUAL        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    MODEQUAL        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    ANDEQUAL        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    OREQUAL         reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    XOREQUAL        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LAMBDADEC       reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    RSHIFTEQUAL     reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LSHIFTEQUAL     reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    TIMES           reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    DIVIDE          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    MOD             reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    PLUS            reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    MINUS           reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LSHIFT          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    RSHIFT          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LT              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    GT              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    LE              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    GE              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    IS              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    AS              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    EQ              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    NE              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    AND             reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    XOR             reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    OR              reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    CAND            reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    CONDOP          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    COR             reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    COMMA           reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    RPAREN          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    RBRACE          reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    RBRACKET        reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    STMT_TERMINATOR reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)
    COLON           reduce using rule 140 (post_decrement_expression -> primary_expression DECREMENT .)


state 393

    (113) member_access -> primary_expression MEMBERACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 501


state 394

    (139) post_increment_expression -> primary_expression INCREMENT .

    STMT_TERMINATOR reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LBRACKET        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LPAREN          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    INCREMENT       reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    DECREMENT       reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    MEMBERACCESS    reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    EQUALS          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    PLUSEQUAL       reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    MINUSEQUAL      reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    TIMESEQUAL      reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    DIVEQUAL        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    MODEQUAL        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    ANDEQUAL        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    OREQUAL         reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    XOREQUAL        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LAMBDADEC       reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    RSHIFTEQUAL     reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LSHIFTEQUAL     reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    TIMES           reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    DIVIDE          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    MOD             reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    PLUS            reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    MINUS           reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LSHIFT          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    RSHIFT          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LT              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    GT              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    LE              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    GE              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    IS              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    AS              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    EQ              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    NE              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    AND             reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    XOR             reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    OR              reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    CAND            reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    CONDOP          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    COR             reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    COMMA           reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    RPAREN          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    RBRACE          reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    COLON           reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)
    RBRACKET        reduce using rule 139 (post_increment_expression -> primary_expression INCREMENT .)


state 395

    (130) invocation_expression -> primary_expression LPAREN . argument_list_opt RPAREN
    (434) argument_list_opt -> . empty
    (435) argument_list_opt -> . argument_list
    (371) empty -> .
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RPAREN          reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list_opt              shift and go to state 504
    argument_list                  shift and go to state 502
    argument_name                  shift and go to state 475
    empty                          shift and go to state 503
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 396

    (184) block -> LBRACE statement_list_opt RBRACE .

    CONST           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LBRACE          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    STMT_TERMINATOR reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    IF              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    SWITCH          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    WHILE           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DO              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    FOR             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    BREAK           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CONTINUE        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    GOTO            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RETURN          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    NEW             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    INCREMENT       reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DECREMENT       reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    PLUS            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    MINUS           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LNOT            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    NOT             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    OBJECT          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    STRING          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LPAREN          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    BOOL            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    INTCONST        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    STRCONST        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CHCONST         reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    THIS            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    BASE            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    TYPEOF          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DEFAULT         reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DELEGATE        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DECIMAL         reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    BYTE            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CHAR            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DOUBLE          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    FLOAT           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    INT             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LONG            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    SBYTE           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    SHORT           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    UINT            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    ULONG           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    USHORT          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RBRACE          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    ELSE            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CASE            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    STATIC          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CLASS           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    STRUCT          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    ENUM            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    VOID            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    EXTERN          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LBRACKET        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    MEMBERACCESS    reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    EQUALS          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    PLUSEQUAL       reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    MINUSEQUAL      reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    TIMESEQUAL      reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DIVEQUAL        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    MODEQUAL        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    ANDEQUAL        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    OREQUAL         reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    XOREQUAL        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LAMBDADEC       reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RSHIFTEQUAL     reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LSHIFTEQUAL     reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    TIMES           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    DIVIDE          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    MOD             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LSHIFT          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RSHIFT          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LT              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    GT              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    LE              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    GE              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    IS              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    AS              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    EQ              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    NE              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    AND             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    XOR             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    OR              reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CAND            reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    CONDOP          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    COR             reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    COMMA           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RPAREN          reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    COLON           reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)
    RBRACKET        reduce using rule 184 (block -> LBRACE statement_list_opt RBRACE .)


state 397

    (258) do_statement -> DO embedded_statement . WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR

    WHILE           shift and go to state 505


state 398

    (270) break_statement -> BREAK STMT_TERMINATOR .

    CONST           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    LBRACE          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    IF              reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    SWITCH          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    WHILE           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DO              reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    FOR             reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    BREAK           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    CONTINUE        reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    GOTO            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    RETURN          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    NEW             reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    INCREMENT       reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DECREMENT       reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    PLUS            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    MINUS           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    LNOT            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    NOT             reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    OBJECT          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    STRING          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    LPAREN          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    BOOL            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    INTCONST        reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    STRCONST        reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    CHCONST         reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    THIS            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    BASE            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    TYPEOF          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DEFAULT         reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DELEGATE        reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DECIMAL         reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    BYTE            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    CHAR            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    DOUBLE          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    FLOAT           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    INT             reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    LONG            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    SBYTE           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    SHORT           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    UINT            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    ULONG           reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    USHORT          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    RBRACE          reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    ELSE            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)
    CASE            reduce using rule 270 (break_statement -> BREAK STMT_TERMINATOR .)


state 399

    (178) default_value_expression -> DEFAULT LPAREN . type RPAREN
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    class_type                     shift and go to state 59
    simple_type                    shift and go to state 40
    type                           shift and go to state 506
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    struct_type                    shift and go to state 42
    value_type                     shift and go to state 68

state 400

    (135) element_access -> primary_no_array_creation_expression LBRACKET . argument_list RBRACKET
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (371) empty -> .
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list                  shift and go to state 507
    argument_name                  shift and go to state 475
    empty                          shift and go to state 476
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 401

    (397) explicit_anonymous_function_signature_opt -> explicit_anonymous_function_signature .

    LBRACE          reduce using rule 397 (explicit_anonymous_function_signature_opt -> explicit_anonymous_function_signature .)


state 402

    (180) explicit_anonymous_function_signature -> LPAREN . explicit_anonymous_function_parameter_list_opt RPAREN
    (404) explicit_anonymous_function_parameter_list_opt -> . empty
    (405) explicit_anonymous_function_parameter_list_opt -> . explicit_anonymous_function_parameter_list
    (371) empty -> .
    (181) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter
    (182) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter
    (183) explicit_anonymous_function_parameter -> . type IDENTIFIER
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    RPAREN          reduce using rule 371 (empty -> .)
    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    explicit_anonymous_function_parameter shift and go to state 441
    namespace_or_type_name         shift and go to state 56
    type_name                      shift and go to state 50
    explicit_anonymous_function_parameter_list shift and go to state 443
    integral_type                  shift and go to state 62
    delegate_type                  shift and go to state 51
    empty                          shift and go to state 508
    non_array_type                 shift and go to state 58
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 509
    floating_point_type            shift and go to state 70
    explicit_anonymous_function_parameter_list_opt shift and go to state 446
    numeric_type                   shift and go to state 38
    value_type                     shift and go to state 68
    class_type                     shift and go to state 59
    reference_type                 shift and go to state 61

state 403

    (396) explicit_anonymous_function_signature_opt -> empty .

    LBRACE          reduce using rule 396 (explicit_anonymous_function_signature_opt -> empty .)


state 404

    (179) anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt . block
    (184) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 126

    block                          shift and go to state 510

state 405

    (88) unary_expression -> LNOT unary_expression .

    EQUALS          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    PLUSEQUAL       reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    MINUSEQUAL      reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    TIMESEQUAL      reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    DIVEQUAL        reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    MODEQUAL        reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    ANDEQUAL        reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    OREQUAL         reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    XOREQUAL        reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    LAMBDADEC       reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    RSHIFTEQUAL     reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    LSHIFTEQUAL     reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    STMT_TERMINATOR reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    TIMES           reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    DIVIDE          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    MOD             reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    PLUS            reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    MINUS           reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    LSHIFT          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    RSHIFT          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    LT              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    GT              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    LE              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    GE              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    IS              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    AS              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    EQ              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    NE              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    AND             reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    XOR             reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    OR              reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    CAND            reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    CONDOP          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    COR             reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    COMMA           reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    RPAREN          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    RBRACE          reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    COLON           reduce using rule 88 (unary_expression -> LNOT unary_expression .)
    RBRACKET        reduce using rule 88 (unary_expression -> LNOT unary_expression .)


state 406

    (276) array_creation_expression -> NEW non_array_type . LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (35) array_type -> non_array_type . rank_specifiers
    (37) rank_specifiers -> . rank_specifier
    (38) rank_specifiers -> . rank_specifiers rank_specifier
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET

    LBRACKET        shift and go to state 511

    rank_specifiers                shift and go to state 112
    rank_specifier                 shift and go to state 113

state 407

    (45) delegate_type -> type_name .
    (10) struct_type -> type_name .
    (32) class_type -> type_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (struct_type -> type_name .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (struct_type -> type_name .)
    LPAREN          reduce using rule 10 (struct_type -> type_name .)
    LBRACE          reduce using rule 10 (struct_type -> type_name .)
    LBRACKET        reduce using rule 10 (struct_type -> type_name .)

  ! LPAREN          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LBRACE          [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LBRACKET        [ reduce using rule 45 (delegate_type -> type_name .) ]
  ! LPAREN          [ reduce using rule 32 (class_type -> type_name .) ]
  ! LBRACE          [ reduce using rule 32 (class_type -> type_name .) ]
  ! LBRACKET        [ reduce using rule 32 (class_type -> type_name .) ]


state 408

    (278) array_creation_expression -> NEW rank_specifier . array_initializer
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE

    LBRACE          shift and go to state 416

    array_initializer              shift and go to state 512

state 409

    (277) array_creation_expression -> NEW array_type . array_initializer
    (30) reference_type -> array_type .
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          reduce using rule 30 (reference_type -> array_type .)
    LBRACKET        reduce using rule 30 (reference_type -> array_type .)
    LBRACE          shift and go to state 416

  ! LBRACE          [ reduce using rule 30 (reference_type -> array_type .) ]

    array_initializer              shift and go to state 513

state 410

    (160) delegate_creation_expression -> NEW delegate_type . LPAREN expression RPAREN
    (31) reference_type -> delegate_type .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 514
    LBRACE          reduce using rule 31 (reference_type -> delegate_type .)
    LBRACKET        reduce using rule 31 (reference_type -> delegate_type .)

  ! LPAREN          [ reduce using rule 31 (reference_type -> delegate_type .) ]


state 411

    (141) object_creation_expression -> NEW type . LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> NEW type . object_or_collection_initializer
    (36) non_array_type -> type .
    (143) object_or_collection_initializer -> . object_initializer
    (144) object_or_collection_initializer -> . collection_initializer
    (145) object_initializer -> . LBRACE member_initializer_list_opt RBRACE
    (146) object_initializer -> . LBRACE member_initializer_list COMMA RBRACE
    (152) collection_initializer -> . LBRACE element_initializer_list RBRACE
    (153) collection_initializer -> . LBRACE element_initializer_list COMMA RBRACE

    LPAREN          shift and go to state 518
    LBRACKET        reduce using rule 36 (non_array_type -> type .)
    LBRACE          shift and go to state 517

    collection_initializer         shift and go to state 515
    object_or_collection_initializer shift and go to state 519
    object_initializer             shift and go to state 516

state 412

    (161) anonymous_object_creation_expression -> NEW anonymous_object_initializer .

    LBRACKET        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LPAREN          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    INCREMENT       reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    DECREMENT       reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    MEMBERACCESS    reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    EQUALS          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    PLUSEQUAL       reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    MINUSEQUAL      reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    TIMESEQUAL      reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    DIVEQUAL        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    MODEQUAL        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    ANDEQUAL        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    OREQUAL         reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    XOREQUAL        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LAMBDADEC       reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    RSHIFTEQUAL     reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LSHIFTEQUAL     reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    TIMES           reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    DIVIDE          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    MOD             reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    PLUS            reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    MINUS           reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LSHIFT          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    RSHIFT          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LT              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    GT              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    LE              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    GE              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    IS              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    AS              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    EQ              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    NE              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    AND             reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    XOR             reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    OR              reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    CAND            reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    CONDOP          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    COR             reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    RPAREN          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    STMT_TERMINATOR reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    COMMA           reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    RBRACE          reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    COLON           reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)
    RBRACKET        reduce using rule 161 (anonymous_object_creation_expression -> NEW anonymous_object_initializer .)


state 413

    (162) anonymous_object_initializer -> LBRACE . member_declarator_list_opt RBRACE
    (163) anonymous_object_initializer -> LBRACE . member_declarator_list COMMA RBRACE
    (400) member_declarator_list_opt -> . empty
    (401) member_declarator_list_opt -> . member_declarator_list
    (164) member_declarator_list -> . member_declarator
    (165) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (371) empty -> .
    (166) member_declarator -> . simple_name
    (167) member_declarator -> . member_access
    (168) member_declarator -> . IDENTIFIER EQUALS expression
    (111) simple_name -> . IDENTIFIER
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block

    RBRACE          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 522
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    LPAREN          shift and go to state 526
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253

    anonymous_object_creation_expression shift and go to state 220
    member_declarator_list         shift and go to state 520
    member_access                  shift and go to state 521
    member_declarator              shift and go to state 523
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    member_declarator_list_opt     shift and go to state 527
    array_creation_expression      shift and go to state 252
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    empty                          shift and go to state 525
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    simple_name                    shift and go to state 528
    this_access                    shift and go to state 251
    delegate_creation_expression   shift and go to state 189
    primary_expression             shift and go to state 524
    object_creation_expression     shift and go to state 308

state 414

    (321) method_header -> return_type member_name LPAREN formal_parameter_list_opt . RPAREN

    RPAREN          shift and go to state 529


state 415

    (203) variable_initializer -> expression .

    STMT_TERMINATOR reduce using rule 203 (variable_initializer -> expression .)
    COMMA           reduce using rule 203 (variable_initializer -> expression .)
    RBRACE          reduce using rule 203 (variable_initializer -> expression .)


state 416

    (199) array_initializer -> LBRACE . variable_initializer_list_opt RBRACE
    (200) array_initializer -> LBRACE . variable_initializer_list COMMA RBRACE
    (398) variable_initializer_list_opt -> . empty
    (399) variable_initializer_list_opt -> . variable_initializer_list
    (201) variable_initializer_list -> . variable_initializer
    (202) variable_initializer_list -> . variable_initializer_list COMMA variable_initializer
    (371) empty -> .
    (203) variable_initializer -> . expression
    (204) variable_initializer -> . array_initializer
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RBRACE          reduce using rule 371 (empty -> .)
    LBRACE          shift and go to state 416
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    variable_initializer_list_opt  shift and go to state 532
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    empty                          shift and go to state 530
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 415
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    array_initializer              shift and go to state 417
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    variable_initializer_list      shift and go to state 531
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    variable_initializer           shift and go to state 533
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 417

    (204) variable_initializer -> array_initializer .

    STMT_TERMINATOR reduce using rule 204 (variable_initializer -> array_initializer .)
    COMMA           reduce using rule 204 (variable_initializer -> array_initializer .)
    RBRACE          reduce using rule 204 (variable_initializer -> array_initializer .)


state 418

    (319) variable_declarator -> IDENTIFIER EQUALS variable_initializer .

    STMT_TERMINATOR reduce using rule 319 (variable_declarator -> IDENTIFIER EQUALS variable_initializer .)
    COMMA           reduce using rule 319 (variable_declarator -> IDENTIFIER EQUALS variable_initializer .)


state 419

    (317) variable_declarators -> variable_declarators COMMA variable_declarator .

    STMT_TERMINATOR reduce using rule 317 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    COMMA           reduce using rule 317 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 420

    (208) constant_declarator -> IDENTIFIER EQUALS . constant_expression
    (209) constant_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 497
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    constant_expression            shift and go to state 534
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 421

    (314) constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .

    CONST           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    EXTERN          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    STATIC          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    CLASS           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    STRUCT          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    ENUM            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    DELEGATE        reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    LPAREN          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    VOID            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    LBRACE          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    OBJECT          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    STRING          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    BOOL            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    DECIMAL         reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    SBYTE           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    BYTE            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    SHORT           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    USHORT          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    INT             reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    UINT            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    LONG            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    ULONG           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    CHAR            reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    FLOAT           reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    DOUBLE          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    NOT             reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)
    RBRACE          reduce using rule 314 (constant_declaration -> CONST type constant_declarators STMT_TERMINATOR .)


state 422

    (207) constant_declarators -> constant_declarators COMMA . constant_declarator
    (208) constant_declarator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 264

    constant_declarator            shift and go to state 535

state 423

    (367) enum_member_declaration -> IDENTIFIER EQUALS . constant_expression
    (209) constant_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 497
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    constant_expression            shift and go to state 536
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 424

    (363) enum_body -> LBRACE enum_member_declarations COMMA . RBRACE
    (365) enum_member_declarations -> enum_member_declarations COMMA . enum_member_declaration
    (366) enum_member_declaration -> . IDENTIFIER
    (367) enum_member_declaration -> . IDENTIFIER EQUALS constant_expression

    RBRACE          shift and go to state 538
    IDENTIFIER      shift and go to state 267

    enum_member_declaration        shift and go to state 537

state 425

    (362) enum_body -> LBRACE enum_member_declarations_opt RBRACE .

    STMT_TERMINATOR reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    NAMESPACE       reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    CLASS           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    STRUCT          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    ENUM            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    DELEGATE        reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    IDENTIFIER      reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    LPAREN          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    LBRACE          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    $end            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    CONST           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    STATIC          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    VOID            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    EXTERN          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    OBJECT          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    STRING          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    BOOL            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    DECIMAL         reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    SBYTE           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    BYTE            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    SHORT           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    USHORT          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    INT             reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    UINT            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    LONG            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    ULONG           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    CHAR            reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    FLOAT           reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    DOUBLE          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    RBRACE          reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)
    NOT             reduce using rule 362 (enum_body -> LBRACE enum_member_declarations_opt RBRACE .)


state 426

    (280) lambda_expression -> anonymous_function_signature LAMBDADEC . anonymous_function_body
    (288) anonymous_function_body -> . expression
    (289) anonymous_function_body -> . block
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (184) block -> . LBRACE statement_list_opt RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 126
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 539
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    anonymous_function_body        shift and go to state 540
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    block                          shift and go to state 541
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 427

    (80) additive_expression -> additive_expression MINUS . multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    element_access                 shift and go to state 209
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 543
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 428

    (79) additive_expression -> additive_expression PLUS . multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    element_access                 shift and go to state 209
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 544
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 429

    (70) relational_expression -> relational_expression GT . shift_expression
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 545
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 430

    (69) relational_expression -> relational_expression LT . shift_expression
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 546
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 431

    (73) relational_expression -> relational_expression IS . type
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 547
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 432

    (74) relational_expression -> relational_expression AS . type
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 548
    floating_point_type            shift and go to state 70
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59
    value_type                     shift and go to state 68

state 433

    (72) relational_expression -> relational_expression GE . shift_expression
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 549
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 434

    (71) relational_expression -> relational_expression LE . shift_expression
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 550
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 435

    (83) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 551
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 436

    (82) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 552
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 437

    (84) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 553
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 438

    (64) and_expression -> and_expression AND . equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    equality_expression            shift and go to state 554
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    typeof_expression              shift and go to state 176
    this_access                    shift and go to state 251

state 439

    (58) conditional_and_expression -> conditional_and_expression CAND . inclusive_or_expression
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 299
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 555
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 440

    (60) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 299
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 556
    pre_increment_expression       shift and go to state 310
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 441

    (181) explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter .

    COMMA           reduce using rule 181 (explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter .)
    RPAREN          reduce using rule 181 (explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter .)


state 442

    (287) implicit_anonymous_function_parameter -> IDENTIFIER .
    (5) namespace_or_type_name -> IDENTIFIER .
    (111) simple_name -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MEMBERACCESS resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LAMBDADEC resolved using rule 111 (simple_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    COMMA           reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQUALS          reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    OREQUAL         reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOREQUAL        reduce using rule 111 (simple_name -> IDENTIFIER .)
    LAMBDADEC       reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    MOD             reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    LE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    IS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQ              reduce using rule 111 (simple_name -> IDENTIFIER .)
    NE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 111 (simple_name -> IDENTIFIER .)
    CAND            reduce using rule 111 (simple_name -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COR             reduce using rule 111 (simple_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .) ]
  ! LAMBDADEC       [ reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]
  ! MEMBERACCESS    [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 111 (simple_name -> IDENTIFIER .) ]


state 443

    (405) explicit_anonymous_function_parameter_list_opt -> explicit_anonymous_function_parameter_list .
    (182) explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list . COMMA explicit_anonymous_function_parameter

    RPAREN          reduce using rule 405 (explicit_anonymous_function_parameter_list_opt -> explicit_anonymous_function_parameter_list .)
    COMMA           shift and go to state 557


state 444

    (404) explicit_anonymous_function_parameter_list_opt -> empty .
    (372) implicit_anonymous_function_parameter_list_opt -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 372 (implicit_anonymous_function_parameter_list_opt -> empty .)
    RPAREN          reduce using rule 372 (implicit_anonymous_function_parameter_list_opt -> empty .)

  ! RPAREN          [ reduce using rule 404 (explicit_anonymous_function_parameter_list_opt -> empty .) ]


state 445

    (279) cast_expression -> LPAREN type . RPAREN unary_expression
    (183) explicit_anonymous_function_parameter -> type . IDENTIFIER
    (36) non_array_type -> type .

    RPAREN          shift and go to state 500
    IDENTIFIER      shift and go to state 558
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 446

    (180) explicit_anonymous_function_signature -> LPAREN explicit_anonymous_function_parameter_list_opt . RPAREN

    RPAREN          shift and go to state 559


state 447

    (373) implicit_anonymous_function_parameter_list_opt -> implicit_anonymous_function_parameter_list .
    (286) implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list . COMMA implicit_anonymous_function_parameter

    RPAREN          reduce using rule 373 (implicit_anonymous_function_parameter_list_opt -> implicit_anonymous_function_parameter_list .)
    COMMA           shift and go to state 560


state 448

    (285) implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter .
    (284) implicit_anonymous_function_signature -> implicit_anonymous_function_parameter .

    COMMA           reduce using rule 285 (implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter .)
    RPAREN          reduce using rule 285 (implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter .)
    LAMBDADEC       reduce using rule 284 (implicit_anonymous_function_signature -> implicit_anonymous_function_parameter .)


state 449

    (283) implicit_anonymous_function_signature -> LPAREN implicit_anonymous_function_parameter_list_opt . RPAREN

    RPAREN          shift and go to state 561


state 450

    (67) equality_expression -> equality_expression NE . relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 562
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 451

    (66) equality_expression -> equality_expression EQ . relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 563
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 452

    (76) shift_expression -> shift_expression LSHIFT . additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 564
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 453

    (77) shift_expression -> shift_expression RSHIFT . additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    element_access                 shift and go to state 209
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 565
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 454

    (62) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    invocation_expression          shift and go to state 289
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 566
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    pre_increment_expression       shift and go to state 310
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 455

    (56) conditional_or_expression -> conditional_or_expression COR . conditional_and_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 299
    conditional_and_expression     shift and go to state 567
    element_access                 shift and go to state 209
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    additive_expression            shift and go to state 276
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 292
    invocation_expression          shift and go to state 289
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251

state 456

    (54) conditional_expression -> conditional_or_expression CONDOP . expression COLON expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 568
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 457

    (306) class_member_declarations -> class_member_declarations class_member_declaration .

    CONST           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    IDENTIFIER      reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    EXTERN          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    STATIC          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    CLASS           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    STRUCT          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    ENUM            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    DELEGATE        reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    LPAREN          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    VOID            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    LBRACE          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    OBJECT          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    STRING          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    BOOL            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    DECIMAL         reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    SBYTE           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    BYTE            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    SHORT           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    USHORT          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    INT             reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    UINT            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    LONG            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    ULONG           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    CHAR            reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FLOAT           reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    DOUBLE          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    NOT             reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RBRACE          reduce using rule 306 (class_member_declarations -> class_member_declarations class_member_declaration .)


state 458

    (341) destructor_declaration -> extern_opt NOT . IDENTIFIER LPAREN RPAREN destructor_body

    IDENTIFIER      shift and go to state 569


state 459

    (304) class_body -> LBRACE class_member_declarations_opt RBRACE .

    STMT_TERMINATOR reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    NAMESPACE       reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    CLASS           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    STRUCT          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    ENUM            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    DELEGATE        reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    IDENTIFIER      reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    LPAREN          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    LBRACE          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    $end            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    CONST           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    STATIC          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    VOID            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    EXTERN          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    OBJECT          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    STRING          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    BOOL            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    DECIMAL         reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    SBYTE           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    BYTE            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    SHORT           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    USHORT          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    INT             reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    UINT            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    LONG            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    ULONG           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    CHAR            reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    FLOAT           reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    DOUBLE          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    RBRACE          reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)
    NOT             reduce using rule 304 (class_body -> LBRACE class_member_declarations_opt RBRACE .)


state 460

    (297) namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .

    STMT_TERMINATOR reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    NAMESPACE       reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    CLASS           reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    STRUCT          reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    ENUM            reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    DELEGATE        reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    IDENTIFIER      reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    LPAREN          reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    LBRACE          reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    $end            reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)
    RBRACE          reduce using rule 297 (namespace_body -> LBRACE using_directives_opt namespace_member_declarations_opt RBRACE .)


state 461

    (348) static_constructor_body -> STMT_TERMINATOR .

    CONST           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    STATIC          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    CLASS           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    STRUCT          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    ENUM            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    VOID            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    EXTERN          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    STRING          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    BOOL            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    BYTE            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    SHORT           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    USHORT          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    INT             reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    UINT            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    LONG            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    ULONG           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    CHAR            reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)
    NOT             reduce using rule 348 (static_constructor_body -> STMT_TERMINATOR .)


state 462

    (347) static_constructor_body -> block .

    CONST           reduce using rule 347 (static_constructor_body -> block .)
    IDENTIFIER      reduce using rule 347 (static_constructor_body -> block .)
    STATIC          reduce using rule 347 (static_constructor_body -> block .)
    CLASS           reduce using rule 347 (static_constructor_body -> block .)
    STRUCT          reduce using rule 347 (static_constructor_body -> block .)
    ENUM            reduce using rule 347 (static_constructor_body -> block .)
    DELEGATE        reduce using rule 347 (static_constructor_body -> block .)
    LPAREN          reduce using rule 347 (static_constructor_body -> block .)
    VOID            reduce using rule 347 (static_constructor_body -> block .)
    EXTERN          reduce using rule 347 (static_constructor_body -> block .)
    LBRACE          reduce using rule 347 (static_constructor_body -> block .)
    OBJECT          reduce using rule 347 (static_constructor_body -> block .)
    STRING          reduce using rule 347 (static_constructor_body -> block .)
    BOOL            reduce using rule 347 (static_constructor_body -> block .)
    DECIMAL         reduce using rule 347 (static_constructor_body -> block .)
    SBYTE           reduce using rule 347 (static_constructor_body -> block .)
    BYTE            reduce using rule 347 (static_constructor_body -> block .)
    SHORT           reduce using rule 347 (static_constructor_body -> block .)
    USHORT          reduce using rule 347 (static_constructor_body -> block .)
    INT             reduce using rule 347 (static_constructor_body -> block .)
    UINT            reduce using rule 347 (static_constructor_body -> block .)
    LONG            reduce using rule 347 (static_constructor_body -> block .)
    ULONG           reduce using rule 347 (static_constructor_body -> block .)
    CHAR            reduce using rule 347 (static_constructor_body -> block .)
    FLOAT           reduce using rule 347 (static_constructor_body -> block .)
    DOUBLE          reduce using rule 347 (static_constructor_body -> block .)
    RBRACE          reduce using rule 347 (static_constructor_body -> block .)
    NOT             reduce using rule 347 (static_constructor_body -> block .)


state 463

    (344) static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .

    CONST           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    IDENTIFIER      reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    EXTERN          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    STATIC          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    CLASS           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    STRUCT          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    ENUM            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    DELEGATE        reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    LPAREN          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    VOID            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    LBRACE          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    OBJECT          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    STRING          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    BOOL            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    DECIMAL         reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    SBYTE           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    BYTE            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    SHORT           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    USHORT          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    INT             reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    UINT            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    LONG            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    ULONG           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    CHAR            reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    FLOAT           reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    DOUBLE          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    NOT             reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)
    RBRACE          reduce using rule 344 (static_constructor_declaration -> static_constructor_modifiers IDENTIFIER LPAREN RPAREN static_constructor_body .)


state 464

    (423) constructor_initializer_opt -> constructor_initializer .

    STMT_TERMINATOR reduce using rule 423 (constructor_initializer_opt -> constructor_initializer .)
    LBRACE          reduce using rule 423 (constructor_initializer_opt -> constructor_initializer .)


state 465

    (336) constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt .

    STMT_TERMINATOR reduce using rule 336 (constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt .)
    LBRACE          reduce using rule 336 (constructor_declarator -> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN constructor_initializer_opt .)


state 466

    (422) constructor_initializer_opt -> empty .

    STMT_TERMINATOR reduce using rule 422 (constructor_initializer_opt -> empty .)
    LBRACE          reduce using rule 422 (constructor_initializer_opt -> empty .)


state 467

    (337) constructor_initializer -> COLON . BASE LPAREN argument_list_opt RPAREN
    (338) constructor_initializer -> COLON . THIS LPAREN argument_list_opt RPAREN

    BASE            shift and go to state 571
    THIS            shift and go to state 570


state 468

    (384) for_initializer_opt -> empty .

    STMT_TERMINATOR reduce using rule 384 (for_initializer_opt -> empty .)


state 469

    (259) for_statement -> FOR LPAREN for_initializer_opt . STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement

    STMT_TERMINATOR shift and go to state 572


state 470

    (385) for_initializer_opt -> for_initializer .

    STMT_TERMINATOR reduce using rule 385 (for_initializer_opt -> for_initializer .)


state 471

    (261) for_initializer -> statement_expression_list .
    (263) statement_expression_list -> statement_expression_list . COMMA statement_expression

    STMT_TERMINATOR reduce using rule 261 (for_initializer -> statement_expression_list .)
    COMMA           shift and go to state 573


state 472

    (260) for_initializer -> local_variable_declaration .

    STMT_TERMINATOR reduce using rule 260 (for_initializer -> local_variable_declaration .)


state 473

    (262) statement_expression_list -> statement_expression .

    COMMA           reduce using rule 262 (statement_expression_list -> statement_expression .)
    RPAREN          reduce using rule 262 (statement_expression_list -> statement_expression .)
    STMT_TERMINATOR reduce using rule 262 (statement_expression_list -> statement_expression .)


state 474

    (138) base_access -> BASE LBRACKET argument_list . RBRACKET
    (132) argument_list -> argument_list . COMMA argument

    RBRACKET        shift and go to state 575
    COMMA           shift and go to state 574


state 475

    (407) argument_name_opt -> argument_name .

    PLUS            reduce using rule 407 (argument_name_opt -> argument_name .)
    MINUS           reduce using rule 407 (argument_name_opt -> argument_name .)
    LNOT            reduce using rule 407 (argument_name_opt -> argument_name .)
    NOT             reduce using rule 407 (argument_name_opt -> argument_name .)
    INCREMENT       reduce using rule 407 (argument_name_opt -> argument_name .)
    DECREMENT       reduce using rule 407 (argument_name_opt -> argument_name .)
    LPAREN          reduce using rule 407 (argument_name_opt -> argument_name .)
    NEW             reduce using rule 407 (argument_name_opt -> argument_name .)
    IDENTIFIER      reduce using rule 407 (argument_name_opt -> argument_name .)
    INTCONST        reduce using rule 407 (argument_name_opt -> argument_name .)
    STRCONST        reduce using rule 407 (argument_name_opt -> argument_name .)
    CHCONST         reduce using rule 407 (argument_name_opt -> argument_name .)
    THIS            reduce using rule 407 (argument_name_opt -> argument_name .)
    BASE            reduce using rule 407 (argument_name_opt -> argument_name .)
    TYPEOF          reduce using rule 407 (argument_name_opt -> argument_name .)
    DEFAULT         reduce using rule 407 (argument_name_opt -> argument_name .)
    DELEGATE        reduce using rule 407 (argument_name_opt -> argument_name .)
    BOOL            reduce using rule 407 (argument_name_opt -> argument_name .)
    BYTE            reduce using rule 407 (argument_name_opt -> argument_name .)
    CHAR            reduce using rule 407 (argument_name_opt -> argument_name .)
    DECIMAL         reduce using rule 407 (argument_name_opt -> argument_name .)
    DOUBLE          reduce using rule 407 (argument_name_opt -> argument_name .)
    FLOAT           reduce using rule 407 (argument_name_opt -> argument_name .)
    INT             reduce using rule 407 (argument_name_opt -> argument_name .)
    LONG            reduce using rule 407 (argument_name_opt -> argument_name .)
    OBJECT          reduce using rule 407 (argument_name_opt -> argument_name .)
    SBYTE           reduce using rule 407 (argument_name_opt -> argument_name .)
    SHORT           reduce using rule 407 (argument_name_opt -> argument_name .)
    STRING          reduce using rule 407 (argument_name_opt -> argument_name .)
    UINT            reduce using rule 407 (argument_name_opt -> argument_name .)
    ULONG           reduce using rule 407 (argument_name_opt -> argument_name .)
    USHORT          reduce using rule 407 (argument_name_opt -> argument_name .)


state 476

    (406) argument_name_opt -> empty .

    PLUS            reduce using rule 406 (argument_name_opt -> empty .)
    MINUS           reduce using rule 406 (argument_name_opt -> empty .)
    LNOT            reduce using rule 406 (argument_name_opt -> empty .)
    NOT             reduce using rule 406 (argument_name_opt -> empty .)
    INCREMENT       reduce using rule 406 (argument_name_opt -> empty .)
    DECREMENT       reduce using rule 406 (argument_name_opt -> empty .)
    LPAREN          reduce using rule 406 (argument_name_opt -> empty .)
    NEW             reduce using rule 406 (argument_name_opt -> empty .)
    IDENTIFIER      reduce using rule 406 (argument_name_opt -> empty .)
    INTCONST        reduce using rule 406 (argument_name_opt -> empty .)
    STRCONST        reduce using rule 406 (argument_name_opt -> empty .)
    CHCONST         reduce using rule 406 (argument_name_opt -> empty .)
    THIS            reduce using rule 406 (argument_name_opt -> empty .)
    BASE            reduce using rule 406 (argument_name_opt -> empty .)
    TYPEOF          reduce using rule 406 (argument_name_opt -> empty .)
    DEFAULT         reduce using rule 406 (argument_name_opt -> empty .)
    DELEGATE        reduce using rule 406 (argument_name_opt -> empty .)
    BOOL            reduce using rule 406 (argument_name_opt -> empty .)
    BYTE            reduce using rule 406 (argument_name_opt -> empty .)
    CHAR            reduce using rule 406 (argument_name_opt -> empty .)
    DECIMAL         reduce using rule 406 (argument_name_opt -> empty .)
    DOUBLE          reduce using rule 406 (argument_name_opt -> empty .)
    FLOAT           reduce using rule 406 (argument_name_opt -> empty .)
    INT             reduce using rule 406 (argument_name_opt -> empty .)
    LONG            reduce using rule 406 (argument_name_opt -> empty .)
    OBJECT          reduce using rule 406 (argument_name_opt -> empty .)
    SBYTE           reduce using rule 406 (argument_name_opt -> empty .)
    SHORT           reduce using rule 406 (argument_name_opt -> empty .)
    STRING          reduce using rule 406 (argument_name_opt -> empty .)
    UINT            reduce using rule 406 (argument_name_opt -> empty .)
    ULONG           reduce using rule 406 (argument_name_opt -> empty .)
    USHORT          reduce using rule 406 (argument_name_opt -> empty .)


state 477

    (131) argument_list -> argument .

    RBRACKET        reduce using rule 131 (argument_list -> argument .)
    COMMA           reduce using rule 131 (argument_list -> argument .)
    RPAREN          reduce using rule 131 (argument_list -> argument .)


state 478

    (133) argument -> argument_name_opt . argument_value
    (134) argument_value -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 576
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    argument_value                 shift and go to state 577
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    lambda_expression              shift and go to state 296
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 479

    (48) argument_name -> IDENTIFIER . COLON

    COLON           shift and go to state 578


state 480

    (137) base_access -> BASE MEMBERACCESS IDENTIFIER .

    LBRACKET        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    MEMBERACCESS    reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LPAREN          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    INCREMENT       reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    DECREMENT       reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    EQUALS          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    PLUSEQUAL       reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    MINUSEQUAL      reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    TIMESEQUAL      reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    DIVEQUAL        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    MODEQUAL        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    ANDEQUAL        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    OREQUAL         reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    XOREQUAL        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LAMBDADEC       reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    TIMES           reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    DIVIDE          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    MOD             reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    PLUS            reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    MINUS           reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LSHIFT          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    RSHIFT          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LT              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    GT              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    LE              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    GE              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    IS              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    AS              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    EQ              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    NE              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    AND             reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    XOR             reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    OR              reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    CAND            reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    CONDOP          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    COR             reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    COMMA           reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    RPAREN          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    RBRACE          reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    COLON           reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)
    RBRACKET        reduce using rule 137 (base_access -> BASE MEMBERACCESS IDENTIFIER .)


state 481

    (244) boolean_expression -> expression .

    RPAREN          reduce using rule 244 (boolean_expression -> expression .)
    STMT_TERMINATOR reduce using rule 244 (boolean_expression -> expression .)


state 482

    (257) while_statement -> WHILE LPAREN boolean_expression . RPAREN embedded_statement

    RPAREN          shift and go to state 579


state 483

    (205) local_constant_declaration -> CONST type constant_declarators .
    (207) constant_declarators -> constant_declarators . COMMA constant_declarator

    STMT_TERMINATOR reduce using rule 205 (local_constant_declaration -> CONST type constant_declarators .)
    COMMA           shift and go to state 422


state 484

    (171) typeof_expression -> TYPEOF LPAREN VOID . RPAREN

    RPAREN          shift and go to state 580


state 485

    (169) typeof_expression -> TYPEOF LPAREN type . RPAREN
    (36) non_array_type -> type .

    RPAREN          shift and go to state 581
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 486

    (172) unbound_type_name -> IDENTIFIER . generic_dimension_specifier_opt
    (173) unbound_type_name -> IDENTIFIER . DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt
    (5) namespace_or_type_name -> IDENTIFIER .
    (374) generic_dimension_specifier_opt -> . empty
    (375) generic_dimension_specifier_opt -> . generic_dimension_specifier
    (371) empty -> .
    (175) generic_dimension_specifier -> . < commas_opt >

  ! reduce/reduce conflict for RPAREN resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MEMBERACCESS resolved using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    DOUBLE_COLON    shift and go to state 583
    MEMBERACCESS    reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 5 (namespace_or_type_name -> IDENTIFIER .)
    <               shift and go to state 585

  ! RPAREN          [ reduce using rule 371 (empty -> .) ]
  ! MEMBERACCESS    [ reduce using rule 371 (empty -> .) ]

    generic_dimension_specifier    shift and go to state 582
    empty                          shift and go to state 584
    generic_dimension_specifier_opt shift and go to state 586

state 487

    (170) typeof_expression -> TYPEOF LPAREN unbound_type_name . RPAREN
    (174) unbound_type_name -> unbound_type_name . MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt

    RPAREN          shift and go to state 588
    MEMBERACCESS    shift and go to state 587


state 488

    (114) member_access -> predefined_type MEMBERACCESS IDENTIFIER .

    LBRACKET        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    MEMBERACCESS    reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LPAREN          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    INCREMENT       reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    DECREMENT       reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    EQUALS          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    PLUSEQUAL       reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    MINUSEQUAL      reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    TIMESEQUAL      reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    DIVEQUAL        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    MODEQUAL        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    ANDEQUAL        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    OREQUAL         reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    XOREQUAL        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LAMBDADEC       reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    TIMES           reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    DIVIDE          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    MOD             reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    PLUS            reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    MINUS           reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LSHIFT          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    RSHIFT          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LT              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    GT              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    LE              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    GE              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    IS              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    AS              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    EQ              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    NE              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    AND             reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    XOR             reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    OR              reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    CAND            reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    CONDOP          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    COR             reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    COMMA           reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    RPAREN          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    RBRACE          reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    COLON           reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)
    RBRACKET        reduce using rule 114 (member_access -> predefined_type MEMBERACCESS IDENTIFIER .)


state 489

    (275) return_statement -> RETURN expression_opt STMT_TERMINATOR .

    CONST           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LBRACE          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    IF              reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    SWITCH          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    WHILE           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DO              reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    FOR             reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    BREAK           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CONTINUE        reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    GOTO            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    RETURN          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    NEW             reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INCREMENT       reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DECREMENT       reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    PLUS            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    MINUS           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LNOT            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    NOT             reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    OBJECT          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    STRING          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LPAREN          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    BOOL            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INTCONST        reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    STRCONST        reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CHCONST         reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    THIS            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    BASE            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    TYPEOF          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DEFAULT         reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DELEGATE        reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DECIMAL         reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    BYTE            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CHAR            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    DOUBLE          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    FLOAT           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    INT             reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    LONG            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    SBYTE           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    SHORT           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    UINT            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    ULONG           reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    USHORT          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    RBRACE          reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    ELSE            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)
    CASE            reduce using rule 275 (return_statement -> RETURN expression_opt STMT_TERMINATOR .)


state 490

    (245) switch_statement -> SWITCH LPAREN expression . RPAREN switch_block

    RPAREN          shift and go to state 589


state 491

    (242) if_statement -> IF LPAREN boolean_expression . RPAREN embedded_statement
    (243) if_statement -> IF LPAREN boolean_expression . RPAREN embedded_statement ELSE embedded_statement

    RPAREN          shift and go to state 590


state 492

    (225) assignment -> unary_expression assignment_operator expression .

    STMT_TERMINATOR reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)
    COMMA           reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)
    RPAREN          reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)
    RBRACE          reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)
    COLON           reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)
    RBRACKET        reduce using rule 225 (assignment -> unary_expression assignment_operator expression .)


state 493

    (196) local_variable_declarator -> IDENTIFIER EQUALS . local_variable_initializer
    (197) local_variable_initializer -> . expression
    (198) local_variable_initializer -> . array_initializer
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 416
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 591
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    array_initializer              shift and go to state 593
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    local_variable_initializer     shift and go to state 592
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 494

    (194) local_variable_declarators -> local_variable_declarators COMMA . local_variable_declarator
    (195) local_variable_declarator -> . IDENTIFIER
    (196) local_variable_declarator -> . IDENTIFIER EQUALS local_variable_initializer

    IDENTIFIER      shift and go to state 371

    local_variable_declarator      shift and go to state 594

state 495

    (274) goto_statement -> GOTO DEFAULT STMT_TERMINATOR .

    CONST           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    LBRACE          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    IF              reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    SWITCH          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    WHILE           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DO              reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    FOR             reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    BREAK           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    CONTINUE        reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    GOTO            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    RETURN          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    NEW             reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    INCREMENT       reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DECREMENT       reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    PLUS            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    MINUS           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    LNOT            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    NOT             reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    OBJECT          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    STRING          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    LPAREN          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    BOOL            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    INTCONST        reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    STRCONST        reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    CHCONST         reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    THIS            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    BASE            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    TYPEOF          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DEFAULT         reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DELEGATE        reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DECIMAL         reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    BYTE            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    CHAR            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    DOUBLE          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    FLOAT           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    INT             reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    LONG            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    SBYTE           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    SHORT           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    UINT            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    ULONG           reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    USHORT          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    RBRACE          reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    ELSE            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)
    CASE            reduce using rule 274 (goto_statement -> GOTO DEFAULT STMT_TERMINATOR .)


state 496

    (272) goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .

    CONST           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    LBRACE          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    IF              reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    SWITCH          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    WHILE           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DO              reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    FOR             reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    BREAK           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    CONTINUE        reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    GOTO            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    RETURN          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    NEW             reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    INCREMENT       reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DECREMENT       reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    PLUS            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    MINUS           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    LNOT            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    NOT             reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    OBJECT          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    STRING          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    LPAREN          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    BOOL            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    INTCONST        reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    STRCONST        reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    CHCONST         reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    THIS            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    BASE            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    TYPEOF          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DEFAULT         reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DELEGATE        reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DECIMAL         reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    BYTE            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    CHAR            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    DOUBLE          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    FLOAT           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    INT             reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    LONG            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    SBYTE           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    SHORT           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    UINT            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    ULONG           reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    USHORT          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    RBRACE          reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    ELSE            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)
    CASE            reduce using rule 272 (goto_statement -> GOTO IDENTIFIER STMT_TERMINATOR .)


state 497

    (209) constant_expression -> expression .

    STMT_TERMINATOR reduce using rule 209 (constant_expression -> expression .)
    COMMA           reduce using rule 209 (constant_expression -> expression .)
    COLON           reduce using rule 209 (constant_expression -> expression .)
    RBRACE          reduce using rule 209 (constant_expression -> expression .)


state 498

    (273) goto_statement -> GOTO CASE constant_expression . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 595


state 499

    (112) parenthesized_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    MEMBERACCESS    reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LAMBDADEC       reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    IS              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    AS              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    CAND            reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    COR             reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    STMT_TERMINATOR reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 112 (parenthesized_expression -> LPAREN expression RPAREN .)


state 500

    (279) cast_expression -> LPAREN type RPAREN . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 236
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    pre_increment_expression       shift and go to state 310
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    pre_decrement_expression       shift and go to state 292
    delegate_creation_expression   shift and go to state 189
    unary_expression               shift and go to state 596
    array_creation_expression      shift and go to state 252
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308

state 501

    (113) member_access -> primary_expression MEMBERACCESS IDENTIFIER .

    LBRACKET        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    MEMBERACCESS    reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LPAREN          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    INCREMENT       reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    DECREMENT       reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    STMT_TERMINATOR reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    EQUALS          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    PLUSEQUAL       reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    MINUSEQUAL      reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    TIMESEQUAL      reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    DIVEQUAL        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    MODEQUAL        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    ANDEQUAL        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    OREQUAL         reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    XOREQUAL        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LAMBDADEC       reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    TIMES           reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    DIVIDE          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    MOD             reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    PLUS            reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    MINUS           reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LSHIFT          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    RSHIFT          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LT              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    GT              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    LE              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    GE              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    IS              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    AS              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    EQ              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    NE              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    AND             reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    XOR             reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    OR              reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    CAND            reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    CONDOP          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    COR             reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    COMMA           reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    RPAREN          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    RBRACE          reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    COLON           reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)
    RBRACKET        reduce using rule 113 (member_access -> primary_expression MEMBERACCESS IDENTIFIER .)


state 502

    (435) argument_list_opt -> argument_list .
    (132) argument_list -> argument_list . COMMA argument

    RPAREN          reduce using rule 435 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 574


state 503

    (434) argument_list_opt -> empty .
    (406) argument_name_opt -> empty .

    RPAREN          reduce using rule 434 (argument_list_opt -> empty .)
    PLUS            reduce using rule 406 (argument_name_opt -> empty .)
    MINUS           reduce using rule 406 (argument_name_opt -> empty .)
    LNOT            reduce using rule 406 (argument_name_opt -> empty .)
    NOT             reduce using rule 406 (argument_name_opt -> empty .)
    INCREMENT       reduce using rule 406 (argument_name_opt -> empty .)
    DECREMENT       reduce using rule 406 (argument_name_opt -> empty .)
    LPAREN          reduce using rule 406 (argument_name_opt -> empty .)
    NEW             reduce using rule 406 (argument_name_opt -> empty .)
    IDENTIFIER      reduce using rule 406 (argument_name_opt -> empty .)
    INTCONST        reduce using rule 406 (argument_name_opt -> empty .)
    STRCONST        reduce using rule 406 (argument_name_opt -> empty .)
    CHCONST         reduce using rule 406 (argument_name_opt -> empty .)
    THIS            reduce using rule 406 (argument_name_opt -> empty .)
    BASE            reduce using rule 406 (argument_name_opt -> empty .)
    TYPEOF          reduce using rule 406 (argument_name_opt -> empty .)
    DEFAULT         reduce using rule 406 (argument_name_opt -> empty .)
    DELEGATE        reduce using rule 406 (argument_name_opt -> empty .)
    BOOL            reduce using rule 406 (argument_name_opt -> empty .)
    BYTE            reduce using rule 406 (argument_name_opt -> empty .)
    CHAR            reduce using rule 406 (argument_name_opt -> empty .)
    DECIMAL         reduce using rule 406 (argument_name_opt -> empty .)
    DOUBLE          reduce using rule 406 (argument_name_opt -> empty .)
    FLOAT           reduce using rule 406 (argument_name_opt -> empty .)
    INT             reduce using rule 406 (argument_name_opt -> empty .)
    LONG            reduce using rule 406 (argument_name_opt -> empty .)
    OBJECT          reduce using rule 406 (argument_name_opt -> empty .)
    SBYTE           reduce using rule 406 (argument_name_opt -> empty .)
    SHORT           reduce using rule 406 (argument_name_opt -> empty .)
    STRING          reduce using rule 406 (argument_name_opt -> empty .)
    UINT            reduce using rule 406 (argument_name_opt -> empty .)
    ULONG           reduce using rule 406 (argument_name_opt -> empty .)
    USHORT          reduce using rule 406 (argument_name_opt -> empty .)


state 504

    (130) invocation_expression -> primary_expression LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 597


state 505

    (258) do_statement -> DO embedded_statement WHILE . LPAREN boolean_expression RPAREN STMT_TERMINATOR

    LPAREN          shift and go to state 598


state 506

    (178) default_value_expression -> DEFAULT LPAREN type . RPAREN
    (36) non_array_type -> type .

    RPAREN          shift and go to state 599
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 507

    (135) element_access -> primary_no_array_creation_expression LBRACKET argument_list . RBRACKET
    (132) argument_list -> argument_list . COMMA argument

    RBRACKET        shift and go to state 600
    COMMA           shift and go to state 574


state 508

    (404) explicit_anonymous_function_parameter_list_opt -> empty .

    RPAREN          reduce using rule 404 (explicit_anonymous_function_parameter_list_opt -> empty .)


state 509

    (183) explicit_anonymous_function_parameter -> type . IDENTIFIER
    (36) non_array_type -> type .

    IDENTIFIER      shift and go to state 558
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 510

    (179) anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .

    LBRACKET        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    MEMBERACCESS    reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LPAREN          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    INCREMENT       reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    DECREMENT       reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    TIMES           reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    DIVIDE          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    MOD             reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    PLUS            reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    MINUS           reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LSHIFT          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    RSHIFT          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LT              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    GT              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LE              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    GE              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    IS              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    AS              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    EQ              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    NE              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    AND             reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    XOR             reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    OR              reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    CAND            reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    CONDOP          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    COR             reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    COMMA           reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    RPAREN          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    STMT_TERMINATOR reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    RBRACE          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    COLON           reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    RBRACKET        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    EQUALS          reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    PLUSEQUAL       reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    MINUSEQUAL      reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    TIMESEQUAL      reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    DIVEQUAL        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    MODEQUAL        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    ANDEQUAL        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    OREQUAL         reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    XOREQUAL        reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LAMBDADEC       reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    RSHIFTEQUAL     reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)
    LSHIFTEQUAL     reduce using rule 179 (anonymous_method_expression -> DELEGATE explicit_anonymous_function_signature_opt block .)


state 511

    (276) array_creation_expression -> NEW non_array_type LBRACKET . expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (39) rank_specifier -> LBRACKET . dim_separators_opt RBRACKET
    (158) expression_list -> . expression
    (159) expression_list -> . expression_list COMMA expression
    (420) dim_separators_opt -> . empty
    (421) dim_separators_opt -> . dim_separators
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (371) empty -> .
    (43) dim_separators -> . COMMA
    (44) dim_separators -> . dim_separators COMMA
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RBRACKET        reduce using rule 371 (empty -> .)
    COMMA           shift and go to state 155
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    conditional_expression         shift and go to state 291
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    dim_separators                 shift and go to state 152
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    empty                          shift and go to state 153
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 601
    expression_list                shift and go to state 602
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    dim_separators_opt             shift and go to state 154
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 512

    (278) array_creation_expression -> NEW rank_specifier array_initializer .

    MEMBERACCESS    reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LPAREN          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    INCREMENT       reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    DECREMENT       reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    EQUALS          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    PLUSEQUAL       reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    MINUSEQUAL      reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    TIMESEQUAL      reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    DIVEQUAL        reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    MODEQUAL        reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    ANDEQUAL        reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    OREQUAL         reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    XOREQUAL        reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LAMBDADEC       reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    RSHIFTEQUAL     reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LSHIFTEQUAL     reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    TIMES           reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    DIVIDE          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    MOD             reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    PLUS            reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    MINUS           reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LSHIFT          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    RSHIFT          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LT              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    GT              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    LE              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    GE              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    IS              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    AS              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    EQ              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    NE              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    AND             reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    XOR             reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    OR              reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    CAND            reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    CONDOP          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    COR             reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    STMT_TERMINATOR reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    COMMA           reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    RPAREN          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    RBRACE          reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    COLON           reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)
    RBRACKET        reduce using rule 278 (array_creation_expression -> NEW rank_specifier array_initializer .)


state 513

    (277) array_creation_expression -> NEW array_type array_initializer .

    MEMBERACCESS    reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LPAREN          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    INCREMENT       reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    DECREMENT       reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    EQUALS          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    PLUSEQUAL       reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    MINUSEQUAL      reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    TIMESEQUAL      reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    DIVEQUAL        reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    MODEQUAL        reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    ANDEQUAL        reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    OREQUAL         reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    XOREQUAL        reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LAMBDADEC       reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    RSHIFTEQUAL     reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LSHIFTEQUAL     reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    TIMES           reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    DIVIDE          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    MOD             reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    PLUS            reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    MINUS           reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LSHIFT          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    RSHIFT          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LT              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    GT              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    LE              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    GE              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    IS              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    AS              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    EQ              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    NE              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    AND             reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    XOR             reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    OR              reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    CAND            reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    CONDOP          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    COR             reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    STMT_TERMINATOR reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    COMMA           reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    RPAREN          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    RBRACE          reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    COLON           reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)
    RBRACKET        reduce using rule 277 (array_creation_expression -> NEW array_type array_initializer .)


state 514

    (160) delegate_creation_expression -> NEW delegate_type LPAREN . expression RPAREN
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    conditional_expression         shift and go to state 291
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 603
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 515

    (144) object_or_collection_initializer -> collection_initializer .

    STMT_TERMINATOR reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LBRACKET        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LPAREN          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    INCREMENT       reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    DECREMENT       reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    MEMBERACCESS    reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    EQUALS          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    PLUSEQUAL       reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    MINUSEQUAL      reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    TIMESEQUAL      reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    DIVEQUAL        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    MODEQUAL        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    ANDEQUAL        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    OREQUAL         reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    XOREQUAL        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LAMBDADEC       reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    RSHIFTEQUAL     reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LSHIFTEQUAL     reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    TIMES           reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    DIVIDE          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    MOD             reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    PLUS            reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    MINUS           reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LSHIFT          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    RSHIFT          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LT              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    GT              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    LE              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    GE              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    IS              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    AS              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    EQ              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    NE              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    AND             reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    XOR             reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    OR              reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    CAND            reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    CONDOP          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    COR             reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    COMMA           reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    RPAREN          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    RBRACE          reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    COLON           reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)
    RBRACKET        reduce using rule 144 (object_or_collection_initializer -> collection_initializer .)


state 516

    (143) object_or_collection_initializer -> object_initializer .

    STMT_TERMINATOR reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LBRACKET        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LPAREN          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    INCREMENT       reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    DECREMENT       reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    MEMBERACCESS    reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    EQUALS          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    PLUSEQUAL       reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    MINUSEQUAL      reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    TIMESEQUAL      reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    DIVEQUAL        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    MODEQUAL        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    ANDEQUAL        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    OREQUAL         reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    XOREQUAL        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LAMBDADEC       reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    RSHIFTEQUAL     reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LSHIFTEQUAL     reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    TIMES           reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    DIVIDE          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    MOD             reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    PLUS            reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    MINUS           reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LSHIFT          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    RSHIFT          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LT              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    GT              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    LE              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    GE              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    IS              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    AS              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    EQ              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    NE              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    AND             reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    XOR             reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    OR              reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    CAND            reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    CONDOP          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    COR             reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    COMMA           reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    RPAREN          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    RBRACE          reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    COLON           reduce using rule 143 (object_or_collection_initializer -> object_initializer .)
    RBRACKET        reduce using rule 143 (object_or_collection_initializer -> object_initializer .)


state 517

    (145) object_initializer -> LBRACE . member_initializer_list_opt RBRACE
    (146) object_initializer -> LBRACE . member_initializer_list COMMA RBRACE
    (152) collection_initializer -> LBRACE . element_initializer_list RBRACE
    (153) collection_initializer -> LBRACE . element_initializer_list COMMA RBRACE
    (424) member_initializer_list_opt -> . empty
    (425) member_initializer_list_opt -> . member_initializer_list
    (147) member_initializer_list -> . member_initializer
    (148) member_initializer_list -> . member_initializer_list COMMA member_initializer
    (154) element_initializer_list -> . element_initializer
    (155) element_initializer_list -> . element_initializer_list COMMA element_initializer
    (371) empty -> .
    (149) member_initializer -> . IDENTIFIER EQUALS initializer_value
    (156) element_initializer -> . non_assignment_expression
    (157) element_initializer -> . LBRACE expression_list RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    RBRACE          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 607
    LBRACE          shift and go to state 613
    LPAREN          shift and go to state 612
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    conditional_or_expression      shift and go to state 313
    non_assignment_expression      shift and go to state 604
    member_initializer_list_opt    shift and go to state 605
    relational_expression          shift and go to state 284
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    anonymous_function_signature   shift and go to state 273
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 299
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    primary_no_array_creation_expression shift and go to state 250
    element_access                 shift and go to state 209
    post_increment_expression      shift and go to state 281
    empty                          shift and go to state 608
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    member_initializer             shift and go to state 609
    typeof_expression              shift and go to state 176
    element_initializer            shift and go to state 606
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    additive_expression            shift and go to state 276
    post_decrement_expression      shift and go to state 316
    element_initializer_list       shift and go to state 610
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314
    member_initializer_list        shift and go to state 611

state 518

    (141) object_creation_expression -> NEW type LPAREN . argument_list_opt RPAREN object_or_collection_initializer_opt
    (434) argument_list_opt -> . empty
    (435) argument_list_opt -> . argument_list
    (371) empty -> .
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RPAREN          reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list                  shift and go to state 502
    argument_list_opt              shift and go to state 614
    argument_name                  shift and go to state 475
    empty                          shift and go to state 503
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 519

    (142) object_creation_expression -> NEW type object_or_collection_initializer .

    LBRACKET        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    MEMBERACCESS    reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LPAREN          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    INCREMENT       reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    DECREMENT       reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    EQUALS          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    PLUSEQUAL       reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    MINUSEQUAL      reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    TIMESEQUAL      reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    DIVEQUAL        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    MODEQUAL        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    ANDEQUAL        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    OREQUAL         reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    XOREQUAL        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LAMBDADEC       reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    RSHIFTEQUAL     reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LSHIFTEQUAL     reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    TIMES           reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    DIVIDE          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    MOD             reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    PLUS            reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    MINUS           reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LSHIFT          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    RSHIFT          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LT              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    GT              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    LE              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    GE              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    IS              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    AS              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    EQ              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    NE              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    AND             reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    XOR             reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    OR              reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    CAND            reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    CONDOP          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    COR             reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    STMT_TERMINATOR reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    COMMA           reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    RPAREN          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    RBRACE          reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    COLON           reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)
    RBRACKET        reduce using rule 142 (object_creation_expression -> NEW type object_or_collection_initializer .)


state 520

    (163) anonymous_object_initializer -> LBRACE member_declarator_list . COMMA RBRACE
    (401) member_declarator_list_opt -> member_declarator_list .
    (165) member_declarator_list -> member_declarator_list . COMMA member_declarator

    COMMA           shift and go to state 615
    RBRACE          reduce using rule 401 (member_declarator_list_opt -> member_declarator_list .)


state 521

    (167) member_declarator -> member_access .
    (98) primary_no_array_creation_expression -> member_access .

    COMMA           reduce using rule 167 (member_declarator -> member_access .)
    RBRACE          reduce using rule 167 (member_declarator -> member_access .)
    LBRACKET        reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    MEMBERACCESS    reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    LPAREN          reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    INCREMENT       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)
    DECREMENT       reduce using rule 98 (primary_no_array_creation_expression -> member_access .)


state 522

    (168) member_declarator -> IDENTIFIER . EQUALS expression
    (111) simple_name -> IDENTIFIER .

    EQUALS          shift and go to state 616
    COMMA           reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 111 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)


state 523

    (164) member_declarator_list -> member_declarator .

    COMMA           reduce using rule 164 (member_declarator_list -> member_declarator .)
    RBRACE          reduce using rule 164 (member_declarator_list -> member_declarator .)


state 524

    (113) member_access -> primary_expression . MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> primary_expression . LPAREN argument_list_opt RPAREN
    (139) post_increment_expression -> primary_expression . INCREMENT
    (140) post_decrement_expression -> primary_expression . DECREMENT

    MEMBERACCESS    shift and go to state 393
    LPAREN          shift and go to state 395
    INCREMENT       shift and go to state 394
    DECREMENT       shift and go to state 392


state 525

    (400) member_declarator_list_opt -> empty .

    RBRACE          reduce using rule 400 (member_declarator_list_opt -> empty .)


state 526

    (112) parenthesized_expression -> LPAREN . expression RPAREN
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 380
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 527

    (162) anonymous_object_initializer -> LBRACE member_declarator_list_opt . RBRACE

    RBRACE          shift and go to state 617


state 528

    (166) member_declarator -> simple_name .
    (96) primary_no_array_creation_expression -> simple_name .

    COMMA           reduce using rule 166 (member_declarator -> simple_name .)
    RBRACE          reduce using rule 166 (member_declarator -> simple_name .)
    LBRACKET        reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    MEMBERACCESS    reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    LPAREN          reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    INCREMENT       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)
    DECREMENT       reduce using rule 96 (primary_no_array_creation_expression -> simple_name .)


state 529

    (321) method_header -> return_type member_name LPAREN formal_parameter_list_opt RPAREN .

    STMT_TERMINATOR reduce using rule 321 (method_header -> return_type member_name LPAREN formal_parameter_list_opt RPAREN .)
    LBRACE          reduce using rule 321 (method_header -> return_type member_name LPAREN formal_parameter_list_opt RPAREN .)


state 530

    (398) variable_initializer_list_opt -> empty .

    RBRACE          reduce using rule 398 (variable_initializer_list_opt -> empty .)


state 531

    (200) array_initializer -> LBRACE variable_initializer_list . COMMA RBRACE
    (399) variable_initializer_list_opt -> variable_initializer_list .
    (202) variable_initializer_list -> variable_initializer_list . COMMA variable_initializer

    COMMA           shift and go to state 618
    RBRACE          reduce using rule 399 (variable_initializer_list_opt -> variable_initializer_list .)


state 532

    (199) array_initializer -> LBRACE variable_initializer_list_opt . RBRACE

    RBRACE          shift and go to state 619


state 533

    (201) variable_initializer_list -> variable_initializer .

    COMMA           reduce using rule 201 (variable_initializer_list -> variable_initializer .)
    RBRACE          reduce using rule 201 (variable_initializer_list -> variable_initializer .)


state 534

    (208) constant_declarator -> IDENTIFIER EQUALS constant_expression .

    STMT_TERMINATOR reduce using rule 208 (constant_declarator -> IDENTIFIER EQUALS constant_expression .)
    COMMA           reduce using rule 208 (constant_declarator -> IDENTIFIER EQUALS constant_expression .)


state 535

    (207) constant_declarators -> constant_declarators COMMA constant_declarator .

    COMMA           reduce using rule 207 (constant_declarators -> constant_declarators COMMA constant_declarator .)
    STMT_TERMINATOR reduce using rule 207 (constant_declarators -> constant_declarators COMMA constant_declarator .)


state 536

    (367) enum_member_declaration -> IDENTIFIER EQUALS constant_expression .

    COMMA           reduce using rule 367 (enum_member_declaration -> IDENTIFIER EQUALS constant_expression .)
    RBRACE          reduce using rule 367 (enum_member_declaration -> IDENTIFIER EQUALS constant_expression .)


state 537

    (365) enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration .

    COMMA           reduce using rule 365 (enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration .)
    RBRACE          reduce using rule 365 (enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration .)


state 538

    (363) enum_body -> LBRACE enum_member_declarations COMMA RBRACE .

    STMT_TERMINATOR reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    NAMESPACE       reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    CLASS           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    STRUCT          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    ENUM            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    DELEGATE        reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    IDENTIFIER      reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    LPAREN          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    LBRACE          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    $end            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    CONST           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    STATIC          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    VOID            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    EXTERN          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    OBJECT          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    STRING          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    BOOL            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    DECIMAL         reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    SBYTE           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    BYTE            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    SHORT           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    USHORT          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    INT             reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    UINT            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    LONG            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    ULONG           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    CHAR            reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    FLOAT           reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    DOUBLE          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    RBRACE          reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)
    NOT             reduce using rule 363 (enum_body -> LBRACE enum_member_declarations COMMA RBRACE .)


state 539

    (288) anonymous_function_body -> expression .

    STMT_TERMINATOR reduce using rule 288 (anonymous_function_body -> expression .)
    COMMA           reduce using rule 288 (anonymous_function_body -> expression .)
    RPAREN          reduce using rule 288 (anonymous_function_body -> expression .)
    RBRACE          reduce using rule 288 (anonymous_function_body -> expression .)
    COLON           reduce using rule 288 (anonymous_function_body -> expression .)
    RBRACKET        reduce using rule 288 (anonymous_function_body -> expression .)


state 540

    (280) lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .

    RBRACE          reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)
    COMMA           reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)
    STMT_TERMINATOR reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)
    RBRACKET        reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)
    RPAREN          reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)
    COLON           reduce using rule 280 (lambda_expression -> anonymous_function_signature LAMBDADEC anonymous_function_body .)


state 541

    (289) anonymous_function_body -> block .

    STMT_TERMINATOR reduce using rule 289 (anonymous_function_body -> block .)
    COMMA           reduce using rule 289 (anonymous_function_body -> block .)
    RPAREN          reduce using rule 289 (anonymous_function_body -> block .)
    RBRACE          reduce using rule 289 (anonymous_function_body -> block .)
    COLON           reduce using rule 289 (anonymous_function_body -> block .)
    RBRACKET        reduce using rule 289 (anonymous_function_body -> block .)


state 542

    (81) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 81 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    IS              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    AS              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 81 (multiplicative_expression -> unary_expression .)
    CAND            reduce using rule 81 (multiplicative_expression -> unary_expression .)
    CONDOP          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COR             reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    STMT_TERMINATOR reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 81 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 81 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 81 (multiplicative_expression -> unary_expression .)


state 543

    (80) additive_expression -> additive_expression MINUS multiplicative_expression .
    (82) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (83) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (84) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IS              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AS              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CAND            reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COR             reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 80 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 436
    DIVIDE          shift and go to state 435
    MOD             shift and go to state 437


state 544

    (79) additive_expression -> additive_expression PLUS multiplicative_expression .
    (82) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (83) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (84) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AS              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CAND            reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COR             reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STMT_TERMINATOR reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 79 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 436
    DIVIDE          shift and go to state 435
    MOD             shift and go to state 437


state 545

    (70) relational_expression -> relational_expression GT shift_expression .
    (76) shift_expression -> shift_expression . LSHIFT additive_expression
    (77) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    IS              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    AS              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    CAND            reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    CONDOP          reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    COR             reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    STMT_TERMINATOR reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 70 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 452
    RSHIFT          shift and go to state 453


state 546

    (69) relational_expression -> relational_expression LT shift_expression .
    (76) shift_expression -> shift_expression . LSHIFT additive_expression
    (77) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    IS              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    AS              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    CAND            reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    CONDOP          reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    COR             reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    STMT_TERMINATOR reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 69 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 452
    RSHIFT          shift and go to state 453


state 547

    (73) relational_expression -> relational_expression IS type .
    (36) non_array_type -> type .

    LT              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    GT              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    LE              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    GE              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    IS              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    AS              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    EQ              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    NE              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    AND             reduce using rule 73 (relational_expression -> relational_expression IS type .)
    XOR             reduce using rule 73 (relational_expression -> relational_expression IS type .)
    OR              reduce using rule 73 (relational_expression -> relational_expression IS type .)
    CAND            reduce using rule 73 (relational_expression -> relational_expression IS type .)
    CONDOP          reduce using rule 73 (relational_expression -> relational_expression IS type .)
    COR             reduce using rule 73 (relational_expression -> relational_expression IS type .)
    COMMA           reduce using rule 73 (relational_expression -> relational_expression IS type .)
    RBRACE          reduce using rule 73 (relational_expression -> relational_expression IS type .)
    STMT_TERMINATOR reduce using rule 73 (relational_expression -> relational_expression IS type .)
    RPAREN          reduce using rule 73 (relational_expression -> relational_expression IS type .)
    COLON           reduce using rule 73 (relational_expression -> relational_expression IS type .)
    RBRACKET        reduce using rule 73 (relational_expression -> relational_expression IS type .)
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 548

    (74) relational_expression -> relational_expression AS type .
    (36) non_array_type -> type .

    LT              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    GT              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    LE              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    GE              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    IS              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    AS              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    EQ              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    NE              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    AND             reduce using rule 74 (relational_expression -> relational_expression AS type .)
    XOR             reduce using rule 74 (relational_expression -> relational_expression AS type .)
    OR              reduce using rule 74 (relational_expression -> relational_expression AS type .)
    CAND            reduce using rule 74 (relational_expression -> relational_expression AS type .)
    CONDOP          reduce using rule 74 (relational_expression -> relational_expression AS type .)
    COR             reduce using rule 74 (relational_expression -> relational_expression AS type .)
    COMMA           reduce using rule 74 (relational_expression -> relational_expression AS type .)
    RBRACE          reduce using rule 74 (relational_expression -> relational_expression AS type .)
    STMT_TERMINATOR reduce using rule 74 (relational_expression -> relational_expression AS type .)
    RPAREN          reduce using rule 74 (relational_expression -> relational_expression AS type .)
    COLON           reduce using rule 74 (relational_expression -> relational_expression AS type .)
    RBRACKET        reduce using rule 74 (relational_expression -> relational_expression AS type .)
    LBRACKET        reduce using rule 36 (non_array_type -> type .)


state 549

    (72) relational_expression -> relational_expression GE shift_expression .
    (76) shift_expression -> shift_expression . LSHIFT additive_expression
    (77) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    IS              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    AS              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    CAND            reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    CONDOP          reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    COR             reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    STMT_TERMINATOR reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 72 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 452
    RSHIFT          shift and go to state 453


state 550

    (71) relational_expression -> relational_expression LE shift_expression .
    (76) shift_expression -> shift_expression . LSHIFT additive_expression
    (77) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    IS              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    AS              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    CAND            reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    CONDOP          reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    COR             reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    STMT_TERMINATOR reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 71 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 452
    RSHIFT          shift and go to state 453


state 551

    (83) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LE              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GE              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IS              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AS              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NE              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CAND            reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CONDOP          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COR             reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACE          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STMT_TERMINATOR reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COLON           reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 83 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 552

    (82) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LT              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GT              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LE              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GE              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IS              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AS              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQ              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NE              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    CAND            reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    CONDOP          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COR             reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACE          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STMT_TERMINATOR reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COLON           reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 82 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 553

    (84) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LSHIFT          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RSHIFT          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LT              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GT              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LE              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GE              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IS              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AS              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQ              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    NE              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CAND            reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    CONDOP          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COR             reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACE          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    STMT_TERMINATOR reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COLON           reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 84 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 554

    (64) and_expression -> and_expression AND equality_expression .
    (66) equality_expression -> equality_expression . EQ relational_expression
    (67) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    CAND            reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    COR             reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    STMT_TERMINATOR reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 64 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 451
    NE              shift and go to state 450


state 555

    (58) conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .
    (60) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    CAND            reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    CONDOP          reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    COR             reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RBRACE          reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    COMMA           reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RBRACKET        reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    RPAREN          reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    COLON           reduce using rule 58 (conditional_and_expression -> conditional_and_expression CAND inclusive_or_expression .)
    OR              shift and go to state 440


state 556

    (60) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (62) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CAND            reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COR             reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    STMT_TERMINATOR reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 60 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 454


state 557

    (182) explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list COMMA . explicit_anonymous_function_parameter
    (183) explicit_anonymous_function_parameter -> . type IDENTIFIER
    (7) type -> . value_type
    (8) type -> . reference_type
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    OBJECT          shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 39
    IDENTIFIER      shift and go to state 9
    DECIMAL         shift and go to state 67
    SBYTE           shift and go to state 45
    BYTE            shift and go to state 66
    SHORT           shift and go to state 64
    USHORT          shift and go to state 52
    INT             shift and go to state 46
    UINT            shift and go to state 63
    LONG            shift and go to state 55
    ULONG           shift and go to state 47
    CHAR            shift and go to state 35
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 65

    array_type                     shift and go to state 53
    explicit_anonymous_function_parameter shift and go to state 620
    non_array_type                 shift and go to state 58
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    numeric_type                   shift and go to state 38
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    struct_type                    shift and go to state 42
    simple_type                    shift and go to state 40
    type                           shift and go to state 509
    floating_point_type            shift and go to state 70
    value_type                     shift and go to state 68
    type_name                      shift and go to state 50
    class_type                     shift and go to state 59

state 558

    (183) explicit_anonymous_function_parameter -> type IDENTIFIER .

    COMMA           reduce using rule 183 (explicit_anonymous_function_parameter -> type IDENTIFIER .)
    RPAREN          reduce using rule 183 (explicit_anonymous_function_parameter -> type IDENTIFIER .)


state 559

    (180) explicit_anonymous_function_signature -> LPAREN explicit_anonymous_function_parameter_list_opt RPAREN .

    LAMBDADEC       reduce using rule 180 (explicit_anonymous_function_signature -> LPAREN explicit_anonymous_function_parameter_list_opt RPAREN .)
    LBRACE          reduce using rule 180 (explicit_anonymous_function_signature -> LPAREN explicit_anonymous_function_parameter_list_opt RPAREN .)


state 560

    (286) implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list COMMA . implicit_anonymous_function_parameter
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER

    IDENTIFIER      shift and go to state 621

    implicit_anonymous_function_parameter shift and go to state 622

state 561

    (283) implicit_anonymous_function_signature -> LPAREN implicit_anonymous_function_parameter_list_opt RPAREN .

    LAMBDADEC       reduce using rule 283 (implicit_anonymous_function_signature -> LPAREN implicit_anonymous_function_parameter_list_opt RPAREN .)


state 562

    (67) equality_expression -> equality_expression NE relational_expression .
    (69) relational_expression -> relational_expression . LT shift_expression
    (70) relational_expression -> relational_expression . GT shift_expression
    (71) relational_expression -> relational_expression . LE shift_expression
    (72) relational_expression -> relational_expression . GE shift_expression
    (73) relational_expression -> relational_expression . IS type
    (74) relational_expression -> relational_expression . AS type

    EQ              reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    CAND            reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    CONDOP          reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    COR             reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    STMT_TERMINATOR reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 67 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 430
    GT              shift and go to state 429
    LE              shift and go to state 434
    GE              shift and go to state 433
    IS              shift and go to state 431
    AS              shift and go to state 432


state 563

    (66) equality_expression -> equality_expression EQ relational_expression .
    (69) relational_expression -> relational_expression . LT shift_expression
    (70) relational_expression -> relational_expression . GT shift_expression
    (71) relational_expression -> relational_expression . LE shift_expression
    (72) relational_expression -> relational_expression . GE shift_expression
    (73) relational_expression -> relational_expression . IS type
    (74) relational_expression -> relational_expression . AS type

    EQ              reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    CAND            reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    CONDOP          reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    COR             reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    STMT_TERMINATOR reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 66 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 430
    GT              shift and go to state 429
    LE              shift and go to state 434
    GE              shift and go to state 433
    IS              shift and go to state 431
    AS              shift and go to state 432


state 564

    (76) shift_expression -> shift_expression LSHIFT additive_expression .
    (79) additive_expression -> additive_expression . PLUS multiplicative_expression
    (80) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    IS              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AS              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CAND            reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COR             reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STMT_TERMINATOR reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 76 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 428
    MINUS           shift and go to state 427


state 565

    (77) shift_expression -> shift_expression RSHIFT additive_expression .
    (79) additive_expression -> additive_expression . PLUS multiplicative_expression
    (80) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    IS              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AS              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CAND            reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COR             reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STMT_TERMINATOR reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 77 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 428
    MINUS           shift and go to state 427


state 566

    (62) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (64) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CAND            reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COR             reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STMT_TERMINATOR reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 62 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 438


state 567

    (56) conditional_or_expression -> conditional_or_expression COR conditional_and_expression .
    (58) conditional_and_expression -> conditional_and_expression . CAND inclusive_or_expression

    CONDOP          reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    COR             reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RBRACE          reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    COMMA           reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RPAREN          reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    COLON           reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    STMT_TERMINATOR reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    RBRACKET        reduce using rule 56 (conditional_or_expression -> conditional_or_expression COR conditional_and_expression .)
    CAND            shift and go to state 439


state 568

    (54) conditional_expression -> conditional_or_expression CONDOP expression . COLON expression

    COLON           shift and go to state 623


state 569

    (341) destructor_declaration -> extern_opt NOT IDENTIFIER . LPAREN RPAREN destructor_body

    LPAREN          shift and go to state 624


state 570

    (338) constructor_initializer -> COLON THIS . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 625


state 571

    (337) constructor_initializer -> COLON BASE . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 626


state 572

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR . for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (410) for_condition_opt -> . empty
    (411) for_condition_opt -> . for_condition
    (371) empty -> .
    (264) for_condition -> . boolean_expression
    (244) boolean_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    conditional_expression         shift and go to state 291
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    for_condition                  shift and go to state 627
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    empty                          shift and go to state 628
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 481
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    boolean_expression             shift and go to state 630
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    for_condition_opt              shift and go to state 629
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 573

    (263) statement_expression_list -> statement_expression_list COMMA . statement_expression
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    element_access                 shift and go to state 209
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 631
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    this_access                    shift and go to state 251

state 574

    (132) argument_list -> argument_list COMMA . argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (371) empty -> .
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_name                  shift and go to state 475
    empty                          shift and go to state 476
    argument                       shift and go to state 632
    argument_name_opt              shift and go to state 478

state 575

    (138) base_access -> BASE LBRACKET argument_list RBRACKET .

    LBRACKET        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    MEMBERACCESS    reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LPAREN          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    INCREMENT       reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    DECREMENT       reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    STMT_TERMINATOR reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    EQUALS          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    PLUSEQUAL       reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    MINUSEQUAL      reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    TIMESEQUAL      reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    DIVEQUAL        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    MODEQUAL        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    ANDEQUAL        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    OREQUAL         reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    XOREQUAL        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LAMBDADEC       reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    RSHIFTEQUAL     reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LSHIFTEQUAL     reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    TIMES           reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    DIVIDE          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    MOD             reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    PLUS            reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    MINUS           reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LSHIFT          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    RSHIFT          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LT              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    GT              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    LE              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    GE              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    IS              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    AS              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    EQ              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    NE              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    AND             reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    XOR             reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    OR              reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    CAND            reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    CONDOP          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    COR             reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    COMMA           reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    RPAREN          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    RBRACE          reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    COLON           reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)
    RBRACKET        reduce using rule 138 (base_access -> BASE LBRACKET argument_list RBRACKET .)


state 576

    (134) argument_value -> expression .

    RBRACKET        reduce using rule 134 (argument_value -> expression .)
    COMMA           reduce using rule 134 (argument_value -> expression .)
    RPAREN          reduce using rule 134 (argument_value -> expression .)


state 577

    (133) argument -> argument_name_opt argument_value .

    RBRACKET        reduce using rule 133 (argument -> argument_name_opt argument_value .)
    COMMA           reduce using rule 133 (argument -> argument_name_opt argument_value .)
    RPAREN          reduce using rule 133 (argument -> argument_name_opt argument_value .)


state 578

    (48) argument_name -> IDENTIFIER COLON .

    PLUS            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    MINUS           reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    LNOT            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    NOT             reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    INCREMENT       reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    DECREMENT       reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    LPAREN          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    NEW             reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    INTCONST        reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    STRCONST        reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    CHCONST         reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    THIS            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    BASE            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    TYPEOF          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    DEFAULT         reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    DELEGATE        reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    BOOL            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    BYTE            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    CHAR            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    DECIMAL         reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    DOUBLE          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    FLOAT           reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    INT             reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    LONG            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    OBJECT          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    SBYTE           reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    SHORT           reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    STRING          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    UINT            reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    ULONG           reduce using rule 48 (argument_name -> IDENTIFIER COLON .)
    USHORT          reduce using rule 48 (argument_name -> IDENTIFIER COLON .)


state 579

    (257) while_statement -> WHILE LPAREN boolean_expression RPAREN . embedded_statement
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    literal                        shift and go to state 221
    for_statement                  shift and go to state 223
    member_access                  shift and go to state 169
    switch_statement               shift and go to state 193
    selection_statement            shift and go to state 173
    base_access                    shift and go to state 226
    expression_statement           shift and go to state 175
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    delegate_creation_expression   shift and go to state 189
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    break_statement                shift and go to state 258
    do_statement                   shift and go to state 248
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    while_statement                shift and go to state 257
    block                          shift and go to state 200
    primary_no_array_creation_expression shift and go to state 250
    this_access                    shift and go to state 251
    simple_name                    shift and go to state 203
    empty_statement                shift and go to state 204
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    return_statement               shift and go to state 213
    jump_statement                 shift and go to state 214
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 633

state 580

    (171) typeof_expression -> TYPEOF LPAREN VOID RPAREN .

    LBRACKET        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    MEMBERACCESS    reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LPAREN          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    INCREMENT       reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    DECREMENT       reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    TIMES           reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    DIVIDE          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    MOD             reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    PLUS            reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    MINUS           reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LSHIFT          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    RSHIFT          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LT              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    GT              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LE              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    GE              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    IS              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    AS              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    EQ              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    NE              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    AND             reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    XOR             reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    OR              reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    CAND            reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    CONDOP          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    COR             reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    COMMA           reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    RPAREN          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    STMT_TERMINATOR reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    RBRACE          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    COLON           reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    RBRACKET        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    EQUALS          reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    PLUSEQUAL       reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    MINUSEQUAL      reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    TIMESEQUAL      reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    DIVEQUAL        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    MODEQUAL        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    ANDEQUAL        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    OREQUAL         reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    XOREQUAL        reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LAMBDADEC       reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    RSHIFTEQUAL     reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)
    LSHIFTEQUAL     reduce using rule 171 (typeof_expression -> TYPEOF LPAREN VOID RPAREN .)


state 581

    (169) typeof_expression -> TYPEOF LPAREN type RPAREN .

    LBRACKET        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    MEMBERACCESS    reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LPAREN          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    INCREMENT       reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    DECREMENT       reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    TIMES           reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    DIVIDE          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    MOD             reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    PLUS            reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    MINUS           reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LSHIFT          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    RSHIFT          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LT              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    GT              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LE              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    GE              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    IS              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    AS              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    EQ              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    NE              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    AND             reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    XOR             reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    OR              reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    CAND            reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    CONDOP          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    COR             reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    COMMA           reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    RPAREN          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    STMT_TERMINATOR reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    RBRACE          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    COLON           reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    RBRACKET        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    EQUALS          reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    PLUSEQUAL       reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    MINUSEQUAL      reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    TIMESEQUAL      reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    DIVEQUAL        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    MODEQUAL        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    ANDEQUAL        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    OREQUAL         reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    XOREQUAL        reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LAMBDADEC       reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    RSHIFTEQUAL     reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)
    LSHIFTEQUAL     reduce using rule 169 (typeof_expression -> TYPEOF LPAREN type RPAREN .)


state 582

    (375) generic_dimension_specifier_opt -> generic_dimension_specifier .

    RPAREN          reduce using rule 375 (generic_dimension_specifier_opt -> generic_dimension_specifier .)
    MEMBERACCESS    reduce using rule 375 (generic_dimension_specifier_opt -> generic_dimension_specifier .)


state 583

    (173) unbound_type_name -> IDENTIFIER DOUBLE_COLON . IDENTIFIER generic_dimension_specifier_opt

    IDENTIFIER      shift and go to state 634


state 584

    (374) generic_dimension_specifier_opt -> empty .

    RPAREN          reduce using rule 374 (generic_dimension_specifier_opt -> empty .)
    MEMBERACCESS    reduce using rule 374 (generic_dimension_specifier_opt -> empty .)


state 585

    (175) generic_dimension_specifier -> < . commas_opt >
    (428) commas_opt -> . empty
    (429) commas_opt -> . commas
    (371) empty -> .
    (176) commas -> . COMMA
    (177) commas -> . commas COMMA

    >               reduce using rule 371 (empty -> .)
    COMMA           shift and go to state 635

    commas_opt                     shift and go to state 636
    commas                         shift and go to state 638
    empty                          shift and go to state 637

state 586

    (172) unbound_type_name -> IDENTIFIER generic_dimension_specifier_opt .

    RPAREN          reduce using rule 172 (unbound_type_name -> IDENTIFIER generic_dimension_specifier_opt .)
    MEMBERACCESS    reduce using rule 172 (unbound_type_name -> IDENTIFIER generic_dimension_specifier_opt .)


state 587

    (174) unbound_type_name -> unbound_type_name MEMBERACCESS . IDENTIFIER generic_dimension_specifier_opt

    IDENTIFIER      shift and go to state 639


state 588

    (170) typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .

    LBRACKET        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    MEMBERACCESS    reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LPAREN          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    INCREMENT       reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    DECREMENT       reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    TIMES           reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    DIVIDE          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    MOD             reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    PLUS            reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    MINUS           reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LSHIFT          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    RSHIFT          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LT              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    GT              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LE              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    GE              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    IS              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    AS              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    EQ              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    NE              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    AND             reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    XOR             reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    OR              reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    CAND            reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    CONDOP          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    COR             reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    COMMA           reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    RPAREN          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    STMT_TERMINATOR reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    RBRACE          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    COLON           reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    RBRACKET        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    EQUALS          reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    PLUSEQUAL       reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    MINUSEQUAL      reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    TIMESEQUAL      reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    DIVEQUAL        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    MODEQUAL        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    ANDEQUAL        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    OREQUAL         reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    XOREQUAL        reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LAMBDADEC       reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 170 (typeof_expression -> TYPEOF LPAREN unbound_type_name RPAREN .)


state 589

    (245) switch_statement -> SWITCH LPAREN expression RPAREN . switch_block
    (246) switch_block -> . LBRACE switch_sections_opt RBRACE

    LBRACE          shift and go to state 640

    switch_block                   shift and go to state 641

state 590

    (242) if_statement -> IF LPAREN boolean_expression RPAREN . embedded_statement
    (243) if_statement -> IF LPAREN boolean_expression RPAREN . embedded_statement ELSE embedded_statement
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    literal                        shift and go to state 221
    for_statement                  shift and go to state 223
    member_access                  shift and go to state 169
    switch_statement               shift and go to state 193
    selection_statement            shift and go to state 173
    base_access                    shift and go to state 226
    expression_statement           shift and go to state 175
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    delegate_creation_expression   shift and go to state 189
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    break_statement                shift and go to state 258
    do_statement                   shift and go to state 248
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    while_statement                shift and go to state 257
    block                          shift and go to state 200
    primary_no_array_creation_expression shift and go to state 250
    this_access                    shift and go to state 251
    simple_name                    shift and go to state 203
    empty_statement                shift and go to state 204
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    return_statement               shift and go to state 213
    jump_statement                 shift and go to state 214
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 642

state 591

    (197) local_variable_initializer -> expression .

    COMMA           reduce using rule 197 (local_variable_initializer -> expression .)
    STMT_TERMINATOR reduce using rule 197 (local_variable_initializer -> expression .)


state 592

    (196) local_variable_declarator -> IDENTIFIER EQUALS local_variable_initializer .

    COMMA           reduce using rule 196 (local_variable_declarator -> IDENTIFIER EQUALS local_variable_initializer .)
    STMT_TERMINATOR reduce using rule 196 (local_variable_declarator -> IDENTIFIER EQUALS local_variable_initializer .)


state 593

    (198) local_variable_initializer -> array_initializer .

    COMMA           reduce using rule 198 (local_variable_initializer -> array_initializer .)
    STMT_TERMINATOR reduce using rule 198 (local_variable_initializer -> array_initializer .)


state 594

    (194) local_variable_declarators -> local_variable_declarators COMMA local_variable_declarator .

    COMMA           reduce using rule 194 (local_variable_declarators -> local_variable_declarators COMMA local_variable_declarator .)
    STMT_TERMINATOR reduce using rule 194 (local_variable_declarators -> local_variable_declarators COMMA local_variable_declarator .)


state 595

    (273) goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .

    CONST           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    LBRACE          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    IF              reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    SWITCH          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    WHILE           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DO              reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    FOR             reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    BREAK           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    CONTINUE        reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    GOTO            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    RETURN          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    NEW             reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    INCREMENT       reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DECREMENT       reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    PLUS            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    MINUS           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    LNOT            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    NOT             reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    OBJECT          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    STRING          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    LPAREN          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    BOOL            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    INTCONST        reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    STRCONST        reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    CHCONST         reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    THIS            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    BASE            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    TYPEOF          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DEFAULT         reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DELEGATE        reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DECIMAL         reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    BYTE            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    CHAR            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    DOUBLE          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    FLOAT           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    INT             reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    LONG            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    SBYTE           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    SHORT           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    UINT            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    ULONG           reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    USHORT          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    RBRACE          reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    ELSE            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)
    CASE            reduce using rule 273 (goto_statement -> GOTO CASE constant_expression STMT_TERMINATOR .)


state 596

    (279) cast_expression -> LPAREN type RPAREN unary_expression .

    EQUALS          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    PLUSEQUAL       reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    MINUSEQUAL      reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    TIMESEQUAL      reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    DIVEQUAL        reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    MODEQUAL        reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    ANDEQUAL        reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    OREQUAL         reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    XOREQUAL        reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    LAMBDADEC       reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    RSHIFTEQUAL     reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    LSHIFTEQUAL     reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    TIMES           reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    DIVIDE          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    MOD             reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    PLUS            reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    MINUS           reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    LSHIFT          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    RSHIFT          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    LT              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    GT              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    LE              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    GE              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    IS              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    AS              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    EQ              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    NE              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    AND             reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    XOR             reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    OR              reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    CAND            reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    CONDOP          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    COR             reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    RPAREN          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    RBRACE          reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    COMMA           reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    STMT_TERMINATOR reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    COLON           reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)
    RBRACKET        reduce using rule 279 (cast_expression -> LPAREN type RPAREN unary_expression .)


state 597

    (130) invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .

    LBRACKET        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    MEMBERACCESS    reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LPAREN          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    INCREMENT       reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    DECREMENT       reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    IS              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    AS              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    NE              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    CAND            reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    CONDOP          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    COR             reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    STMT_TERMINATOR reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    EQUALS          reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    PLUSEQUAL       reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    MINUSEQUAL      reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    TIMESEQUAL      reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    DIVEQUAL        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    MODEQUAL        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    ANDEQUAL        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    OREQUAL         reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    XOREQUAL        reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LAMBDADEC       reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    RSHIFTEQUAL     reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)
    LSHIFTEQUAL     reduce using rule 130 (invocation_expression -> primary_expression LPAREN argument_list_opt RPAREN .)


state 598

    (258) do_statement -> DO embedded_statement WHILE LPAREN . boolean_expression RPAREN STMT_TERMINATOR
    (244) boolean_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 481
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    boolean_expression             shift and go to state 643
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 599

    (178) default_value_expression -> DEFAULT LPAREN type RPAREN .

    LBRACKET        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LPAREN          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    INCREMENT       reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    DECREMENT       reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    MEMBERACCESS    reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    EQUALS          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    PLUSEQUAL       reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    MINUSEQUAL      reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    TIMESEQUAL      reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    DIVEQUAL        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    MODEQUAL        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    ANDEQUAL        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    OREQUAL         reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    XOREQUAL        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LAMBDADEC       reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    RSHIFTEQUAL     reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LSHIFTEQUAL     reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    TIMES           reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    DIVIDE          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    MOD             reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    PLUS            reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    MINUS           reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LSHIFT          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    RSHIFT          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LT              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    GT              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    LE              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    GE              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    IS              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    AS              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    EQ              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    NE              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    AND             reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    XOR             reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    OR              reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    CAND            reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    CONDOP          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    COR             reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    RBRACE          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    COMMA           reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    RPAREN          reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    STMT_TERMINATOR reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    COLON           reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)
    RBRACKET        reduce using rule 178 (default_value_expression -> DEFAULT LPAREN type RPAREN .)


state 600

    (135) element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .

    LBRACKET        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LPAREN          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    INCREMENT       reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    DECREMENT       reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    MEMBERACCESS    reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    EQUALS          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    PLUSEQUAL       reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    MINUSEQUAL      reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    TIMESEQUAL      reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    DIVEQUAL        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    MODEQUAL        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    ANDEQUAL        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    OREQUAL         reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    XOREQUAL        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LAMBDADEC       reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    RSHIFTEQUAL     reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LSHIFTEQUAL     reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    TIMES           reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    DIVIDE          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    MOD             reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    PLUS            reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    MINUS           reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LSHIFT          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    RSHIFT          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LT              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    GT              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    LE              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    GE              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    IS              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    AS              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    EQ              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    NE              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    AND             reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    XOR             reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    OR              reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    CAND            reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    CONDOP          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    COR             reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    COMMA           reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    RPAREN          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    STMT_TERMINATOR reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    RBRACE          reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    COLON           reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)
    RBRACKET        reduce using rule 135 (element_access -> primary_no_array_creation_expression LBRACKET argument_list RBRACKET .)


state 601

    (158) expression_list -> expression .

    RBRACKET        reduce using rule 158 (expression_list -> expression .)
    COMMA           reduce using rule 158 (expression_list -> expression .)
    RBRACE          reduce using rule 158 (expression_list -> expression .)


state 602

    (276) array_creation_expression -> NEW non_array_type LBRACKET expression_list . RBRACKET rank_specifiers_opt array_initializer_opt
    (159) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 645
    COMMA           shift and go to state 644


state 603

    (160) delegate_creation_expression -> NEW delegate_type LPAREN expression . RPAREN

    RPAREN          shift and go to state 646


state 604

    (156) element_initializer -> non_assignment_expression .

    RBRACE          reduce using rule 156 (element_initializer -> non_assignment_expression .)
    COMMA           reduce using rule 156 (element_initializer -> non_assignment_expression .)


state 605

    (145) object_initializer -> LBRACE member_initializer_list_opt . RBRACE

    RBRACE          shift and go to state 647


state 606

    (154) element_initializer_list -> element_initializer .

    RBRACE          reduce using rule 154 (element_initializer_list -> element_initializer .)
    COMMA           reduce using rule 154 (element_initializer_list -> element_initializer .)


state 607

    (149) member_initializer -> IDENTIFIER . EQUALS initializer_value
    (287) implicit_anonymous_function_parameter -> IDENTIFIER .
    (111) simple_name -> IDENTIFIER .

    EQUALS          shift and go to state 648
    LAMBDADEC       reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .)
    LBRACKET        reduce using rule 111 (simple_name -> IDENTIFIER .)
    MEMBERACCESS    reduce using rule 111 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 111 (simple_name -> IDENTIFIER .)
    INCREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    DECREMENT       reduce using rule 111 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 111 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    MOD             reduce using rule 111 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 111 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 111 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (simple_name -> IDENTIFIER .)
    LT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GT              reduce using rule 111 (simple_name -> IDENTIFIER .)
    LE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    GE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    IS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AS              reduce using rule 111 (simple_name -> IDENTIFIER .)
    EQ              reduce using rule 111 (simple_name -> IDENTIFIER .)
    NE              reduce using rule 111 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 111 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 111 (simple_name -> IDENTIFIER .)
    CAND            reduce using rule 111 (simple_name -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COR             reduce using rule 111 (simple_name -> IDENTIFIER .)
    RBRACE          reduce using rule 111 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 111 (simple_name -> IDENTIFIER .)


state 608

    (424) member_initializer_list_opt -> empty .

    RBRACE          reduce using rule 424 (member_initializer_list_opt -> empty .)


state 609

    (147) member_initializer_list -> member_initializer .

    COMMA           reduce using rule 147 (member_initializer_list -> member_initializer .)
    RBRACE          reduce using rule 147 (member_initializer_list -> member_initializer .)


state 610

    (152) collection_initializer -> LBRACE element_initializer_list . RBRACE
    (153) collection_initializer -> LBRACE element_initializer_list . COMMA RBRACE
    (155) element_initializer_list -> element_initializer_list . COMMA element_initializer

    RBRACE          shift and go to state 650
    COMMA           shift and go to state 649


state 611

    (146) object_initializer -> LBRACE member_initializer_list . COMMA RBRACE
    (425) member_initializer_list_opt -> member_initializer_list .
    (148) member_initializer_list -> member_initializer_list . COMMA member_initializer

    COMMA           shift and go to state 651
    RBRACE          reduce using rule 425 (member_initializer_list_opt -> member_initializer_list .)


state 612

    (180) explicit_anonymous_function_signature -> LPAREN . explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> LPAREN . implicit_anonymous_function_parameter_list_opt RPAREN
    (279) cast_expression -> LPAREN . type RPAREN unary_expression
    (112) parenthesized_expression -> LPAREN . expression RPAREN
    (404) explicit_anonymous_function_parameter_list_opt -> . empty
    (405) explicit_anonymous_function_parameter_list_opt -> . explicit_anonymous_function_parameter_list
    (372) implicit_anonymous_function_parameter_list_opt -> . empty
    (373) implicit_anonymous_function_parameter_list_opt -> . implicit_anonymous_function_parameter_list
    (7) type -> . value_type
    (8) type -> . reference_type
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (371) empty -> .
    (181) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter
    (182) explicit_anonymous_function_parameter_list -> . explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter
    (285) implicit_anonymous_function_parameter_list -> . implicit_anonymous_function_parameter
    (286) implicit_anonymous_function_parameter_list -> . implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (183) explicit_anonymous_function_parameter -> . type IDENTIFIER
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RPAREN          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 442
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    BOOL            shift and go to state 168
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    DECIMAL         shift and go to state 249
    NEW             shift and go to state 317
    SBYTE           shift and go to state 379
    BYTE            shift and go to state 385
    SHORT           shift and go to state 386
    USHORT          shift and go to state 382
    INT             shift and go to state 381
    UINT            shift and go to state 387
    LONG            shift and go to state 383
    ULONG           shift and go to state 389
    CHAR            shift and go to state 378
    FLOAT           shift and go to state 388
    DOUBLE          shift and go to state 390
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253

    explicit_anonymous_function_parameter shift and go to state 441
    anonymous_object_creation_expression shift and go to state 220
    conditional_expression         shift and go to state 291
    non_assignment_expression      shift and go to state 274
    empty                          shift and go to state 444
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    implicit_anonymous_function_parameter shift and go to state 448
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    simple_type                    shift and go to state 40
    anonymous_function_signature   shift and go to state 273
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    struct_type                    shift and go to state 42
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    non_array_type                 shift and go to state 58
    explicit_anonymous_function_parameter_list shift and go to state 443
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 380
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    numeric_type                   shift and go to state 38
    type_name                      shift and go to state 50
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    array_type                     shift and go to state 53
    relational_expression          shift and go to state 284
    member_access                  shift and go to state 169
    exclusive_or_expression        shift and go to state 312
    delegate_type                  shift and go to state 51
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    type                           shift and go to state 445
    explicit_anonymous_function_parameter_list_opt shift and go to state 446
    implicit_anonymous_function_parameter_list shift and go to state 447
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    explicit_anonymous_function_signature shift and go to state 277
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    integral_type                  shift and go to state 62
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_or_expression      shift and go to state 313
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    this_access                    shift and go to state 251
    value_type                     shift and go to state 68
    implicit_anonymous_function_parameter_list_opt shift and go to state 449
    floating_point_type            shift and go to state 70

state 613

    (157) element_initializer -> LBRACE . expression_list RBRACE
    (158) expression_list -> . expression
    (159) expression_list -> . expression_list COMMA expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 601
    expression_list                shift and go to state 652
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 614

    (141) object_creation_expression -> NEW type LPAREN argument_list_opt . RPAREN object_or_collection_initializer_opt

    RPAREN          shift and go to state 653


state 615

    (163) anonymous_object_initializer -> LBRACE member_declarator_list COMMA . RBRACE
    (165) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (166) member_declarator -> . simple_name
    (167) member_declarator -> . member_access
    (168) member_declarator -> . IDENTIFIER EQUALS expression
    (111) simple_name -> . IDENTIFIER
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block

    RBRACE          shift and go to state 655
    IDENTIFIER      shift and go to state 522
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    LPAREN          shift and go to state 526
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253

    anonymous_object_creation_expression shift and go to state 220
    member_access                  shift and go to state 521
    simple_name                    shift and go to state 528
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    post_increment_expression      shift and go to state 281
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    anonymous_method_expression    shift and go to state 235
    member_declarator              shift and go to state 654
    this_access                    shift and go to state 251
    primary_expression             shift and go to state 524
    object_creation_expression     shift and go to state 308

state 616

    (168) member_declarator -> IDENTIFIER EQUALS . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 656
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 617

    (162) anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .

    LBRACKET        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    MEMBERACCESS    reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LPAREN          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    INCREMENT       reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    DECREMENT       reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    EQUALS          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    PLUSEQUAL       reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    MINUSEQUAL      reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    TIMESEQUAL      reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    DIVEQUAL        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    MODEQUAL        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    ANDEQUAL        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    OREQUAL         reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    XOREQUAL        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LAMBDADEC       reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    RSHIFTEQUAL     reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LSHIFTEQUAL     reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    TIMES           reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    DIVIDE          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    MOD             reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    PLUS            reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    MINUS           reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LSHIFT          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    RSHIFT          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LT              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    GT              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    LE              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    GE              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    IS              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    AS              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    EQ              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    NE              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    AND             reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    XOR             reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    OR              reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    CAND            reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    CONDOP          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    COR             reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    COMMA           reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    RPAREN          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    STMT_TERMINATOR reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    RBRACE          reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    COLON           reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)
    RBRACKET        reduce using rule 162 (anonymous_object_initializer -> LBRACE member_declarator_list_opt RBRACE .)


state 618

    (200) array_initializer -> LBRACE variable_initializer_list COMMA . RBRACE
    (202) variable_initializer_list -> variable_initializer_list COMMA . variable_initializer
    (203) variable_initializer -> . expression
    (204) variable_initializer -> . array_initializer
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    RBRACE          shift and go to state 657
    LBRACE          shift and go to state 416
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 415
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    array_initializer              shift and go to state 417
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    equality_expression            shift and go to state 306
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    variable_initializer           shift and go to state 658
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 619

    (199) array_initializer -> LBRACE variable_initializer_list_opt RBRACE .

    LPAREN          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    INCREMENT       reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    DECREMENT       reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    MEMBERACCESS    reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    EQUALS          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    PLUSEQUAL       reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    MINUSEQUAL      reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    TIMESEQUAL      reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    DIVEQUAL        reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    MODEQUAL        reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    ANDEQUAL        reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    OREQUAL         reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    XOREQUAL        reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    LAMBDADEC       reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    RSHIFTEQUAL     reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    LSHIFTEQUAL     reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    TIMES           reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    DIVIDE          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    MOD             reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    PLUS            reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    MINUS           reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    LSHIFT          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    RSHIFT          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    LT              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    GT              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    LE              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    GE              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    IS              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    AS              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    EQ              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    NE              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    AND             reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    XOR             reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    OR              reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    CAND            reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    CONDOP          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    COR             reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    COMMA           reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    RPAREN          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    STMT_TERMINATOR reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    RBRACE          reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    COLON           reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)
    RBRACKET        reduce using rule 199 (array_initializer -> LBRACE variable_initializer_list_opt RBRACE .)


state 620

    (182) explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter .

    COMMA           reduce using rule 182 (explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter .)
    RPAREN          reduce using rule 182 (explicit_anonymous_function_parameter_list -> explicit_anonymous_function_parameter_list COMMA explicit_anonymous_function_parameter .)


state 621

    (287) implicit_anonymous_function_parameter -> IDENTIFIER .

    COMMA           reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .)
    RPAREN          reduce using rule 287 (implicit_anonymous_function_parameter -> IDENTIFIER .)


state 622

    (286) implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter .

    COMMA           reduce using rule 286 (implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter .)
    RPAREN          reduce using rule 286 (implicit_anonymous_function_parameter_list -> implicit_anonymous_function_parameter_list COMMA implicit_anonymous_function_parameter .)


state 623

    (54) conditional_expression -> conditional_or_expression CONDOP expression COLON . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 659
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 624

    (341) destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN . RPAREN destructor_body

    RPAREN          shift and go to state 660


state 625

    (338) constructor_initializer -> COLON THIS LPAREN . argument_list_opt RPAREN
    (434) argument_list_opt -> . empty
    (435) argument_list_opt -> . argument_list
    (371) empty -> .
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RPAREN          reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list_opt              shift and go to state 661
    argument_list                  shift and go to state 502
    argument_name                  shift and go to state 475
    empty                          shift and go to state 503
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 626

    (337) constructor_initializer -> COLON BASE LPAREN . argument_list_opt RPAREN
    (434) argument_list_opt -> . empty
    (435) argument_list_opt -> . argument_list
    (371) empty -> .
    (131) argument_list -> . argument
    (132) argument_list -> . argument_list COMMA argument
    (133) argument -> . argument_name_opt argument_value
    (406) argument_name_opt -> . empty
    (407) argument_name_opt -> . argument_name
    (48) argument_name -> . IDENTIFIER COLON

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RPAREN          reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LNOT            reduce using rule 371 (empty -> .)
    NOT             reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    NEW             reduce using rule 371 (empty -> .)
    INTCONST        reduce using rule 371 (empty -> .)
    STRCONST        reduce using rule 371 (empty -> .)
    CHCONST         reduce using rule 371 (empty -> .)
    THIS            reduce using rule 371 (empty -> .)
    BASE            reduce using rule 371 (empty -> .)
    TYPEOF          reduce using rule 371 (empty -> .)
    DEFAULT         reduce using rule 371 (empty -> .)
    DELEGATE        reduce using rule 371 (empty -> .)
    BOOL            reduce using rule 371 (empty -> .)
    BYTE            reduce using rule 371 (empty -> .)
    CHAR            reduce using rule 371 (empty -> .)
    DECIMAL         reduce using rule 371 (empty -> .)
    DOUBLE          reduce using rule 371 (empty -> .)
    FLOAT           reduce using rule 371 (empty -> .)
    INT             reduce using rule 371 (empty -> .)
    LONG            reduce using rule 371 (empty -> .)
    OBJECT          reduce using rule 371 (empty -> .)
    SBYTE           reduce using rule 371 (empty -> .)
    SHORT           reduce using rule 371 (empty -> .)
    STRING          reduce using rule 371 (empty -> .)
    UINT            reduce using rule 371 (empty -> .)
    ULONG           reduce using rule 371 (empty -> .)
    USHORT          reduce using rule 371 (empty -> .)
    IDENTIFIER      shift and go to state 479

  ! IDENTIFIER      [ reduce using rule 371 (empty -> .) ]

    argument_list_opt              shift and go to state 662
    argument_list                  shift and go to state 502
    argument_name                  shift and go to state 475
    empty                          shift and go to state 503
    argument                       shift and go to state 477
    argument_name_opt              shift and go to state 478

state 627

    (411) for_condition_opt -> for_condition .

    STMT_TERMINATOR reduce using rule 411 (for_condition_opt -> for_condition .)


state 628

    (410) for_condition_opt -> empty .

    STMT_TERMINATOR reduce using rule 410 (for_condition_opt -> empty .)


state 629

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt . STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement

    STMT_TERMINATOR shift and go to state 663


state 630

    (264) for_condition -> boolean_expression .

    STMT_TERMINATOR reduce using rule 264 (for_condition -> boolean_expression .)


state 631

    (263) statement_expression_list -> statement_expression_list COMMA statement_expression .

    COMMA           reduce using rule 263 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    RPAREN          reduce using rule 263 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    STMT_TERMINATOR reduce using rule 263 (statement_expression_list -> statement_expression_list COMMA statement_expression .)


state 632

    (132) argument_list -> argument_list COMMA argument .

    RBRACKET        reduce using rule 132 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 132 (argument_list -> argument_list COMMA argument .)
    RPAREN          reduce using rule 132 (argument_list -> argument_list COMMA argument .)


state 633

    (257) while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .

    CONST           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LBRACE          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    STMT_TERMINATOR reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    IF              reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    SWITCH          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    WHILE           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DO              reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    FOR             reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    BREAK           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CONTINUE        reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    GOTO            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    RETURN          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    NEW             reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INCREMENT       reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DECREMENT       reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    PLUS            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    MINUS           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LNOT            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    NOT             reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    OBJECT          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    STRING          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LPAREN          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    BOOL            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INTCONST        reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    STRCONST        reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CHCONST         reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    THIS            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    BASE            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    TYPEOF          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DEFAULT         reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DELEGATE        reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DECIMAL         reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    BYTE            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CHAR            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    DOUBLE          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    FLOAT           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    INT             reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    LONG            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    SBYTE           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    SHORT           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    UINT            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    ULONG           reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    USHORT          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    RBRACE          reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    ELSE            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)
    CASE            reduce using rule 257 (while_statement -> WHILE LPAREN boolean_expression RPAREN embedded_statement .)


state 634

    (173) unbound_type_name -> IDENTIFIER DOUBLE_COLON IDENTIFIER . generic_dimension_specifier_opt
    (374) generic_dimension_specifier_opt -> . empty
    (375) generic_dimension_specifier_opt -> . generic_dimension_specifier
    (371) empty -> .
    (175) generic_dimension_specifier -> . < commas_opt >

    RPAREN          reduce using rule 371 (empty -> .)
    MEMBERACCESS    reduce using rule 371 (empty -> .)
    <               shift and go to state 585

    generic_dimension_specifier    shift and go to state 582
    empty                          shift and go to state 584
    generic_dimension_specifier_opt shift and go to state 664

state 635

    (176) commas -> COMMA .

    COMMA           reduce using rule 176 (commas -> COMMA .)
    >               reduce using rule 176 (commas -> COMMA .)


state 636

    (175) generic_dimension_specifier -> < commas_opt . >

    >               shift and go to state 665


state 637

    (428) commas_opt -> empty .

    >               reduce using rule 428 (commas_opt -> empty .)


state 638

    (429) commas_opt -> commas .
    (177) commas -> commas . COMMA

    >               reduce using rule 429 (commas_opt -> commas .)
    COMMA           shift and go to state 666


state 639

    (174) unbound_type_name -> unbound_type_name MEMBERACCESS IDENTIFIER . generic_dimension_specifier_opt
    (374) generic_dimension_specifier_opt -> . empty
    (375) generic_dimension_specifier_opt -> . generic_dimension_specifier
    (371) empty -> .
    (175) generic_dimension_specifier -> . < commas_opt >

    RPAREN          reduce using rule 371 (empty -> .)
    MEMBERACCESS    reduce using rule 371 (empty -> .)
    <               shift and go to state 585

    generic_dimension_specifier    shift and go to state 582
    empty                          shift and go to state 584
    generic_dimension_specifier_opt shift and go to state 667

state 640

    (246) switch_block -> LBRACE . switch_sections_opt RBRACE
    (392) switch_sections_opt -> . empty
    (393) switch_sections_opt -> . switch_sections
    (371) empty -> .
    (247) switch_sections -> . switch_section
    (248) switch_sections -> . switch_sections switch_section
    (249) switch_section -> . switch_labels statement_list
    (250) switch_labels -> . switch_label
    (251) switch_labels -> . switch_labels switch_label
    (252) switch_label -> . CASE constant_expression COLON
    (253) switch_label -> . DEFAULT COLON

    RBRACE          reduce using rule 371 (empty -> .)
    CASE            shift and go to state 668
    DEFAULT         shift and go to state 672

    switch_sections_opt            shift and go to state 671
    switch_labels                  shift and go to state 673
    switch_label                   shift and go to state 670
    switch_section                 shift and go to state 675
    empty                          shift and go to state 669
    switch_sections                shift and go to state 674

state 641

    (245) switch_statement -> SWITCH LPAREN expression RPAREN switch_block .

    CONST           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    LBRACE          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    STMT_TERMINATOR reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    IF              reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    SWITCH          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    WHILE           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DO              reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    FOR             reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    BREAK           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    CONTINUE        reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    GOTO            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    RETURN          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    NEW             reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    INCREMENT       reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DECREMENT       reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    PLUS            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    MINUS           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    LNOT            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    NOT             reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    OBJECT          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    STRING          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    LPAREN          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    BOOL            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    INTCONST        reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    STRCONST        reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    CHCONST         reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    IDENTIFIER      reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    THIS            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    BASE            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    TYPEOF          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DEFAULT         reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DELEGATE        reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DECIMAL         reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    BYTE            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    CHAR            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    DOUBLE          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    FLOAT           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    INT             reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    LONG            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    SBYTE           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    SHORT           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    UINT            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    ULONG           reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    USHORT          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    CASE            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    RBRACE          reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)
    ELSE            reduce using rule 245 (switch_statement -> SWITCH LPAREN expression RPAREN switch_block .)


state 642

    (242) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .
    (243) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement . ELSE embedded_statement

  ! shift/reduce conflict for ELSE resolved as shift
    CONST           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LBRACE          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    STMT_TERMINATOR reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    IF              reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    SWITCH          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    WHILE           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DO              reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    FOR             reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    BREAK           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CONTINUE        reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    GOTO            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    RETURN          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    NEW             reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INCREMENT       reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DECREMENT       reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    PLUS            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    MINUS           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LNOT            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    NOT             reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    OBJECT          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    STRING          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LPAREN          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    BOOL            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INTCONST        reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    STRCONST        reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CHCONST         reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    THIS            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    BASE            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    TYPEOF          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DEFAULT         reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DELEGATE        reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DECIMAL         reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    BYTE            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CHAR            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    DOUBLE          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    FLOAT           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    INT             reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    LONG            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    SBYTE           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    SHORT           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    UINT            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    ULONG           reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    USHORT          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    CASE            reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    RBRACE          reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .)
    ELSE            shift and go to state 676

  ! ELSE            [ reduce using rule 242 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement .) ]


state 643

    (258) do_statement -> DO embedded_statement WHILE LPAREN boolean_expression . RPAREN STMT_TERMINATOR

    RPAREN          shift and go to state 677


state 644

    (159) expression_list -> expression_list COMMA . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 678
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    relational_expression          shift and go to state 284
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 645

    (276) array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET . rank_specifiers_opt array_initializer_opt
    (378) rank_specifiers_opt -> . empty
    (379) rank_specifiers_opt -> . rank_specifiers
    (371) empty -> .
    (37) rank_specifiers -> . rank_specifier
    (38) rank_specifiers -> . rank_specifiers rank_specifier
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET

    LBRACE          reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    MEMBERACCESS    reduce using rule 371 (empty -> .)
    EQUALS          reduce using rule 371 (empty -> .)
    PLUSEQUAL       reduce using rule 371 (empty -> .)
    MINUSEQUAL      reduce using rule 371 (empty -> .)
    TIMESEQUAL      reduce using rule 371 (empty -> .)
    DIVEQUAL        reduce using rule 371 (empty -> .)
    MODEQUAL        reduce using rule 371 (empty -> .)
    ANDEQUAL        reduce using rule 371 (empty -> .)
    OREQUAL         reduce using rule 371 (empty -> .)
    XOREQUAL        reduce using rule 371 (empty -> .)
    LAMBDADEC       reduce using rule 371 (empty -> .)
    RSHIFTEQUAL     reduce using rule 371 (empty -> .)
    LSHIFTEQUAL     reduce using rule 371 (empty -> .)
    TIMES           reduce using rule 371 (empty -> .)
    DIVIDE          reduce using rule 371 (empty -> .)
    MOD             reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LSHIFT          reduce using rule 371 (empty -> .)
    RSHIFT          reduce using rule 371 (empty -> .)
    LT              reduce using rule 371 (empty -> .)
    GT              reduce using rule 371 (empty -> .)
    LE              reduce using rule 371 (empty -> .)
    GE              reduce using rule 371 (empty -> .)
    IS              reduce using rule 371 (empty -> .)
    AS              reduce using rule 371 (empty -> .)
    EQ              reduce using rule 371 (empty -> .)
    NE              reduce using rule 371 (empty -> .)
    AND             reduce using rule 371 (empty -> .)
    XOR             reduce using rule 371 (empty -> .)
    OR              reduce using rule 371 (empty -> .)
    CAND            reduce using rule 371 (empty -> .)
    CONDOP          reduce using rule 371 (empty -> .)
    COR             reduce using rule 371 (empty -> .)
    COMMA           reduce using rule 371 (empty -> .)
    RPAREN          reduce using rule 371 (empty -> .)
    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    COLON           reduce using rule 371 (empty -> .)
    RBRACKET        reduce using rule 371 (empty -> .)
    LBRACKET        shift and go to state 111

    rank_specifiers_opt            shift and go to state 680
    rank_specifiers                shift and go to state 679
    empty                          shift and go to state 681
    rank_specifier                 shift and go to state 113

state 646

    (160) delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .

    LBRACKET        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    MEMBERACCESS    reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LPAREN          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    EQUALS          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LAMBDADEC       reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    TIMES           reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    MOD             reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    PLUS            reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    MINUS           reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LT              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    GT              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    LE              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    GE              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    IS              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    AS              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    EQ              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    NE              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    AND             reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    XOR             reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    OR              reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    CAND            reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    CONDOP          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    COR             reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    COMMA           reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    STMT_TERMINATOR reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    RPAREN          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    RBRACE          reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    COLON           reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 160 (delegate_creation_expression -> NEW delegate_type LPAREN expression RPAREN .)


state 647

    (145) object_initializer -> LBRACE member_initializer_list_opt RBRACE .

    STMT_TERMINATOR reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LBRACKET        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LPAREN          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    INCREMENT       reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    DECREMENT       reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    MEMBERACCESS    reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    EQUALS          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    PLUSEQUAL       reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    MINUSEQUAL      reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    TIMESEQUAL      reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    DIVEQUAL        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    MODEQUAL        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    ANDEQUAL        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    OREQUAL         reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    XOREQUAL        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LAMBDADEC       reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    RSHIFTEQUAL     reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LSHIFTEQUAL     reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    TIMES           reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    DIVIDE          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    MOD             reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    PLUS            reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    MINUS           reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LSHIFT          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    RSHIFT          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LT              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    GT              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    LE              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    GE              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    IS              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    AS              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    EQ              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    NE              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    AND             reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    XOR             reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    OR              reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    CAND            reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    CONDOP          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    COR             reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    COMMA           reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    RPAREN          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    RBRACE          reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    COLON           reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)
    RBRACKET        reduce using rule 145 (object_initializer -> LBRACE member_initializer_list_opt RBRACE .)


state 648

    (149) member_initializer -> IDENTIFIER EQUALS . initializer_value
    (150) initializer_value -> . expression
    (151) initializer_value -> . object_or_collection_initializer
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (143) object_or_collection_initializer -> . object_initializer
    (144) object_or_collection_initializer -> . collection_initializer
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (145) object_initializer -> . LBRACE member_initializer_list_opt RBRACE
    (146) object_initializer -> . LBRACE member_initializer_list COMMA RBRACE
    (152) collection_initializer -> . LBRACE element_initializer_list RBRACE
    (153) collection_initializer -> . LBRACE element_initializer_list COMMA RBRACE
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    LBRACE          shift and go to state 517
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    collection_initializer         shift and go to state 515
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    typeof_expression              shift and go to state 176
    conditional_and_expression     shift and go to state 300
    pre_decrement_expression       shift and go to state 292
    initializer_value              shift and go to state 683
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    object_initializer             shift and go to state 516
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 684
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    object_or_collection_initializer shift and go to state 682
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314
    non_assignment_expression      shift and go to state 274

state 649

    (153) collection_initializer -> LBRACE element_initializer_list COMMA . RBRACE
    (155) element_initializer_list -> element_initializer_list COMMA . element_initializer
    (156) element_initializer -> . non_assignment_expression
    (157) element_initializer -> . LBRACE expression_list RBRACE
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    RBRACE          shift and go to state 686
    LBRACE          shift and go to state 613
    LPAREN          shift and go to state 612
    IDENTIFIER      shift and go to state 278
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    NEW             shift and go to state 317
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 604
    relational_expression          shift and go to state 284
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    and_expression                 shift and go to state 299
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 542
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    equality_expression            shift and go to state 306
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    element_access                 shift and go to state 209
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    implicit_anonymous_function_parameter shift and go to state 314
    typeof_expression              shift and go to state 176
    element_initializer            shift and go to state 685
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    additive_expression            shift and go to state 276
    post_decrement_expression      shift and go to state 316
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251

state 650

    (152) collection_initializer -> LBRACE element_initializer_list RBRACE .

    COMMA           reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    RBRACE          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    STMT_TERMINATOR reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LBRACKET        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LPAREN          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    INCREMENT       reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    DECREMENT       reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    MEMBERACCESS    reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    EQUALS          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    PLUSEQUAL       reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    MINUSEQUAL      reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    TIMESEQUAL      reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    DIVEQUAL        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    MODEQUAL        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    ANDEQUAL        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    OREQUAL         reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    XOREQUAL        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LAMBDADEC       reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    RSHIFTEQUAL     reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LSHIFTEQUAL     reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    TIMES           reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    DIVIDE          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    MOD             reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    PLUS            reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    MINUS           reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LSHIFT          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    RSHIFT          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LT              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    GT              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    LE              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    GE              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    IS              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    AS              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    EQ              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    NE              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    AND             reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    XOR             reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    OR              reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    CAND            reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    CONDOP          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    COR             reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    RPAREN          reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    COLON           reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)
    RBRACKET        reduce using rule 152 (collection_initializer -> LBRACE element_initializer_list RBRACE .)


state 651

    (146) object_initializer -> LBRACE member_initializer_list COMMA . RBRACE
    (148) member_initializer_list -> member_initializer_list COMMA . member_initializer
    (149) member_initializer -> . IDENTIFIER EQUALS initializer_value

    RBRACE          shift and go to state 689
    IDENTIFIER      shift and go to state 688

    member_initializer             shift and go to state 687

state 652

    (157) element_initializer -> LBRACE expression_list . RBRACE
    (159) expression_list -> expression_list . COMMA expression

    RBRACE          shift and go to state 690
    COMMA           shift and go to state 644


state 653

    (141) object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN . object_or_collection_initializer_opt
    (418) object_or_collection_initializer_opt -> . empty
    (419) object_or_collection_initializer_opt -> . object_or_collection_initializer
    (371) empty -> .
    (143) object_or_collection_initializer -> . object_initializer
    (144) object_or_collection_initializer -> . collection_initializer
    (145) object_initializer -> . LBRACE member_initializer_list_opt RBRACE
    (146) object_initializer -> . LBRACE member_initializer_list COMMA RBRACE
    (152) collection_initializer -> . LBRACE element_initializer_list RBRACE
    (153) collection_initializer -> . LBRACE element_initializer_list COMMA RBRACE

    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    LBRACKET        reduce using rule 371 (empty -> .)
    LPAREN          reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    MEMBERACCESS    reduce using rule 371 (empty -> .)
    EQUALS          reduce using rule 371 (empty -> .)
    PLUSEQUAL       reduce using rule 371 (empty -> .)
    MINUSEQUAL      reduce using rule 371 (empty -> .)
    TIMESEQUAL      reduce using rule 371 (empty -> .)
    DIVEQUAL        reduce using rule 371 (empty -> .)
    MODEQUAL        reduce using rule 371 (empty -> .)
    ANDEQUAL        reduce using rule 371 (empty -> .)
    OREQUAL         reduce using rule 371 (empty -> .)
    XOREQUAL        reduce using rule 371 (empty -> .)
    LAMBDADEC       reduce using rule 371 (empty -> .)
    RSHIFTEQUAL     reduce using rule 371 (empty -> .)
    LSHIFTEQUAL     reduce using rule 371 (empty -> .)
    TIMES           reduce using rule 371 (empty -> .)
    DIVIDE          reduce using rule 371 (empty -> .)
    MOD             reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LSHIFT          reduce using rule 371 (empty -> .)
    RSHIFT          reduce using rule 371 (empty -> .)
    LT              reduce using rule 371 (empty -> .)
    GT              reduce using rule 371 (empty -> .)
    LE              reduce using rule 371 (empty -> .)
    GE              reduce using rule 371 (empty -> .)
    IS              reduce using rule 371 (empty -> .)
    AS              reduce using rule 371 (empty -> .)
    EQ              reduce using rule 371 (empty -> .)
    NE              reduce using rule 371 (empty -> .)
    AND             reduce using rule 371 (empty -> .)
    XOR             reduce using rule 371 (empty -> .)
    OR              reduce using rule 371 (empty -> .)
    CAND            reduce using rule 371 (empty -> .)
    CONDOP          reduce using rule 371 (empty -> .)
    COR             reduce using rule 371 (empty -> .)
    COMMA           reduce using rule 371 (empty -> .)
    RPAREN          reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    COLON           reduce using rule 371 (empty -> .)
    RBRACKET        reduce using rule 371 (empty -> .)
    LBRACE          shift and go to state 517

    object_or_collection_initializer_opt shift and go to state 692
    collection_initializer         shift and go to state 515
    object_or_collection_initializer shift and go to state 693
    object_initializer             shift and go to state 516
    empty                          shift and go to state 691

state 654

    (165) member_declarator_list -> member_declarator_list COMMA member_declarator .

    COMMA           reduce using rule 165 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    RBRACE          reduce using rule 165 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 655

    (163) anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .

    LBRACKET        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    MEMBERACCESS    reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LPAREN          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    INCREMENT       reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    DECREMENT       reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    EQUALS          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    PLUSEQUAL       reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    MINUSEQUAL      reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    TIMESEQUAL      reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    DIVEQUAL        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    MODEQUAL        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    ANDEQUAL        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    OREQUAL         reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    XOREQUAL        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LAMBDADEC       reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    RSHIFTEQUAL     reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LSHIFTEQUAL     reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    TIMES           reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    DIVIDE          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    MOD             reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    PLUS            reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    MINUS           reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LSHIFT          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    RSHIFT          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LT              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    GT              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    LE              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    GE              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    IS              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    AS              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    EQ              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    NE              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    AND             reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    XOR             reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    OR              reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    CAND            reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    CONDOP          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    COR             reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    COMMA           reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    RPAREN          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    STMT_TERMINATOR reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    RBRACE          reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    COLON           reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)
    RBRACKET        reduce using rule 163 (anonymous_object_initializer -> LBRACE member_declarator_list COMMA RBRACE .)


state 656

    (168) member_declarator -> IDENTIFIER EQUALS expression .

    COMMA           reduce using rule 168 (member_declarator -> IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 168 (member_declarator -> IDENTIFIER EQUALS expression .)


state 657

    (200) array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .

    LPAREN          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    INCREMENT       reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    DECREMENT       reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    MEMBERACCESS    reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    PLUSEQUAL       reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    MINUSEQUAL      reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    TIMESEQUAL      reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    DIVEQUAL        reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    MODEQUAL        reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    ANDEQUAL        reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    OREQUAL         reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    XOREQUAL        reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    LAMBDADEC       reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    RSHIFTEQUAL     reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    LSHIFTEQUAL     reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    MOD             reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    LSHIFT          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    RSHIFT          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    LT              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    GT              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    LE              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    GE              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    IS              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    AS              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    EQ              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    NE              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    AND             reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    XOR             reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    OR              reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    CAND            reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    CONDOP          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    COR             reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    STMT_TERMINATOR reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    COLON           reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 200 (array_initializer -> LBRACE variable_initializer_list COMMA RBRACE .)


state 658

    (202) variable_initializer_list -> variable_initializer_list COMMA variable_initializer .

    COMMA           reduce using rule 202 (variable_initializer_list -> variable_initializer_list COMMA variable_initializer .)
    RBRACE          reduce using rule 202 (variable_initializer_list -> variable_initializer_list COMMA variable_initializer .)


state 659

    (54) conditional_expression -> conditional_or_expression CONDOP expression COLON expression .

    RBRACKET        reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)
    RBRACE          reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)
    STMT_TERMINATOR reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)
    RPAREN          reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)
    COLON           reduce using rule 54 (conditional_expression -> conditional_or_expression CONDOP expression COLON expression .)


state 660

    (341) destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN . destructor_body
    (342) destructor_body -> . block
    (343) destructor_body -> . STMT_TERMINATOR
    (184) block -> . LBRACE statement_list_opt RBRACE

    STMT_TERMINATOR shift and go to state 695
    LBRACE          shift and go to state 126

    destructor_body                shift and go to state 694
    block                          shift and go to state 696

state 661

    (338) constructor_initializer -> COLON THIS LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 697


state 662

    (337) constructor_initializer -> COLON BASE LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 698


state 663

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR . for_iterator_opt RPAREN embedded_statement
    (416) for_iterator_opt -> . empty
    (417) for_iterator_opt -> . for_iterator
    (371) empty -> .
    (265) for_iterator -> . statement_expression_list
    (262) statement_expression_list -> . statement_expression
    (263) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    RPAREN          reduce using rule 371 (empty -> .)
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    statement_expression_list      shift and go to state 701
    member_access                  shift and go to state 169
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    unary_expression               shift and go to state 229
    primary_no_array_creation_expression shift and go to state 250
    post_increment_expression      shift and go to state 182
    empty                          shift and go to state 699
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 473
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    for_iterator_opt               shift and go to state 702
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    typeof_expression              shift and go to state 176
    for_iterator                   shift and go to state 700
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    this_access                    shift and go to state 251

state 664

    (173) unbound_type_name -> IDENTIFIER DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt .

    RPAREN          reduce using rule 173 (unbound_type_name -> IDENTIFIER DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt .)
    MEMBERACCESS    reduce using rule 173 (unbound_type_name -> IDENTIFIER DOUBLE_COLON IDENTIFIER generic_dimension_specifier_opt .)


state 665

    (175) generic_dimension_specifier -> < commas_opt > .

    RPAREN          reduce using rule 175 (generic_dimension_specifier -> < commas_opt > .)
    MEMBERACCESS    reduce using rule 175 (generic_dimension_specifier -> < commas_opt > .)


state 666

    (177) commas -> commas COMMA .

    COMMA           reduce using rule 177 (commas -> commas COMMA .)
    >               reduce using rule 177 (commas -> commas COMMA .)


state 667

    (174) unbound_type_name -> unbound_type_name MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt .

    RPAREN          reduce using rule 174 (unbound_type_name -> unbound_type_name MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt .)
    MEMBERACCESS    reduce using rule 174 (unbound_type_name -> unbound_type_name MEMBERACCESS IDENTIFIER generic_dimension_specifier_opt .)


state 668

    (252) switch_label -> CASE . constant_expression COLON
    (209) constant_expression -> . expression
    (49) expression -> . non_assignment_expression
    (50) expression -> . assignment
    (51) non_assignment_expression -> . conditional_expression
    (52) non_assignment_expression -> . lambda_expression
    (225) assignment -> . unary_expression assignment_operator expression
    (53) conditional_expression -> . conditional_or_expression
    (54) conditional_expression -> . conditional_or_expression CONDOP expression COLON expression
    (280) lambda_expression -> . anonymous_function_signature LAMBDADEC anonymous_function_body
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (55) conditional_or_expression -> . conditional_and_expression
    (56) conditional_or_expression -> . conditional_or_expression COR conditional_and_expression
    (281) anonymous_function_signature -> . explicit_anonymous_function_signature
    (282) anonymous_function_signature -> . implicit_anonymous_function_signature
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (57) conditional_and_expression -> . inclusive_or_expression
    (58) conditional_and_expression -> . conditional_and_expression CAND inclusive_or_expression
    (180) explicit_anonymous_function_signature -> . LPAREN explicit_anonymous_function_parameter_list_opt RPAREN
    (283) implicit_anonymous_function_signature -> . LPAREN implicit_anonymous_function_parameter_list_opt RPAREN
    (284) implicit_anonymous_function_signature -> . implicit_anonymous_function_parameter
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (59) inclusive_or_expression -> . exclusive_or_expression
    (60) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (287) implicit_anonymous_function_parameter -> . IDENTIFIER
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (61) exclusive_or_expression -> . and_expression
    (62) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (63) and_expression -> . equality_expression
    (64) and_expression -> . and_expression AND equality_expression
    (65) equality_expression -> . relational_expression
    (66) equality_expression -> . equality_expression EQ relational_expression
    (67) equality_expression -> . equality_expression NE relational_expression
    (68) relational_expression -> . shift_expression
    (69) relational_expression -> . relational_expression LT shift_expression
    (70) relational_expression -> . relational_expression GT shift_expression
    (71) relational_expression -> . relational_expression LE shift_expression
    (72) relational_expression -> . relational_expression GE shift_expression
    (73) relational_expression -> . relational_expression IS type
    (74) relational_expression -> . relational_expression AS type
    (75) shift_expression -> . additive_expression
    (76) shift_expression -> . shift_expression LSHIFT additive_expression
    (77) shift_expression -> . shift_expression RSHIFT additive_expression
    (78) additive_expression -> . multiplicative_expression
    (79) additive_expression -> . additive_expression PLUS multiplicative_expression
    (80) additive_expression -> . additive_expression MINUS multiplicative_expression
    (81) multiplicative_expression -> . unary_expression
    (82) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (83) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (84) multiplicative_expression -> . multiplicative_expression MOD unary_expression

    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    LPAREN          shift and go to state 304
    NEW             shift and go to state 317
    IDENTIFIER      shift and go to state 278
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    anonymous_function_signature   shift and go to state 273
    non_assignment_expression      shift and go to state 274
    and_expression                 shift and go to state 299
    implicit_anonymous_function_signature shift and go to state 285
    member_access                  shift and go to state 169
    additive_expression            shift and go to state 276
    lambda_expression              shift and go to state 296
    explicit_anonymous_function_signature shift and go to state 277
    simple_name                    shift and go to state 203
    base_access                    shift and go to state 226
    literal                        shift and go to state 221
    conditional_and_expression     shift and go to state 300
    shift_expression               shift and go to state 309
    unary_expression               shift and go to state 301
    post_increment_expression      shift and go to state 281
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    expression                     shift and go to state 497
    anonymous_method_expression    shift and go to state 235
    inclusive_or_expression        shift and go to state 303
    primary_expression             shift and go to state 307
    object_creation_expression     shift and go to state 308
    relational_expression          shift and go to state 284
    exclusive_or_expression        shift and go to state 312
    pre_increment_expression       shift and go to state 310
    assignment                     shift and go to state 287
    typeof_expression              shift and go to state 176
    primary_no_array_creation_expression shift and go to state 250
    equality_expression            shift and go to state 306
    delegate_creation_expression   shift and go to state 189
    array_creation_expression      shift and go to state 252
    multiplicative_expression      shift and go to state 298
    invocation_expression          shift and go to state 289
    predefined_type                shift and go to state 206
    conditional_expression         shift and go to state 291
    pre_decrement_expression       shift and go to state 292
    element_access                 shift and go to state 209
    post_decrement_expression      shift and go to state 316
    constant_expression            shift and go to state 703
    conditional_or_expression      shift and go to state 313
    this_access                    shift and go to state 251
    implicit_anonymous_function_parameter shift and go to state 314

state 669

    (392) switch_sections_opt -> empty .

    RBRACE          reduce using rule 392 (switch_sections_opt -> empty .)


state 670

    (250) switch_labels -> switch_label .

    CASE            reduce using rule 250 (switch_labels -> switch_label .)
    DEFAULT         reduce using rule 250 (switch_labels -> switch_label .)
    CONST           reduce using rule 250 (switch_labels -> switch_label .)
    LBRACE          reduce using rule 250 (switch_labels -> switch_label .)
    STMT_TERMINATOR reduce using rule 250 (switch_labels -> switch_label .)
    IF              reduce using rule 250 (switch_labels -> switch_label .)
    SWITCH          reduce using rule 250 (switch_labels -> switch_label .)
    WHILE           reduce using rule 250 (switch_labels -> switch_label .)
    DO              reduce using rule 250 (switch_labels -> switch_label .)
    FOR             reduce using rule 250 (switch_labels -> switch_label .)
    BREAK           reduce using rule 250 (switch_labels -> switch_label .)
    CONTINUE        reduce using rule 250 (switch_labels -> switch_label .)
    GOTO            reduce using rule 250 (switch_labels -> switch_label .)
    RETURN          reduce using rule 250 (switch_labels -> switch_label .)
    NEW             reduce using rule 250 (switch_labels -> switch_label .)
    INCREMENT       reduce using rule 250 (switch_labels -> switch_label .)
    DECREMENT       reduce using rule 250 (switch_labels -> switch_label .)
    PLUS            reduce using rule 250 (switch_labels -> switch_label .)
    MINUS           reduce using rule 250 (switch_labels -> switch_label .)
    LNOT            reduce using rule 250 (switch_labels -> switch_label .)
    NOT             reduce using rule 250 (switch_labels -> switch_label .)
    OBJECT          reduce using rule 250 (switch_labels -> switch_label .)
    STRING          reduce using rule 250 (switch_labels -> switch_label .)
    LPAREN          reduce using rule 250 (switch_labels -> switch_label .)
    BOOL            reduce using rule 250 (switch_labels -> switch_label .)
    INTCONST        reduce using rule 250 (switch_labels -> switch_label .)
    STRCONST        reduce using rule 250 (switch_labels -> switch_label .)
    CHCONST         reduce using rule 250 (switch_labels -> switch_label .)
    IDENTIFIER      reduce using rule 250 (switch_labels -> switch_label .)
    THIS            reduce using rule 250 (switch_labels -> switch_label .)
    BASE            reduce using rule 250 (switch_labels -> switch_label .)
    TYPEOF          reduce using rule 250 (switch_labels -> switch_label .)
    DELEGATE        reduce using rule 250 (switch_labels -> switch_label .)
    DECIMAL         reduce using rule 250 (switch_labels -> switch_label .)
    BYTE            reduce using rule 250 (switch_labels -> switch_label .)
    CHAR            reduce using rule 250 (switch_labels -> switch_label .)
    DOUBLE          reduce using rule 250 (switch_labels -> switch_label .)
    FLOAT           reduce using rule 250 (switch_labels -> switch_label .)
    INT             reduce using rule 250 (switch_labels -> switch_label .)
    LONG            reduce using rule 250 (switch_labels -> switch_label .)
    SBYTE           reduce using rule 250 (switch_labels -> switch_label .)
    SHORT           reduce using rule 250 (switch_labels -> switch_label .)
    UINT            reduce using rule 250 (switch_labels -> switch_label .)
    ULONG           reduce using rule 250 (switch_labels -> switch_label .)
    USHORT          reduce using rule 250 (switch_labels -> switch_label .)


state 671

    (246) switch_block -> LBRACE switch_sections_opt . RBRACE

    RBRACE          shift and go to state 704


state 672

    (253) switch_label -> DEFAULT . COLON

    COLON           shift and go to state 705


state 673

    (249) switch_section -> switch_labels . statement_list
    (251) switch_labels -> switch_labels . switch_label
    (185) statement_list -> . statement
    (186) statement_list -> . statement_list statement
    (252) switch_label -> . CASE constant_expression COLON
    (253) switch_label -> . DEFAULT COLON
    (187) statement -> . declaration_statement
    (188) statement -> . embedded_statement
    (189) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (190) declaration_statement -> . local_constant_declaration STMT_TERMINATOR
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (191) local_variable_declaration -> . local_variable_type local_variable_declarators
    (205) local_constant_declaration -> . CONST type constant_declarators
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (192) local_variable_type -> . type
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (7) type -> . value_type
    (8) type -> . reference_type
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

    CASE            shift and go to state 668
    DEFAULT         shift and go to state 707
    CONST           shift and go to state 197
    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    LPAREN          shift and go to state 236
    BOOL            shift and go to state 168
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 171
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DELEGATE        shift and go to state 253
    DECIMAL         shift and go to state 249
    BYTE            shift and go to state 211
    CHAR            shift and go to state 166
    DOUBLE          shift and go to state 254
    FLOAT           shift and go to state 230
    INT             shift and go to state 190
    LONG            shift and go to state 196
    SBYTE           shift and go to state 181
    SHORT           shift and go to state 207
    UINT            shift and go to state 225
    ULONG           shift and go to state 237
    USHORT          shift and go to state 187

    numeric_type                   shift and go to state 38
    member_access                  shift and go to state 169
    simple_type                    shift and go to state 40
    selection_statement            shift and go to state 173
    cast_expression                shift and go to state 174
    literal                        shift and go to state 221
    statement_list                 shift and go to state 706
    parenthesized_expression       shift and go to state 191
    struct_type                    shift and go to state 42
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    declaration_statement          shift and go to state 185
    empty_statement                shift and go to state 204
    local_constant_declaration     shift and go to state 192
    switch_statement               shift and go to state 193
    delegate_type                  shift and go to state 51
    assignment                     shift and go to state 198
    type                           shift and go to state 199
    block                          shift and go to state 200
    typeof_expression              shift and go to state 176
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    type_name                      shift and go to state 50
    integral_type                  shift and go to state 62
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    return_statement               shift and go to state 213
    element_access                 shift and go to state 209
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    simple_name                    shift and go to state 203
    this_access                    shift and go to state 251
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 216
    value_type                     shift and go to state 68
    anonymous_object_creation_expression shift and go to state 220
    expression_statement           shift and go to state 175
    for_statement                  shift and go to state 223
    base_access                    shift and go to state 226
    unary_expression               shift and go to state 229
    non_array_type                 shift and go to state 58
    local_variable_type            shift and go to state 231
    statement                      shift and go to state 232
    local_variable_declaration     shift and go to state 178
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    array_type                     shift and go to state 53
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 246
    do_statement                   shift and go to state 248
    primary_no_array_creation_expression shift and go to state 250
    jump_statement                 shift and go to state 214
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    switch_label                   shift and go to state 708
    post_decrement_expression      shift and go to state 255
    while_statement                shift and go to state 257
    break_statement                shift and go to state 258
    floating_point_type            shift and go to state 70

state 674

    (393) switch_sections_opt -> switch_sections .
    (248) switch_sections -> switch_sections . switch_section
    (249) switch_section -> . switch_labels statement_list
    (250) switch_labels -> . switch_label
    (251) switch_labels -> . switch_labels switch_label
    (252) switch_label -> . CASE constant_expression COLON
    (253) switch_label -> . DEFAULT COLON

    RBRACE          reduce using rule 393 (switch_sections_opt -> switch_sections .)
    CASE            shift and go to state 668
    DEFAULT         shift and go to state 672

    switch_labels                  shift and go to state 673
    switch_section                 shift and go to state 709
    switch_label                   shift and go to state 670

state 675

    (247) switch_sections -> switch_section .

    CASE            reduce using rule 247 (switch_sections -> switch_section .)
    DEFAULT         reduce using rule 247 (switch_sections -> switch_section .)
    RBRACE          reduce using rule 247 (switch_sections -> switch_section .)


state 676

    (243) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE . embedded_statement
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    literal                        shift and go to state 221
    for_statement                  shift and go to state 223
    member_access                  shift and go to state 169
    switch_statement               shift and go to state 193
    selection_statement            shift and go to state 173
    base_access                    shift and go to state 226
    expression_statement           shift and go to state 175
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    delegate_creation_expression   shift and go to state 189
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    break_statement                shift and go to state 258
    do_statement                   shift and go to state 248
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    while_statement                shift and go to state 257
    block                          shift and go to state 200
    primary_no_array_creation_expression shift and go to state 250
    this_access                    shift and go to state 251
    simple_name                    shift and go to state 203
    empty_statement                shift and go to state 204
    array_creation_expression      shift and go to state 252
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    return_statement               shift and go to state 213
    jump_statement                 shift and go to state 214
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 710

state 677

    (258) do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN . STMT_TERMINATOR

    STMT_TERMINATOR shift and go to state 711


state 678

    (159) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 159 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 159 (expression_list -> expression_list COMMA expression .)
    RBRACE          reduce using rule 159 (expression_list -> expression_list COMMA expression .)


state 679

    (379) rank_specifiers_opt -> rank_specifiers .
    (38) rank_specifiers -> rank_specifiers . rank_specifier
    (39) rank_specifier -> . LBRACKET dim_separators_opt RBRACKET

    LBRACE          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LPAREN          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    INCREMENT       reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    DECREMENT       reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    MEMBERACCESS    reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    EQUALS          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    PLUSEQUAL       reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    MINUSEQUAL      reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    TIMESEQUAL      reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    DIVEQUAL        reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    MODEQUAL        reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    ANDEQUAL        reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    OREQUAL         reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    XOREQUAL        reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LAMBDADEC       reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    RSHIFTEQUAL     reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LSHIFTEQUAL     reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    TIMES           reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    DIVIDE          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    MOD             reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    PLUS            reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    MINUS           reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LSHIFT          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    RSHIFT          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LT              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    GT              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LE              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    GE              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    IS              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    AS              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    EQ              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    NE              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    AND             reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    XOR             reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    OR              reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    CAND            reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    CONDOP          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    COR             reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    COMMA           reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    RPAREN          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    STMT_TERMINATOR reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    RBRACE          reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    COLON           reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    RBRACKET        reduce using rule 379 (rank_specifiers_opt -> rank_specifiers .)
    LBRACKET        shift and go to state 111

    rank_specifier                 shift and go to state 156

state 680

    (276) array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt . array_initializer_opt
    (390) array_initializer_opt -> . empty
    (391) array_initializer_opt -> . array_initializer
    (371) empty -> .
    (199) array_initializer -> . LBRACE variable_initializer_list_opt RBRACE
    (200) array_initializer -> . LBRACE variable_initializer_list COMMA RBRACE

    LPAREN          reduce using rule 371 (empty -> .)
    INCREMENT       reduce using rule 371 (empty -> .)
    DECREMENT       reduce using rule 371 (empty -> .)
    MEMBERACCESS    reduce using rule 371 (empty -> .)
    EQUALS          reduce using rule 371 (empty -> .)
    PLUSEQUAL       reduce using rule 371 (empty -> .)
    MINUSEQUAL      reduce using rule 371 (empty -> .)
    TIMESEQUAL      reduce using rule 371 (empty -> .)
    DIVEQUAL        reduce using rule 371 (empty -> .)
    MODEQUAL        reduce using rule 371 (empty -> .)
    ANDEQUAL        reduce using rule 371 (empty -> .)
    OREQUAL         reduce using rule 371 (empty -> .)
    XOREQUAL        reduce using rule 371 (empty -> .)
    LAMBDADEC       reduce using rule 371 (empty -> .)
    RSHIFTEQUAL     reduce using rule 371 (empty -> .)
    LSHIFTEQUAL     reduce using rule 371 (empty -> .)
    TIMES           reduce using rule 371 (empty -> .)
    DIVIDE          reduce using rule 371 (empty -> .)
    MOD             reduce using rule 371 (empty -> .)
    PLUS            reduce using rule 371 (empty -> .)
    MINUS           reduce using rule 371 (empty -> .)
    LSHIFT          reduce using rule 371 (empty -> .)
    RSHIFT          reduce using rule 371 (empty -> .)
    LT              reduce using rule 371 (empty -> .)
    GT              reduce using rule 371 (empty -> .)
    LE              reduce using rule 371 (empty -> .)
    GE              reduce using rule 371 (empty -> .)
    IS              reduce using rule 371 (empty -> .)
    AS              reduce using rule 371 (empty -> .)
    EQ              reduce using rule 371 (empty -> .)
    NE              reduce using rule 371 (empty -> .)
    AND             reduce using rule 371 (empty -> .)
    XOR             reduce using rule 371 (empty -> .)
    OR              reduce using rule 371 (empty -> .)
    CAND            reduce using rule 371 (empty -> .)
    CONDOP          reduce using rule 371 (empty -> .)
    COR             reduce using rule 371 (empty -> .)
    COMMA           reduce using rule 371 (empty -> .)
    RPAREN          reduce using rule 371 (empty -> .)
    STMT_TERMINATOR reduce using rule 371 (empty -> .)
    RBRACE          reduce using rule 371 (empty -> .)
    COLON           reduce using rule 371 (empty -> .)
    RBRACKET        reduce using rule 371 (empty -> .)
    LBRACE          shift and go to state 416

    array_initializer_opt          shift and go to state 712
    array_initializer              shift and go to state 714
    empty                          shift and go to state 713

state 681

    (378) rank_specifiers_opt -> empty .

    LBRACE          reduce using rule 378 (rank_specifiers_opt -> empty .)
    LPAREN          reduce using rule 378 (rank_specifiers_opt -> empty .)
    INCREMENT       reduce using rule 378 (rank_specifiers_opt -> empty .)
    DECREMENT       reduce using rule 378 (rank_specifiers_opt -> empty .)
    MEMBERACCESS    reduce using rule 378 (rank_specifiers_opt -> empty .)
    EQUALS          reduce using rule 378 (rank_specifiers_opt -> empty .)
    PLUSEQUAL       reduce using rule 378 (rank_specifiers_opt -> empty .)
    MINUSEQUAL      reduce using rule 378 (rank_specifiers_opt -> empty .)
    TIMESEQUAL      reduce using rule 378 (rank_specifiers_opt -> empty .)
    DIVEQUAL        reduce using rule 378 (rank_specifiers_opt -> empty .)
    MODEQUAL        reduce using rule 378 (rank_specifiers_opt -> empty .)
    ANDEQUAL        reduce using rule 378 (rank_specifiers_opt -> empty .)
    OREQUAL         reduce using rule 378 (rank_specifiers_opt -> empty .)
    XOREQUAL        reduce using rule 378 (rank_specifiers_opt -> empty .)
    LAMBDADEC       reduce using rule 378 (rank_specifiers_opt -> empty .)
    RSHIFTEQUAL     reduce using rule 378 (rank_specifiers_opt -> empty .)
    LSHIFTEQUAL     reduce using rule 378 (rank_specifiers_opt -> empty .)
    TIMES           reduce using rule 378 (rank_specifiers_opt -> empty .)
    DIVIDE          reduce using rule 378 (rank_specifiers_opt -> empty .)
    MOD             reduce using rule 378 (rank_specifiers_opt -> empty .)
    PLUS            reduce using rule 378 (rank_specifiers_opt -> empty .)
    MINUS           reduce using rule 378 (rank_specifiers_opt -> empty .)
    LSHIFT          reduce using rule 378 (rank_specifiers_opt -> empty .)
    RSHIFT          reduce using rule 378 (rank_specifiers_opt -> empty .)
    LT              reduce using rule 378 (rank_specifiers_opt -> empty .)
    GT              reduce using rule 378 (rank_specifiers_opt -> empty .)
    LE              reduce using rule 378 (rank_specifiers_opt -> empty .)
    GE              reduce using rule 378 (rank_specifiers_opt -> empty .)
    IS              reduce using rule 378 (rank_specifiers_opt -> empty .)
    AS              reduce using rule 378 (rank_specifiers_opt -> empty .)
    EQ              reduce using rule 378 (rank_specifiers_opt -> empty .)
    NE              reduce using rule 378 (rank_specifiers_opt -> empty .)
    AND             reduce using rule 378 (rank_specifiers_opt -> empty .)
    XOR             reduce using rule 378 (rank_specifiers_opt -> empty .)
    OR              reduce using rule 378 (rank_specifiers_opt -> empty .)
    CAND            reduce using rule 378 (rank_specifiers_opt -> empty .)
    CONDOP          reduce using rule 378 (rank_specifiers_opt -> empty .)
    COR             reduce using rule 378 (rank_specifiers_opt -> empty .)
    COMMA           reduce using rule 378 (rank_specifiers_opt -> empty .)
    RPAREN          reduce using rule 378 (rank_specifiers_opt -> empty .)
    STMT_TERMINATOR reduce using rule 378 (rank_specifiers_opt -> empty .)
    RBRACE          reduce using rule 378 (rank_specifiers_opt -> empty .)
    COLON           reduce using rule 378 (rank_specifiers_opt -> empty .)
    RBRACKET        reduce using rule 378 (rank_specifiers_opt -> empty .)


state 682

    (151) initializer_value -> object_or_collection_initializer .

    COMMA           reduce using rule 151 (initializer_value -> object_or_collection_initializer .)
    RBRACE          reduce using rule 151 (initializer_value -> object_or_collection_initializer .)


state 683

    (149) member_initializer -> IDENTIFIER EQUALS initializer_value .

    COMMA           reduce using rule 149 (member_initializer -> IDENTIFIER EQUALS initializer_value .)
    RBRACE          reduce using rule 149 (member_initializer -> IDENTIFIER EQUALS initializer_value .)


state 684

    (150) initializer_value -> expression .

    COMMA           reduce using rule 150 (initializer_value -> expression .)
    RBRACE          reduce using rule 150 (initializer_value -> expression .)


state 685

    (155) element_initializer_list -> element_initializer_list COMMA element_initializer .

    RBRACE          reduce using rule 155 (element_initializer_list -> element_initializer_list COMMA element_initializer .)
    COMMA           reduce using rule 155 (element_initializer_list -> element_initializer_list COMMA element_initializer .)


state 686

    (153) collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .

    COMMA           reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    STMT_TERMINATOR reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LBRACKET        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LPAREN          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    INCREMENT       reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    DECREMENT       reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    MEMBERACCESS    reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    PLUSEQUAL       reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    MINUSEQUAL      reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    TIMESEQUAL      reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    DIVEQUAL        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    MODEQUAL        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    ANDEQUAL        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    OREQUAL         reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    XOREQUAL        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LAMBDADEC       reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    RSHIFTEQUAL     reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LSHIFTEQUAL     reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    MOD             reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LSHIFT          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    RSHIFT          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LT              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    GT              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    LE              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    GE              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    IS              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    AS              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    EQ              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    NE              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    AND             reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    XOR             reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    OR              reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    CAND            reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    CONDOP          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    COR             reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    COLON           reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 153 (collection_initializer -> LBRACE element_initializer_list COMMA RBRACE .)


state 687

    (148) member_initializer_list -> member_initializer_list COMMA member_initializer .

    COMMA           reduce using rule 148 (member_initializer_list -> member_initializer_list COMMA member_initializer .)
    RBRACE          reduce using rule 148 (member_initializer_list -> member_initializer_list COMMA member_initializer .)


state 688

    (149) member_initializer -> IDENTIFIER . EQUALS initializer_value

    EQUALS          shift and go to state 648


state 689

    (146) object_initializer -> LBRACE member_initializer_list COMMA RBRACE .

    STMT_TERMINATOR reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LBRACKET        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LPAREN          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    INCREMENT       reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    DECREMENT       reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    MEMBERACCESS    reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    PLUSEQUAL       reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    MINUSEQUAL      reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    TIMESEQUAL      reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    DIVEQUAL        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    MODEQUAL        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    ANDEQUAL        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    OREQUAL         reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    XOREQUAL        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LAMBDADEC       reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    RSHIFTEQUAL     reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LSHIFTEQUAL     reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    MOD             reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LSHIFT          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    RSHIFT          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LT              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    GT              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    LE              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    GE              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    IS              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    AS              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    EQ              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    NE              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    AND             reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    XOR             reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    OR              reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    CAND            reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    CONDOP          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    COR             reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    COLON           reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 146 (object_initializer -> LBRACE member_initializer_list COMMA RBRACE .)


state 690

    (157) element_initializer -> LBRACE expression_list RBRACE .

    RBRACE          reduce using rule 157 (element_initializer -> LBRACE expression_list RBRACE .)
    COMMA           reduce using rule 157 (element_initializer -> LBRACE expression_list RBRACE .)


state 691

    (418) object_or_collection_initializer_opt -> empty .

    STMT_TERMINATOR reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LBRACKET        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LPAREN          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    INCREMENT       reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    DECREMENT       reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    MEMBERACCESS    reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    EQUALS          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    PLUSEQUAL       reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    MINUSEQUAL      reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    TIMESEQUAL      reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    DIVEQUAL        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    MODEQUAL        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    ANDEQUAL        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    OREQUAL         reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    XOREQUAL        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LAMBDADEC       reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    RSHIFTEQUAL     reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LSHIFTEQUAL     reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    TIMES           reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    DIVIDE          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    MOD             reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    PLUS            reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    MINUS           reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LSHIFT          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    RSHIFT          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LT              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    GT              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    LE              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    GE              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    IS              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    AS              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    EQ              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    NE              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    AND             reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    XOR             reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    OR              reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    CAND            reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    CONDOP          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    COR             reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    COMMA           reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    RPAREN          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    RBRACE          reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    COLON           reduce using rule 418 (object_or_collection_initializer_opt -> empty .)
    RBRACKET        reduce using rule 418 (object_or_collection_initializer_opt -> empty .)


state 692

    (141) object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .

    LBRACKET        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    MEMBERACCESS    reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LPAREN          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    INCREMENT       reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    DECREMENT       reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    EQUALS          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    PLUSEQUAL       reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    MINUSEQUAL      reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    TIMESEQUAL      reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    DIVEQUAL        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    MODEQUAL        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    ANDEQUAL        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    OREQUAL         reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    XOREQUAL        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LAMBDADEC       reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    RSHIFTEQUAL     reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LSHIFTEQUAL     reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    TIMES           reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    DIVIDE          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    MOD             reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    PLUS            reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    MINUS           reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LSHIFT          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    RSHIFT          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LT              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    GT              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    LE              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    GE              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    IS              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    AS              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    EQ              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    NE              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    AND             reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    XOR             reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    OR              reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    CAND            reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    CONDOP          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    COR             reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    STMT_TERMINATOR reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    COMMA           reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    RPAREN          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    RBRACE          reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    COLON           reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)
    RBRACKET        reduce using rule 141 (object_creation_expression -> NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt .)


state 693

    (419) object_or_collection_initializer_opt -> object_or_collection_initializer .

    STMT_TERMINATOR reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LBRACKET        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LPAREN          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    INCREMENT       reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    DECREMENT       reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    MEMBERACCESS    reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    EQUALS          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    PLUSEQUAL       reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    MINUSEQUAL      reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    TIMESEQUAL      reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    DIVEQUAL        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    MODEQUAL        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    ANDEQUAL        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    OREQUAL         reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    XOREQUAL        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LAMBDADEC       reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    RSHIFTEQUAL     reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LSHIFTEQUAL     reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    TIMES           reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    DIVIDE          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    MOD             reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    PLUS            reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    MINUS           reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LSHIFT          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    RSHIFT          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LT              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    GT              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    LE              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    GE              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    IS              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    AS              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    EQ              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    NE              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    AND             reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    XOR             reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    OR              reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    CAND            reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    CONDOP          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    COR             reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    COMMA           reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    RPAREN          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    RBRACE          reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    COLON           reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)
    RBRACKET        reduce using rule 419 (object_or_collection_initializer_opt -> object_or_collection_initializer .)


state 694

    (341) destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .

    CONST           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    IDENTIFIER      reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    EXTERN          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    STATIC          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    CLASS           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    STRUCT          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    ENUM            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    DELEGATE        reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    LPAREN          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    VOID            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    LBRACE          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    OBJECT          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    STRING          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    BOOL            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    DECIMAL         reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    SBYTE           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    BYTE            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    SHORT           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    USHORT          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    INT             reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    UINT            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    LONG            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    ULONG           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    CHAR            reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    FLOAT           reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    DOUBLE          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    NOT             reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)
    RBRACE          reduce using rule 341 (destructor_declaration -> extern_opt NOT IDENTIFIER LPAREN RPAREN destructor_body .)


state 695

    (343) destructor_body -> STMT_TERMINATOR .

    CONST           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    EXTERN          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    STATIC          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    CLASS           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    STRUCT          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    ENUM            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    DELEGATE        reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    LPAREN          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    VOID            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    LBRACE          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    OBJECT          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    STRING          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    BOOL            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    DECIMAL         reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    SBYTE           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    BYTE            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    SHORT           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    USHORT          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    INT             reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    UINT            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    LONG            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    ULONG           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    CHAR            reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    FLOAT           reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    DOUBLE          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    NOT             reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)
    RBRACE          reduce using rule 343 (destructor_body -> STMT_TERMINATOR .)


state 696

    (342) destructor_body -> block .

    CONST           reduce using rule 342 (destructor_body -> block .)
    IDENTIFIER      reduce using rule 342 (destructor_body -> block .)
    EXTERN          reduce using rule 342 (destructor_body -> block .)
    STATIC          reduce using rule 342 (destructor_body -> block .)
    CLASS           reduce using rule 342 (destructor_body -> block .)
    STRUCT          reduce using rule 342 (destructor_body -> block .)
    ENUM            reduce using rule 342 (destructor_body -> block .)
    DELEGATE        reduce using rule 342 (destructor_body -> block .)
    LPAREN          reduce using rule 342 (destructor_body -> block .)
    VOID            reduce using rule 342 (destructor_body -> block .)
    LBRACE          reduce using rule 342 (destructor_body -> block .)
    OBJECT          reduce using rule 342 (destructor_body -> block .)
    STRING          reduce using rule 342 (destructor_body -> block .)
    BOOL            reduce using rule 342 (destructor_body -> block .)
    DECIMAL         reduce using rule 342 (destructor_body -> block .)
    SBYTE           reduce using rule 342 (destructor_body -> block .)
    BYTE            reduce using rule 342 (destructor_body -> block .)
    SHORT           reduce using rule 342 (destructor_body -> block .)
    USHORT          reduce using rule 342 (destructor_body -> block .)
    INT             reduce using rule 342 (destructor_body -> block .)
    UINT            reduce using rule 342 (destructor_body -> block .)
    LONG            reduce using rule 342 (destructor_body -> block .)
    ULONG           reduce using rule 342 (destructor_body -> block .)
    CHAR            reduce using rule 342 (destructor_body -> block .)
    FLOAT           reduce using rule 342 (destructor_body -> block .)
    DOUBLE          reduce using rule 342 (destructor_body -> block .)
    NOT             reduce using rule 342 (destructor_body -> block .)
    RBRACE          reduce using rule 342 (destructor_body -> block .)


state 697

    (338) constructor_initializer -> COLON THIS LPAREN argument_list_opt RPAREN .

    STMT_TERMINATOR reduce using rule 338 (constructor_initializer -> COLON THIS LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 338 (constructor_initializer -> COLON THIS LPAREN argument_list_opt RPAREN .)


state 698

    (337) constructor_initializer -> COLON BASE LPAREN argument_list_opt RPAREN .

    STMT_TERMINATOR reduce using rule 337 (constructor_initializer -> COLON BASE LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 337 (constructor_initializer -> COLON BASE LPAREN argument_list_opt RPAREN .)


state 699

    (416) for_iterator_opt -> empty .

    RPAREN          reduce using rule 416 (for_iterator_opt -> empty .)


state 700

    (417) for_iterator_opt -> for_iterator .

    RPAREN          reduce using rule 417 (for_iterator_opt -> for_iterator .)


state 701

    (265) for_iterator -> statement_expression_list .
    (263) statement_expression_list -> statement_expression_list . COMMA statement_expression

    RPAREN          reduce using rule 265 (for_iterator -> statement_expression_list .)
    COMMA           shift and go to state 573


state 702

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt . RPAREN embedded_statement

    RPAREN          shift and go to state 715


state 703

    (252) switch_label -> CASE constant_expression . COLON

    COLON           shift and go to state 716


state 704

    (246) switch_block -> LBRACE switch_sections_opt RBRACE .

    CONST           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    LBRACE          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    STMT_TERMINATOR reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    IF              reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    SWITCH          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    WHILE           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DO              reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    FOR             reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    BREAK           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    CONTINUE        reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    GOTO            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    RETURN          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    NEW             reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    INCREMENT       reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DECREMENT       reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    PLUS            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    MINUS           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    LNOT            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    NOT             reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    OBJECT          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    STRING          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    LPAREN          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    BOOL            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    INTCONST        reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    STRCONST        reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    CHCONST         reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    IDENTIFIER      reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    THIS            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    BASE            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    TYPEOF          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DEFAULT         reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DELEGATE        reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DECIMAL         reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    BYTE            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    CHAR            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    DOUBLE          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    FLOAT           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    INT             reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    LONG            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    SBYTE           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    SHORT           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    UINT            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    ULONG           reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    USHORT          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    RBRACE          reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    ELSE            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)
    CASE            reduce using rule 246 (switch_block -> LBRACE switch_sections_opt RBRACE .)


state 705

    (253) switch_label -> DEFAULT COLON .

    CASE            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 253 (switch_label -> DEFAULT COLON .)
    CONST           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    LBRACE          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    STMT_TERMINATOR reduce using rule 253 (switch_label -> DEFAULT COLON .)
    IF              reduce using rule 253 (switch_label -> DEFAULT COLON .)
    SWITCH          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    WHILE           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DO              reduce using rule 253 (switch_label -> DEFAULT COLON .)
    FOR             reduce using rule 253 (switch_label -> DEFAULT COLON .)
    BREAK           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 253 (switch_label -> DEFAULT COLON .)
    GOTO            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    RETURN          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    NEW             reduce using rule 253 (switch_label -> DEFAULT COLON .)
    INCREMENT       reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DECREMENT       reduce using rule 253 (switch_label -> DEFAULT COLON .)
    PLUS            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    MINUS           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    LNOT            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    NOT             reduce using rule 253 (switch_label -> DEFAULT COLON .)
    OBJECT          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    STRING          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    LPAREN          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    BOOL            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    INTCONST        reduce using rule 253 (switch_label -> DEFAULT COLON .)
    STRCONST        reduce using rule 253 (switch_label -> DEFAULT COLON .)
    CHCONST         reduce using rule 253 (switch_label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 253 (switch_label -> DEFAULT COLON .)
    THIS            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    BASE            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    TYPEOF          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DELEGATE        reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DECIMAL         reduce using rule 253 (switch_label -> DEFAULT COLON .)
    BYTE            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    CHAR            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 253 (switch_label -> DEFAULT COLON .)
    FLOAT           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    INT             reduce using rule 253 (switch_label -> DEFAULT COLON .)
    LONG            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    SBYTE           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    SHORT           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    UINT            reduce using rule 253 (switch_label -> DEFAULT COLON .)
    ULONG           reduce using rule 253 (switch_label -> DEFAULT COLON .)
    USHORT          reduce using rule 253 (switch_label -> DEFAULT COLON .)


state 706

    (249) switch_section -> switch_labels statement_list .
    (186) statement_list -> statement_list . statement
    (187) statement -> . declaration_statement
    (188) statement -> . embedded_statement
    (189) declaration_statement -> . local_variable_declaration STMT_TERMINATOR
    (190) declaration_statement -> . local_constant_declaration STMT_TERMINATOR
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (191) local_variable_declaration -> . local_variable_type local_variable_declarators
    (205) local_constant_declaration -> . CONST type constant_declarators
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (192) local_variable_type -> . type
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (7) type -> . value_type
    (8) type -> . reference_type
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (9) value_type -> . struct_type
    (29) reference_type -> . class_type
    (30) reference_type -> . array_type
    (31) reference_type -> . delegate_type
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (10) struct_type -> . type_name
    (11) struct_type -> . simple_type
    (32) class_type -> . type_name
    (33) class_type -> . OBJECT
    (34) class_type -> . STRING
    (35) array_type -> . non_array_type rank_specifiers
    (45) delegate_type -> . type_name
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (12) type_name -> . namespace_or_type_name
    (13) simple_type -> . numeric_type
    (14) simple_type -> . BOOL
    (36) non_array_type -> . type
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (5) namespace_or_type_name -> . IDENTIFIER
    (6) namespace_or_type_name -> . namespace_or_type_name MEMBERACCESS IDENTIFIER
    (15) numeric_type -> . integral_type
    (16) numeric_type -> . floating_point_type
    (17) numeric_type -> . DECIMAL
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT
    (18) integral_type -> . SBYTE
    (19) integral_type -> . BYTE
    (20) integral_type -> . SHORT
    (21) integral_type -> . USHORT
    (22) integral_type -> . INT
    (23) integral_type -> . UINT
    (24) integral_type -> . LONG
    (25) integral_type -> . ULONG
    (26) integral_type -> . CHAR
    (27) floating_point_type -> . FLOAT
    (28) floating_point_type -> . DOUBLE

  ! shift/reduce conflict for DEFAULT resolved as shift
    CASE            reduce using rule 249 (switch_section -> switch_labels statement_list .)
    RBRACE          reduce using rule 249 (switch_section -> switch_labels statement_list .)
    CONST           shift and go to state 197
    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    OBJECT          shift and go to state 188
    STRING          shift and go to state 180
    LPAREN          shift and go to state 236
    BOOL            shift and go to state 168
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 171
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    DECIMAL         shift and go to state 249
    BYTE            shift and go to state 211
    CHAR            shift and go to state 166
    DOUBLE          shift and go to state 254
    FLOAT           shift and go to state 230
    INT             shift and go to state 190
    LONG            shift and go to state 196
    SBYTE           shift and go to state 181
    SHORT           shift and go to state 207
    UINT            shift and go to state 225
    ULONG           shift and go to state 237
    USHORT          shift and go to state 187

  ! DEFAULT         [ reduce using rule 249 (switch_section -> switch_labels statement_list .) ]

    numeric_type                   shift and go to state 38
    member_access                  shift and go to state 169
    simple_type                    shift and go to state 40
    selection_statement            shift and go to state 173
    cast_expression                shift and go to state 174
    literal                        shift and go to state 221
    parenthesized_expression       shift and go to state 191
    struct_type                    shift and go to state 42
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    declaration_statement          shift and go to state 185
    anonymous_method_expression    shift and go to state 235
    empty_statement                shift and go to state 204
    local_constant_declaration     shift and go to state 192
    switch_statement               shift and go to state 193
    delegate_type                  shift and go to state 51
    assignment                     shift and go to state 198
    type                           shift and go to state 199
    block                          shift and go to state 200
    typeof_expression              shift and go to state 176
    class_type                     shift and go to state 59
    delegate_creation_expression   shift and go to state 189
    type_name                      shift and go to state 50
    integral_type                  shift and go to state 62
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    return_statement               shift and go to state 213
    element_access                 shift and go to state 209
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    simple_name                    shift and go to state 203
    this_access                    shift and go to state 251
    if_statement                   shift and go to state 195
    embedded_statement             shift and go to state 216
    value_type                     shift and go to state 68
    anonymous_object_creation_expression shift and go to state 220
    expression_statement           shift and go to state 175
    for_statement                  shift and go to state 223
    base_access                    shift and go to state 226
    unary_expression               shift and go to state 229
    non_array_type                 shift and go to state 58
    local_variable_type            shift and go to state 231
    statement                      shift and go to state 337
    local_variable_declaration     shift and go to state 178
    default_value_expression       shift and go to state 172
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    array_type                     shift and go to state 53
    namespace_or_type_name         shift and go to state 56
    pre_increment_expression       shift and go to state 246
    do_statement                   shift and go to state 248
    primary_no_array_creation_expression shift and go to state 250
    jump_statement                 shift and go to state 214
    array_creation_expression      shift and go to state 252
    reference_type                 shift and go to state 61
    post_decrement_expression      shift and go to state 255
    while_statement                shift and go to state 257
    break_statement                shift and go to state 258
    floating_point_type            shift and go to state 70

state 707

    (253) switch_label -> DEFAULT . COLON
    (178) default_value_expression -> DEFAULT . LPAREN type RPAREN

    COLON           shift and go to state 705
    LPAREN          shift and go to state 399


state 708

    (251) switch_labels -> switch_labels switch_label .

    CASE            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DEFAULT         reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    CONST           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    LBRACE          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    STMT_TERMINATOR reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    IF              reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    SWITCH          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    WHILE           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DO              reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    FOR             reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    BREAK           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    CONTINUE        reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    GOTO            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    RETURN          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    NEW             reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    INCREMENT       reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DECREMENT       reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    PLUS            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    MINUS           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    LNOT            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    NOT             reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    OBJECT          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    STRING          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    LPAREN          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    BOOL            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    INTCONST        reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    STRCONST        reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    CHCONST         reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    IDENTIFIER      reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    THIS            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    BASE            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    TYPEOF          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DELEGATE        reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DECIMAL         reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    BYTE            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    CHAR            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    DOUBLE          reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    FLOAT           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    INT             reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    LONG            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    SBYTE           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    SHORT           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    UINT            reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    ULONG           reduce using rule 251 (switch_labels -> switch_labels switch_label .)
    USHORT          reduce using rule 251 (switch_labels -> switch_labels switch_label .)


state 709

    (248) switch_sections -> switch_sections switch_section .

    CASE            reduce using rule 248 (switch_sections -> switch_sections switch_section .)
    DEFAULT         reduce using rule 248 (switch_sections -> switch_sections switch_section .)
    RBRACE          reduce using rule 248 (switch_sections -> switch_sections switch_section .)


state 710

    (243) if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .

    CONST           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LBRACE          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    STMT_TERMINATOR reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    IF              reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    SWITCH          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    WHILE           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DO              reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    FOR             reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    BREAK           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CONTINUE        reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    GOTO            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    RETURN          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    NEW             reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INCREMENT       reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DECREMENT       reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    PLUS            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    MINUS           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LNOT            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    NOT             reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    OBJECT          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    STRING          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LPAREN          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    BOOL            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INTCONST        reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    STRCONST        reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CHCONST         reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    IDENTIFIER      reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    THIS            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    BASE            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    TYPEOF          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DEFAULT         reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DELEGATE        reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DECIMAL         reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    BYTE            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CHAR            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    DOUBLE          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    FLOAT           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    INT             reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    LONG            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    SBYTE           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    SHORT           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    UINT            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    ULONG           reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    USHORT          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    CASE            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    RBRACE          reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)
    ELSE            reduce using rule 243 (if_statement -> IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement .)


state 711

    (258) do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .

    CONST           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    LBRACE          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    STMT_TERMINATOR reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    IF              reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    SWITCH          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    WHILE           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DO              reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    FOR             reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    BREAK           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    CONTINUE        reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    GOTO            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    RETURN          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    NEW             reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    INCREMENT       reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DECREMENT       reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    PLUS            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    MINUS           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    LNOT            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    NOT             reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    OBJECT          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    STRING          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    LPAREN          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    BOOL            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    INTCONST        reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    STRCONST        reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    CHCONST         reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    IDENTIFIER      reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    THIS            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    BASE            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    TYPEOF          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DEFAULT         reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DELEGATE        reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DECIMAL         reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    BYTE            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    CHAR            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    DOUBLE          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    FLOAT           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    INT             reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    LONG            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    SBYTE           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    SHORT           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    UINT            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    ULONG           reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    USHORT          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    RBRACE          reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    ELSE            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)
    CASE            reduce using rule 258 (do_statement -> DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR .)


state 712

    (276) array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .

    MEMBERACCESS    reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LPAREN          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    INCREMENT       reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    DECREMENT       reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    EQUALS          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    PLUSEQUAL       reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    MINUSEQUAL      reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    TIMESEQUAL      reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    DIVEQUAL        reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    MODEQUAL        reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    ANDEQUAL        reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    OREQUAL         reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    XOREQUAL        reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LAMBDADEC       reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    RSHIFTEQUAL     reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LSHIFTEQUAL     reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    TIMES           reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    DIVIDE          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    MOD             reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    PLUS            reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    MINUS           reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LSHIFT          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    RSHIFT          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LT              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    GT              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    LE              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    GE              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    IS              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    AS              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    EQ              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    NE              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    AND             reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    XOR             reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    OR              reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    CAND            reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    CONDOP          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    COR             reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    STMT_TERMINATOR reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    COMMA           reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    RPAREN          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    RBRACE          reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    COLON           reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)
    RBRACKET        reduce using rule 276 (array_creation_expression -> NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt .)


state 713

    (390) array_initializer_opt -> empty .

    LPAREN          reduce using rule 390 (array_initializer_opt -> empty .)
    INCREMENT       reduce using rule 390 (array_initializer_opt -> empty .)
    DECREMENT       reduce using rule 390 (array_initializer_opt -> empty .)
    MEMBERACCESS    reduce using rule 390 (array_initializer_opt -> empty .)
    EQUALS          reduce using rule 390 (array_initializer_opt -> empty .)
    PLUSEQUAL       reduce using rule 390 (array_initializer_opt -> empty .)
    MINUSEQUAL      reduce using rule 390 (array_initializer_opt -> empty .)
    TIMESEQUAL      reduce using rule 390 (array_initializer_opt -> empty .)
    DIVEQUAL        reduce using rule 390 (array_initializer_opt -> empty .)
    MODEQUAL        reduce using rule 390 (array_initializer_opt -> empty .)
    ANDEQUAL        reduce using rule 390 (array_initializer_opt -> empty .)
    OREQUAL         reduce using rule 390 (array_initializer_opt -> empty .)
    XOREQUAL        reduce using rule 390 (array_initializer_opt -> empty .)
    LAMBDADEC       reduce using rule 390 (array_initializer_opt -> empty .)
    RSHIFTEQUAL     reduce using rule 390 (array_initializer_opt -> empty .)
    LSHIFTEQUAL     reduce using rule 390 (array_initializer_opt -> empty .)
    TIMES           reduce using rule 390 (array_initializer_opt -> empty .)
    DIVIDE          reduce using rule 390 (array_initializer_opt -> empty .)
    MOD             reduce using rule 390 (array_initializer_opt -> empty .)
    PLUS            reduce using rule 390 (array_initializer_opt -> empty .)
    MINUS           reduce using rule 390 (array_initializer_opt -> empty .)
    LSHIFT          reduce using rule 390 (array_initializer_opt -> empty .)
    RSHIFT          reduce using rule 390 (array_initializer_opt -> empty .)
    LT              reduce using rule 390 (array_initializer_opt -> empty .)
    GT              reduce using rule 390 (array_initializer_opt -> empty .)
    LE              reduce using rule 390 (array_initializer_opt -> empty .)
    GE              reduce using rule 390 (array_initializer_opt -> empty .)
    IS              reduce using rule 390 (array_initializer_opt -> empty .)
    AS              reduce using rule 390 (array_initializer_opt -> empty .)
    EQ              reduce using rule 390 (array_initializer_opt -> empty .)
    NE              reduce using rule 390 (array_initializer_opt -> empty .)
    AND             reduce using rule 390 (array_initializer_opt -> empty .)
    XOR             reduce using rule 390 (array_initializer_opt -> empty .)
    OR              reduce using rule 390 (array_initializer_opt -> empty .)
    CAND            reduce using rule 390 (array_initializer_opt -> empty .)
    CONDOP          reduce using rule 390 (array_initializer_opt -> empty .)
    COR             reduce using rule 390 (array_initializer_opt -> empty .)
    COMMA           reduce using rule 390 (array_initializer_opt -> empty .)
    RPAREN          reduce using rule 390 (array_initializer_opt -> empty .)
    STMT_TERMINATOR reduce using rule 390 (array_initializer_opt -> empty .)
    RBRACE          reduce using rule 390 (array_initializer_opt -> empty .)
    COLON           reduce using rule 390 (array_initializer_opt -> empty .)
    RBRACKET        reduce using rule 390 (array_initializer_opt -> empty .)


state 714

    (391) array_initializer_opt -> array_initializer .

    LPAREN          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    INCREMENT       reduce using rule 391 (array_initializer_opt -> array_initializer .)
    DECREMENT       reduce using rule 391 (array_initializer_opt -> array_initializer .)
    MEMBERACCESS    reduce using rule 391 (array_initializer_opt -> array_initializer .)
    EQUALS          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    PLUSEQUAL       reduce using rule 391 (array_initializer_opt -> array_initializer .)
    MINUSEQUAL      reduce using rule 391 (array_initializer_opt -> array_initializer .)
    TIMESEQUAL      reduce using rule 391 (array_initializer_opt -> array_initializer .)
    DIVEQUAL        reduce using rule 391 (array_initializer_opt -> array_initializer .)
    MODEQUAL        reduce using rule 391 (array_initializer_opt -> array_initializer .)
    ANDEQUAL        reduce using rule 391 (array_initializer_opt -> array_initializer .)
    OREQUAL         reduce using rule 391 (array_initializer_opt -> array_initializer .)
    XOREQUAL        reduce using rule 391 (array_initializer_opt -> array_initializer .)
    LAMBDADEC       reduce using rule 391 (array_initializer_opt -> array_initializer .)
    RSHIFTEQUAL     reduce using rule 391 (array_initializer_opt -> array_initializer .)
    LSHIFTEQUAL     reduce using rule 391 (array_initializer_opt -> array_initializer .)
    TIMES           reduce using rule 391 (array_initializer_opt -> array_initializer .)
    DIVIDE          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    MOD             reduce using rule 391 (array_initializer_opt -> array_initializer .)
    PLUS            reduce using rule 391 (array_initializer_opt -> array_initializer .)
    MINUS           reduce using rule 391 (array_initializer_opt -> array_initializer .)
    LSHIFT          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    RSHIFT          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    LT              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    GT              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    LE              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    GE              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    IS              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    AS              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    EQ              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    NE              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    AND             reduce using rule 391 (array_initializer_opt -> array_initializer .)
    XOR             reduce using rule 391 (array_initializer_opt -> array_initializer .)
    OR              reduce using rule 391 (array_initializer_opt -> array_initializer .)
    CAND            reduce using rule 391 (array_initializer_opt -> array_initializer .)
    CONDOP          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    COR             reduce using rule 391 (array_initializer_opt -> array_initializer .)
    COMMA           reduce using rule 391 (array_initializer_opt -> array_initializer .)
    RPAREN          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    STMT_TERMINATOR reduce using rule 391 (array_initializer_opt -> array_initializer .)
    RBRACE          reduce using rule 391 (array_initializer_opt -> array_initializer .)
    COLON           reduce using rule 391 (array_initializer_opt -> array_initializer .)
    RBRACKET        reduce using rule 391 (array_initializer_opt -> array_initializer .)


state 715

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN . embedded_statement
    (210) embedded_statement -> . block
    (211) embedded_statement -> . empty_statement
    (212) embedded_statement -> . expression_statement
    (213) embedded_statement -> . selection_statement
    (214) embedded_statement -> . iteration_statement
    (215) embedded_statement -> . jump_statement
    (184) block -> . LBRACE statement_list_opt RBRACE
    (216) empty_statement -> . STMT_TERMINATOR
    (217) expression_statement -> . statement_expression STMT_TERMINATOR
    (240) selection_statement -> . if_statement
    (241) selection_statement -> . switch_statement
    (254) iteration_statement -> . while_statement
    (255) iteration_statement -> . do_statement
    (256) iteration_statement -> . for_statement
    (266) jump_statement -> . break_statement
    (267) jump_statement -> . continue_statement
    (268) jump_statement -> . goto_statement
    (269) jump_statement -> . return_statement
    (218) statement_expression -> . invocation_expression
    (219) statement_expression -> . object_creation_expression
    (220) statement_expression -> . assignment
    (221) statement_expression -> . post_increment_expression
    (222) statement_expression -> . post_decrement_expression
    (223) statement_expression -> . pre_increment_expression
    (224) statement_expression -> . pre_decrement_expression
    (242) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement
    (243) if_statement -> . IF LPAREN boolean_expression RPAREN embedded_statement ELSE embedded_statement
    (245) switch_statement -> . SWITCH LPAREN expression RPAREN switch_block
    (257) while_statement -> . WHILE LPAREN boolean_expression RPAREN embedded_statement
    (258) do_statement -> . DO embedded_statement WHILE LPAREN boolean_expression RPAREN STMT_TERMINATOR
    (259) for_statement -> . FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement
    (270) break_statement -> . BREAK STMT_TERMINATOR
    (271) continue_statement -> . CONTINUE STMT_TERMINATOR
    (272) goto_statement -> . GOTO IDENTIFIER STMT_TERMINATOR
    (273) goto_statement -> . GOTO CASE constant_expression STMT_TERMINATOR
    (274) goto_statement -> . GOTO DEFAULT STMT_TERMINATOR
    (275) return_statement -> . RETURN expression_opt STMT_TERMINATOR
    (130) invocation_expression -> . primary_expression LPAREN argument_list_opt RPAREN
    (141) object_creation_expression -> . NEW type LPAREN argument_list_opt RPAREN object_or_collection_initializer_opt
    (142) object_creation_expression -> . NEW type object_or_collection_initializer
    (225) assignment -> . unary_expression assignment_operator expression
    (139) post_increment_expression -> . primary_expression INCREMENT
    (140) post_decrement_expression -> . primary_expression DECREMENT
    (238) pre_increment_expression -> . INCREMENT unary_expression
    (239) pre_decrement_expression -> . DECREMENT unary_expression
    (93) primary_expression -> . primary_no_array_creation_expression
    (94) primary_expression -> . array_creation_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . PLUS unary_expression
    (87) unary_expression -> . MINUS unary_expression
    (88) unary_expression -> . LNOT unary_expression
    (89) unary_expression -> . NOT unary_expression
    (90) unary_expression -> . pre_increment_expression
    (91) unary_expression -> . pre_decrement_expression
    (92) unary_expression -> . cast_expression
    (95) primary_no_array_creation_expression -> . literal
    (96) primary_no_array_creation_expression -> . simple_name
    (97) primary_no_array_creation_expression -> . parenthesized_expression
    (98) primary_no_array_creation_expression -> . member_access
    (99) primary_no_array_creation_expression -> . invocation_expression
    (100) primary_no_array_creation_expression -> . element_access
    (101) primary_no_array_creation_expression -> . this_access
    (102) primary_no_array_creation_expression -> . base_access
    (103) primary_no_array_creation_expression -> . post_increment_expression
    (104) primary_no_array_creation_expression -> . post_decrement_expression
    (105) primary_no_array_creation_expression -> . object_creation_expression
    (106) primary_no_array_creation_expression -> . delegate_creation_expression
    (107) primary_no_array_creation_expression -> . anonymous_object_creation_expression
    (108) primary_no_array_creation_expression -> . typeof_expression
    (109) primary_no_array_creation_expression -> . default_value_expression
    (110) primary_no_array_creation_expression -> . anonymous_method_expression
    (276) array_creation_expression -> . NEW non_array_type LBRACKET expression_list RBRACKET rank_specifiers_opt array_initializer_opt
    (277) array_creation_expression -> . NEW array_type array_initializer
    (278) array_creation_expression -> . NEW rank_specifier array_initializer
    (279) cast_expression -> . LPAREN type RPAREN unary_expression
    (40) literal -> . INTCONST
    (41) literal -> . STRCONST
    (42) literal -> . CHCONST
    (111) simple_name -> . IDENTIFIER
    (112) parenthesized_expression -> . LPAREN expression RPAREN
    (113) member_access -> . primary_expression MEMBERACCESS IDENTIFIER
    (114) member_access -> . predefined_type MEMBERACCESS IDENTIFIER
    (135) element_access -> . primary_no_array_creation_expression LBRACKET argument_list RBRACKET
    (136) this_access -> . THIS
    (137) base_access -> . BASE MEMBERACCESS IDENTIFIER
    (138) base_access -> . BASE LBRACKET argument_list RBRACKET
    (160) delegate_creation_expression -> . NEW delegate_type LPAREN expression RPAREN
    (161) anonymous_object_creation_expression -> . NEW anonymous_object_initializer
    (169) typeof_expression -> . TYPEOF LPAREN type RPAREN
    (170) typeof_expression -> . TYPEOF LPAREN unbound_type_name RPAREN
    (171) typeof_expression -> . TYPEOF LPAREN VOID RPAREN
    (178) default_value_expression -> . DEFAULT LPAREN type RPAREN
    (179) anonymous_method_expression -> . DELEGATE explicit_anonymous_function_signature_opt block
    (115) predefined_type -> . BOOL
    (116) predefined_type -> . BYTE
    (117) predefined_type -> . CHAR
    (118) predefined_type -> . DECIMAL
    (119) predefined_type -> . DOUBLE
    (120) predefined_type -> . FLOAT
    (121) predefined_type -> . INT
    (122) predefined_type -> . LONG
    (123) predefined_type -> . OBJECT
    (124) predefined_type -> . SBYTE
    (125) predefined_type -> . SHORT
    (126) predefined_type -> . STRING
    (127) predefined_type -> . UINT
    (128) predefined_type -> . ULONG
    (129) predefined_type -> . USHORT

    LBRACE          shift and go to state 126
    STMT_TERMINATOR shift and go to state 234
    IF              shift and go to state 218
    SWITCH          shift and go to state 217
    WHILE           shift and go to state 184
    DO              shift and go to state 244
    FOR             shift and go to state 170
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 194
    GOTO            shift and go to state 233
    RETURN          shift and go to state 215
    NEW             shift and go to state 259
    INCREMENT       shift and go to state 201
    DECREMENT       shift and go to state 219
    PLUS            shift and go to state 228
    MINUS           shift and go to state 222
    LNOT            shift and go to state 256
    NOT             shift and go to state 227
    LPAREN          shift and go to state 236
    INTCONST        shift and go to state 186
    STRCONST        shift and go to state 240
    CHCONST         shift and go to state 224
    IDENTIFIER      shift and go to state 345
    THIS            shift and go to state 243
    BASE            shift and go to state 179
    TYPEOF          shift and go to state 202
    DEFAULT         shift and go to state 247
    DELEGATE        shift and go to state 253
    BOOL            shift and go to state 275
    BYTE            shift and go to state 293
    CHAR            shift and go to state 279
    DECIMAL         shift and go to state 294
    DOUBLE          shift and go to state 315
    FLOAT           shift and go to state 302
    INT             shift and go to state 283
    LONG            shift and go to state 286
    OBJECT          shift and go to state 288
    SBYTE           shift and go to state 311
    SHORT           shift and go to state 290
    STRING          shift and go to state 280
    UINT            shift and go to state 297
    ULONG           shift and go to state 305
    USHORT          shift and go to state 295

    anonymous_object_creation_expression shift and go to state 220
    literal                        shift and go to state 221
    for_statement                  shift and go to state 223
    member_access                  shift and go to state 169
    switch_statement               shift and go to state 193
    selection_statement            shift and go to state 173
    base_access                    shift and go to state 226
    expression_statement           shift and go to state 175
    typeof_expression              shift and go to state 176
    unary_expression               shift and go to state 229
    post_increment_expression      shift and go to state 182
    continue_statement             shift and go to state 183
    delegate_creation_expression   shift and go to state 189
    cast_expression                shift and go to state 174
    parenthesized_expression       shift and go to state 191
    default_value_expression       shift and go to state 172
    anonymous_method_expression    shift and go to state 235
    statement_expression           shift and go to state 238
    primary_expression             shift and go to state 239
    object_creation_expression     shift and go to state 241
    element_access                 shift and go to state 209
    do_statement                   shift and go to state 248
    pre_increment_expression       shift and go to state 246
    assignment                     shift and go to state 198
    while_statement                shift and go to state 257
    block                          shift and go to state 200
    primary_no_array_creation_expression shift and go to state 250
    this_access                    shift and go to state 251
    simple_name                    shift and go to state 203
    empty_statement                shift and go to state 204
    array_creation_expression      shift and go to state 252
    if_statement                   shift and go to state 195
    invocation_expression          shift and go to state 205
    predefined_type                shift and go to state 206
    pre_decrement_expression       shift and go to state 208
    post_decrement_expression      shift and go to state 255
    iteration_statement            shift and go to state 210
    goto_statement                 shift and go to state 212
    return_statement               shift and go to state 213
    jump_statement                 shift and go to state 214
    break_statement                shift and go to state 258
    embedded_statement             shift and go to state 717

state 716

    (252) switch_label -> CASE constant_expression COLON .

    CASE            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DEFAULT         reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    CONST           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    LBRACE          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    STMT_TERMINATOR reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    IF              reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    SWITCH          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    WHILE           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DO              reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    FOR             reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    BREAK           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    CONTINUE        reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    GOTO            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    RETURN          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    NEW             reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    INCREMENT       reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DECREMENT       reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    PLUS            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    MINUS           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    LNOT            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    NOT             reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    OBJECT          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    STRING          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    LPAREN          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    BOOL            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    INTCONST        reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    STRCONST        reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    CHCONST         reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    IDENTIFIER      reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    THIS            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    BASE            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    TYPEOF          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DELEGATE        reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DECIMAL         reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    BYTE            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    CHAR            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    DOUBLE          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    FLOAT           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    INT             reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    LONG            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    SBYTE           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    SHORT           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    UINT            reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    ULONG           reduce using rule 252 (switch_label -> CASE constant_expression COLON .)
    USHORT          reduce using rule 252 (switch_label -> CASE constant_expression COLON .)


state 717

    (259) for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .

    CONST           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    LBRACE          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    STMT_TERMINATOR reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    IF              reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    SWITCH          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    WHILE           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DO              reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    FOR             reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    BREAK           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    CONTINUE        reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    GOTO            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    RETURN          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    NEW             reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    INCREMENT       reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DECREMENT       reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    PLUS            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    MINUS           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    LNOT            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    NOT             reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    OBJECT          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    STRING          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    LPAREN          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    BOOL            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    INTCONST        reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    STRCONST        reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    CHCONST         reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    IDENTIFIER      reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    THIS            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    BASE            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    TYPEOF          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DEFAULT         reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DELEGATE        reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DECIMAL         reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    BYTE            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    CHAR            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    DOUBLE          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    FLOAT           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    INT             reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    LONG            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    SBYTE           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    SHORT           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    UINT            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    ULONG           reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    USHORT          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    RBRACE          reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    ELSE            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)
    CASE            reduce using rule 259 (for_statement -> FOR LPAREN for_initializer_opt STMT_TERMINATOR for_condition_opt STMT_TERMINATOR for_iterator_opt RPAREN embedded_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STATIC in state 28 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 91 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 96 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 112 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 158 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 325 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 339 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 395 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 400 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 409 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 410 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 518 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 574 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 625 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 626 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 642 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 706 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (struct_type -> type_name)
WARNING: rejected rule (class_type -> type_name) in state 50
WARNING: reduce/reduce conflict in state 50 resolved using rule (struct_type -> type_name)
WARNING: rejected rule (delegate_type -> type_name) in state 50
WARNING: reduce/reduce conflict in state 80 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (delegate_declaration -> IDENTIFIER) in state 80
WARNING: reduce/reduce conflict in state 171 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (simple_name -> IDENTIFIER) in state 171
WARNING: reduce/reduce conflict in state 278 resolved using rule (simple_name -> IDENTIFIER)
WARNING: rejected rule (implicit_anonymous_function_parameter -> IDENTIFIER) in state 278
WARNING: reduce/reduce conflict in state 377 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (simple_name -> IDENTIFIER) in state 377
WARNING: reduce/reduce conflict in state 377 resolved using rule (simple_name -> IDENTIFIER)
WARNING: rejected rule (implicit_anonymous_function_parameter -> IDENTIFIER) in state 377
WARNING: reduce/reduce conflict in state 407 resolved using rule (struct_type -> type_name)
WARNING: rejected rule (delegate_type -> type_name) in state 407
WARNING: reduce/reduce conflict in state 407 resolved using rule (struct_type -> type_name)
WARNING: rejected rule (class_type -> type_name) in state 407
WARNING: reduce/reduce conflict in state 442 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (implicit_anonymous_function_parameter -> IDENTIFIER) in state 442
WARNING: reduce/reduce conflict in state 442 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (simple_name -> IDENTIFIER) in state 442
WARNING: reduce/reduce conflict in state 442 resolved using rule (simple_name -> IDENTIFIER)
WARNING: rejected rule (implicit_anonymous_function_parameter -> IDENTIFIER) in state 442
WARNING: reduce/reduce conflict in state 444 resolved using rule (implicit_anonymous_function_parameter_list_opt -> empty)
WARNING: rejected rule (explicit_anonymous_function_parameter_list_opt -> empty) in state 444
WARNING: reduce/reduce conflict in state 486 resolved using rule (namespace_or_type_name -> IDENTIFIER)
WARNING: rejected rule (empty -> <empty>) in state 486
WARNING: Rule (delegate_type -> type_name) is never reduced
